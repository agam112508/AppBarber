%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: 1601.m10.i304.n034.P.c25.239329894 Barber shop vector elements for logo, labels and badges.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For:  
%%CreationDate: 26.01.16
%%BoundingBox: 0 0 404 257
%%HiResBoundingBox: 0 0 403.7443 256.9450
%%CropBox: 0 0 403.7443 256.9450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.0 x111 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">nautical_emblems_1_set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-01-26T16:44:57+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-01-26T16:44:57+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-01-26T16:44:57+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>164</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9B+ZPzL8i+Wr9bDW9Xis&#xA;7xkEvoFZHYIxIBPpq9K074qlX/K9Pyo/6mGH/kVcf9U8VRP/ACuD8uvq31r9LH6rSvr/AFa69OnW&#xA;vL0qYqhv+V6flR/1MMP/ACKuP+qeKpp5c/MzyJ5kvzp+i6xDd3oQyegBIjFV6lfUVOVPbFWT4q7F&#xA;Up82eZbDyz5dvtdvz/o9jGXKA0LuTxSNfd3IUYq+TPOfmHU7qxt/M2raveL5w1eUXWnWNtI0UFjp&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:d29602e8-cd99-47ed-b510-08dec186664e</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:d29602e8-cd99-47ed-b510-08dec186664e</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:1b1576d9-4962-4738-a12f-0587f398a33b</stRef:instanceID>
            <stRef:documentID>xmp.did:1b1576d9-4962-4738-a12f-0587f398a33b</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:49f5aed3-9f57-c747-81d8-825062695e08</stEvt:instanceID>
                  <stEvt:when>2015-09-25T15:23:34+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2f17e0a3-50be-7c47-b9ca-27c49acbf287</stEvt:instanceID>
                  <stEvt:when>2015-10-03T16:27:40+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2a30ee13-b97c-fe48-9da0-a884076cf819</stEvt:instanceID>
                  <stEvt:when>2015-10-03T16:54:01+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b893f768-fe5c-ba45-8877-09ac362c0436</stEvt:instanceID>
                  <stEvt:when>2015-10-03T17:26:55+04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6325c653-0cfe-7c48-8ed6-e72bbe216650</stEvt:instanceID>
                  <stEvt:when>2015-10-05T09:20:52+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ea579fea-020a-459e-8f58-eac12c8c86f6</stEvt:instanceID>
                  <stEvt:when>2015-12-30T14:03:36+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4755b3cb-9788-45cc-92f2-8222b48c26a5</stEvt:instanceID>
                  <stEvt:when>2016-01-04T11:18:09+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2b5f9430-06c9-4868-b087-b4cf6d62402f</stEvt:instanceID>
                  <stEvt:when>2016-01-04T14:02:16+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:660f8111-bf24-46b3-9559-08a9e30c9369</stEvt:instanceID>
                  <stEvt:when>2016-01-05T12:03+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d3b129a5-aabb-4265-bf96-e6cb5267b39e</stEvt:instanceID>
                  <stEvt:when>2016-01-06T10:09:56+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:b5a0fc49-f725-467b-94b2-c799fc948156</stEvt:instanceID>
                  <stEvt:when>2016-01-09T14:33:39+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6aa8f5c5-25fb-490c-bc19-d187e47c1317</stEvt:instanceID>
                  <stEvt:when>2016-01-12T09:49:19+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8e316d4e-4474-4d7f-8ad8-89011b6e64bc</stEvt:instanceID>
                  <stEvt:when>2016-01-12T15:29:41+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c656a7f2-de9c-40be-8da4-649f8a7efe4a</stEvt:instanceID>
                  <stEvt:when>2016-01-13T11:52:35+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9462b9ba-dd91-4bc3-9e1f-44f751f49b01</stEvt:instanceID>
                  <stEvt:when>2016-01-13T16:50:10+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5752019d-8d30-4716-b709-34a191887c9c</stEvt:instanceID>
                  <stEvt:when>2016-01-14T09:45:15+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:90dc0344-56ba-4ef6-a97d-33034815ebee</stEvt:instanceID>
                  <stEvt:when>2016-01-14T12:25:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:28d65ae0-d5b0-47dc-a08a-24a64784cf16</stEvt:instanceID>
                  <stEvt:when>2016-01-19T13:07:34+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d29602e8-cd99-47ed-b510-08dec186664e</stEvt:instanceID>
                  <stEvt:when>2016-01-26T16:44:57+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>300.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=30 M=50 Y=75 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>169</xmpG:red>
                           <xmpG:green>124</xmpG:green>
                           <xmpG:blue>80</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=40 M=70 Y=100 K=50</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>96</xmpG:red>
                           <xmpG:green>57</xmpG:green>
                           <xmpG:blue>19</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -256.945 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 256.945 li
403.744 256.945 li
403.744 0 li
cp
clp
192.628 72.5658 mo
192.341 75.0595 192.034 77.5785 191.711 80.0854 cv
191.349 82.8774 190.853 86.5536 190.231 90.2397 cv
189.955 91.8032 189.644 93.5668 189.181 95.2822 cv
188.797 96.7172 188.424 98.2988 188.006 100.258 cv
187.322 103.468 186.693 106.762 186.084 110.327 cv
185.829 111.821 185.535 113.591 185.282 115.387 cv
185.254 115.591 li
185.037 117.186 184.813 118.837 184.739 120.468 cv
184.581 123.792 184.905 127.223 185.703 130.667 cv
186.471 133.936 187.646 137.18 189.192 140.304 cv
189.787 141.463 li
189.971 141.8 190.175 142.174 190.531 142.524 cv
190.645 142.636 190.834 142.794 191.08 142.903 cv
191.415 143.013 li
191.547 143.045 191.649 143.048 191.769 143.055 cv
192.21 143.063 192.603 142.93 193.045 142.722 cv
193.476 142.506 193.83 142.265 194.146 142.038 cv
195.172 141.285 li
195.843 140.763 196.54 140.22 197.148 139.662 cv
198.482 138.477 199.679 137.228 200.717 135.937 cv
201.766 134.628 202.734 133.193 203.595 131.674 cv
205.111 129.015 206.359 126.001 207.524 122.187 cv
208.385 119.332 209.168 116.265 210.065 112.247 cv
210.768 109.058 211.426 105.669 212.021 102.178 cv
212.612 98.6772 213.117 95.2631 213.521 92.0317 cv
213.947 88.5873 214.287 85.2494 214.561 81.8276 cv
214.838 78.3242 215.02 74.8788 215.102 71.5883 cv
215.172 68.4057 215.205 64.9828 214.978 61.5092 cv
214.782 61.0878 li
214.749 61.0292 214.718 60.9648 214.69 60.8979 cv
214.676 60.8647 214.663 60.832 214.651 60.7997 cv
212.306 55.6928 li
214.969 58.4638 li
215.224 57.9877 215.583 57.4994 216.042 56.9985 cv
216.828 56.1762 217.781 55.412 218.702 54.6728 cv
219.044 54.3989 219.387 54.124 219.721 53.8466 cv
222.133 51.8867 224.67 49.7812 226.938 47.415 cv
228.78 45.4941 231.058 42.8642 232.319 39.5444 cv
232.356 39.4345 232.408 39.2909 232.461 39.1479 cv
232.539 38.935 232.619 38.7221 232.682 38.4858 cv
233.05 37.1132 li
233.207 36.3657 233.356 35.6596 233.44 34.9467 cv
233.661 33.3149 233.741 31.7114 233.681 30.162 cv
233.606 27.0844 233.026 23.9306 231.96 20.7729 cv
230.853 17.6313 229.317 14.8437 227.399 12.4999 cv
225.413 10.0131 222.961 7.85589 220.303 6.25237 cv
217.662 4.65081 214.711 3.48382 211.528 2.78216 cv
208.52 2.11273 205.346 1.87152 202.094 2.06341 cv
198.981 2.24212 195.839 2.79681 192.755 3.71234 cv
192.009 3.93694 191.263 4.16741 190.517 4.39739 cv
188.207 5.1098 185.818 5.84661 183.406 6.41448 cv
180.536 7.11321 177.379 7.65228 173.764 8.06048 cv
170.805 8.40521 167.632 8.67864 164.068 8.89495 cv
160.845 9.09564 157.619 9.27093 154.392 9.43792 cv
148.59 9.73675 142.44 10.0253 135.037 10.3466 cv
135.033 10.3466 li
134.409 10.3715 133.809 10.7016 133.468 11.2084 cv
133.173 11.6166 133.104 12.1533 133.024 12.7743 cv
132.992 13.019 132.961 13.2626 132.917 13.5004 cv
132.635 15.4555 132.399 17.2558 132.202 18.9662 cv
131.96 21.0605 131.795 22.8095 131.687 24.4711 cv
131.565 26.1537 131.536 27.9448 131.598 29.9526 cv
131.693 33.4335 131.911 36.9721 132.122 40.394 cv
132.446 45.2304 li
132.464 45.4916 132.476 45.6762 132.502 45.8549 cv
132.534 46.02 132.576 46.1659 132.629 46.2875 cv
132.884 46.8984 133.44 47.374 134.053 47.5175 cv
134.586 47.6098 135.162 47.6762 135.737 47.7436 cv
136.069 47.7822 136.401 47.8212 136.736 47.8661 cv
181.007 53.4096 li
180.929 54.0312 li
181.058 53.4189 li
181.86 53.5888 182.725 53.811 183.628 54.08 cv
184.491 54.3359 185.337 54.6259 186.144 54.9413 cv
187.007 55.2778 187.825 55.6567 188.573 56.0673 cv
189.434 56.5366 190.184 57.0673 190.798 57.6435 cv
191.211 58.0541 191.494 58.3998 191.711 58.7533 cv
191.971 59.1825 192.151 59.6489 192.235 60.1074 cv
192.311 60.6044 192.375 61.0683 192.399 61.496 cv
192.434 62.0146 192.444 62.4452 192.43 62.8398 cv
192.425 63.2328 192.396 63.6752 192.341 64.1669 cv
192.293 64.6132 192.226 65.06 192.134 65.5014 cv
192.084 65.7704 192.021 66.0429 191.951 66.3154 cv
194.503 74.9487 li
192.628 72.5658 li
cp
191.801 145.054 mo
191.765 145.054 191.729 145.054 191.692 145.053 cv
191.478 145.042 191.245 145.03 190.915 144.949 cv
190.792 144.916 li
190.605 144.866 190.605 144.865 190.465 144.81 cv
190.314 144.75 li
189.857 144.549 189.462 144.279 189.128 143.95 cv
188.562 143.391 188.248 142.818 188.019 142.399 cv
187.406 141.204 li
185.786 137.931 184.559 134.542 183.755 131.121 cv
182.916 127.495 182.575 123.88 182.741 120.375 cv
182.819 118.657 183.049 116.961 183.273 115.321 cv
183.301 115.113 li
183.559 113.287 183.856 111.499 184.112 109.991 cv
184.726 106.398 185.36 103.078 186.05 99.8408 cv
186.475 97.8476 186.856 96.2343 187.25 94.7636 cv
187.69 93.1318 187.993 91.4145 188.26 89.8993 cv
188.875 86.2538 189.367 82.602 189.728 79.8285 cv
190.136 76.6567 190.52 73.4643 190.869 70.33 cv
189.159 68.1572 li
189.536 67.2787 li
189.661 66.9858 189.79 66.6176 189.898 66.2421 cv
190.004 65.8705 190.1 65.4936 190.173 65.1113 cv
190.254 64.7172 190.312 64.3329 190.354 63.9477 cv
190.397 63.5619 190.426 63.1762 190.43 62.7905 cv
190.445 62.3832 190.428 61.9936 190.403 61.62 cv
190.381 61.2392 190.323 60.8388 190.263 60.4365 cv
190.228 60.2485 190.134 60.0092 190.004 59.7949 cv
189.876 59.5859 189.685 59.3569 189.408 59.0815 cv
188.94 58.642 188.328 58.2114 187.613 57.8217 cv
186.939 57.4521 186.201 57.1098 185.416 56.8041 cv
184.661 56.5087 183.868 56.2372 183.059 55.997 cv
182.223 55.7485 181.427 55.5429 180.69 55.3857 cv
136.479 49.8495 li
136.146 49.8051 135.825 49.7675 135.505 49.7299 cv
134.891 49.6586 134.278 49.5864 133.652 49.476 cv
132.361 49.1757 131.286 48.2602 130.791 47.0756 cv
130.683 46.831 130.598 46.5429 130.53 46.186 cv
130.49 45.9155 130.473 45.6791 130.457 45.4501 cv
130.126 40.517 li
129.914 37.0781 129.694 33.5224 129.599 30.0107 cv
129.535 27.9369 129.565 26.079 129.691 24.3334 cv
129.802 22.6445 129.969 20.8637 130.215 18.7363 cv
130.415 17.0073 130.653 15.1889 130.943 13.1772 cv
130.987 12.9365 131.013 12.7275 131.041 12.518 cv
131.141 11.7392 131.255 10.8569 131.828 10.0644 cv
132.498 9.06683 133.702 8.39886 134.95 8.34857 cv
134.95 8.34857 li
142.348 8.02777 148.493 7.73919 154.289 7.44085 cv
157.508 7.27386 160.728 7.09954 163.946 6.89886 cv
167.474 6.6845 170.61 6.41448 173.536 6.07366 cv
177.07 5.67474 180.145 5.14984 182.94 4.46966 cv
185.294 3.91546 187.649 3.1889 189.927 2.48626 cv
190.678 2.25482 191.429 2.02288 192.183 1.79632 cv
195.418 .835871 198.712 .254328 201.978 .0668277 cv
205.411 -.134832 208.773 .12005 211.96 .829523 cv
215.356 1.57757 218.512 2.82659 221.338 4.54095 cv
224.194 6.26409 226.829 8.58148 228.955 11.2426 cv
231.012 13.7573 232.661 16.7475 233.851 20.1201 cv
234.986 23.4814 235.6 26.8344 235.68 30.0986 cv
235.744 31.749 235.658 33.4692 235.424 35.1977 cv
235.331 35.9828 235.166 36.767 235.007 37.5258 cv
234.966 37.7182 li
234.612 39.0073 li
234.535 39.2978 234.438 39.5693 234.337 39.8398 cv
234.291 39.9643 234.245 40.0888 234.202 40.2172 cv
232.799 43.9116 230.355 46.7421 228.381 48.7992 cv
226.034 51.248 223.443 53.3989 220.99 55.392 cv
220.655 55.6699 220.304 55.9521 219.954 56.2328 cv
219.043 56.9633 218.183 57.6537 217.502 58.3652 cv
217.053 58.8559 216.732 59.3266 216.591 59.7114 cv
216.512 59.9423 216.516 60.0375 216.516 60.0414 cv
216.586 60.1796 li
217.057 60.7973 li
216.911 60.9282 li
216.948 61.0077 li
216.961 61.1908 li
217.207 64.8061 217.174 68.3471 217.102 71.6352 cv
217.019 74.9648 216.834 78.4462 216.555 81.9858 cv
216.278 85.4379 215.936 88.8041 215.505 92.2783 cv
215.099 95.5395 214.59 98.9824 213.992 102.513 cv
213.393 106.037 212.729 109.457 212.018 112.681 cv
211.109 116.75 210.314 119.86 209.438 122.768 cv
208.229 126.731 206.925 129.874 205.333 132.663 cv
204.422 134.271 203.394 135.795 202.277 137.189 cv
201.168 138.568 199.893 139.899 198.488 141.146 cv
197.833 141.747 197.103 142.316 196.398 142.865 cv
195.321 143.656 li
194.931 143.937 194.496 144.232 193.917 144.521 cv
193.343 144.791 192.664 145.054 191.801 145.054 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.2 .2 .2 rgb
f
58.5271 28.1943 mo
58.3269 30.3073 li
58.3269 30.8707 57.908 31.3779 57.3367 31.4267 cv
56.6922 31.4816 56.1519 30.9841 56.1519 30.3626 cv
56.1519 29.369 li
56.1519 28.7202 55.6165 28.1943 54.956 28.1943 cv
54.6702 28.1943 li
54.3911 28.1943 54.1235 28.3031 53.9262 28.497 cv
51.0381 31.3339 li
50.749 31.6179 50.2802 31.6179 49.991 31.3339 cv
47.1028 28.497 li
46.9055 28.3031 46.6379 28.1943 46.3589 28.1943 cv
46.0745 28.1943 li
45.414 28.1943 44.8785 28.7202 44.8785 29.369 cv
44.8785 29.369 44.6358 30.7936 44.539 30.9858 cv
44.4167 31.2291 44.2075 31.3994 43.8884 31.4266 cv
43.5316 31.4571 43.2681 31.3182 43.1039 31.0826 cv
42.9715 30.8927 42.7036 29.369 42.7036 29.369 cv
42.7036 28.7202 42.1682 28.1943 41.5077 28.1943 cv
35.7574 28.1943 li
35.4637 28.1943 35.1907 28.3532 35.0601 28.6115 cv
34.4255 29.8659 33.1698 30.8253 31.6789 30.8936 cv
31.6453 30.8952 31.578 30.8952 31.5444 30.8936 cv
30.0534 30.8253 28.7978 29.8659 28.1632 28.6115 cv
28.0325 28.3532 27.7595 28.1943 27.4658 28.1943 cv
21.7155 28.1943 li
21.055 28.1943 20.5196 28.7202 20.5196 29.369 cv
20.5196 29.369 20.2517 30.8927 20.1194 31.0826 cv
19.9552 31.3182 19.6916 31.4571 19.3348 31.4266 cv
19.0156 31.3994 18.8066 31.2291 18.6842 30.9858 cv
18.5874 30.7936 18.3447 29.369 18.3447 29.369 cv
18.3447 28.7202 17.8093 28.1943 17.1488 28.1943 cv
16.8644 28.1943 li
16.5853 28.1943 16.3177 28.3031 16.1204 28.497 cv
13.2323 31.3339 li
12.9431 31.6179 12.4743 31.6179 12.1851 31.3339 cv
9.29703 28.497 li
9.09972 28.3031 8.83207 28.1943 8.55304 28.1943 cv
8.26725 28.1943 li
7.60674 28.1943 7.0713 28.7202 7.0713 29.369 cv
7.0713 30.3626 li
7.0713 30.9841 6.53106 31.4816 5.88659 31.4267 cv
5.31519 31.3779 4.89641 30.8707 4.89641 30.3073 cv
4.69621 28.1943 li
4.49602 26.736 li
4.69621 25.2078 li
4.89641 23.0394 li
4.89641 22.4178 5.43675 21.9203 6.08117 21.9754 cv
6.65252 22.0241 7.0713 22.5314 7.0713 23.0948 cv
7.0713 24.033 li
7.0713 24.6818 7.60674 25.2078 8.26725 25.2078 cv
8.55155 25.2078 li
8.83058 25.2078 9.09823 25.0989 9.29554 24.905 cv
12.1851 22.0667 li
12.4743 21.7827 12.9431 21.7827 13.2323 22.0667 cv
16.1218 24.905 li
16.3191 25.0989 16.5868 25.2078 16.8658 25.2078 cv
17.1488 25.2078 li
17.8093 25.2078 18.3447 24.6818 18.3447 24.033 cv
18.3447 24.033 18.5952 22.5795 18.6939 22.4015 cv
18.8517 22.1168 19.1331 21.9415 19.5295 21.9754 cv
19.8398 22.0019 20.046 22.1635 20.1697 22.3959 cv
20.2738 22.5916 20.5196 24.033 20.5196 24.033 cv
20.5196 24.6818 21.055 25.2078 21.7155 25.2078 cv
27.5347 25.2078 li
27.8195 25.2078 28.0858 25.0584 28.2204 24.8118 cv
28.8726 23.6172 30.0984 22.7098 31.5444 22.6436 cv
31.578 22.6421 31.6453 22.6421 31.6789 22.6436 cv
33.1249 22.7098 34.3506 23.6172 35.0028 24.8118 cv
35.1374 25.0584 35.4037 25.2078 35.6886 25.2078 cv
41.5077 25.2078 li
42.1682 25.2078 42.7036 24.6818 42.7036 24.033 cv
42.7036 24.033 42.9494 22.5916 43.0535 22.3959 cv
43.1773 22.1635 43.3834 22.0019 43.6937 21.9754 cv
44.0902 21.9415 44.3716 22.1168 44.5293 22.4015 cv
44.628 22.5795 44.8785 24.033 44.8785 24.033 cv
44.8785 24.6818 45.414 25.2078 46.0745 25.2078 cv
46.3575 25.2078 li
46.6364 25.2078 46.9041 25.0989 47.1015 24.905 cv
49.991 22.0667 li
50.2802 21.7827 50.749 21.7827 51.0381 22.0667 cv
53.9277 24.905 li
54.125 25.0989 54.3926 25.2078 54.6717 25.2078 cv
54.956 25.2078 li
55.6165 25.2078 56.1519 24.6818 56.1519 24.033 cv
56.1519 23.0948 li
56.1519 22.5314 56.5707 22.0241 57.142 21.9754 cv
57.7865 21.9203 58.3269 22.4178 58.3269 23.0394 cv
58.5271 25.2078 li
58.7272 26.736 li
58.5271 28.1943 li
cp
8.60315 11.7408 mo
9.97966 11.7071 11.9461 11.6253 14.3058 11.5874 cv
16.6655 11.553 19.4186 11.4758 22.3682 11.4598 cv
25.3179 11.4421 28.4642 11.4232 31.6105 11.4043 cv
34.7568 11.423 37.9031 11.4417 40.8527 11.4592 cv
43.8024 11.4731 46.5554 11.5523 48.9151 11.5865 cv
51.2748 11.6237 53.2413 11.7067 54.6178 11.7404 cv
55.9943 11.7921 56.7809 11.8217 56.7809 11.8217 cv
56.7809 11.8217 55.9943 11.8513 54.6178 11.903 cv
53.2413 11.9368 51.2748 12.0197 48.9151 12.0569 cv
46.5554 12.0911 43.8024 12.1703 40.8527 12.1842 cv
37.9031 12.2017 34.7568 12.2204 31.6105 12.2391 cv
28.4642 12.2202 25.3179 12.2013 22.3682 12.1836 cv
19.4186 12.1676 16.6655 12.0904 14.3058 12.056 cv
11.9461 12.0181 9.97966 11.9363 8.60315 11.9026 cv
7.22665 11.8511 6.44007 11.8217 6.44007 11.8217 cv
6.44007 11.8217 7.22665 11.7923 8.60315 11.7408 cv
cp
61.3885 17.349 mo
59.4613 17.349 li
58.7683 17.349 58.2065 16.7628 58.2065 16.0396 cv
58.2065 16.0396 li
58.2065 15.5511 58.4099 15.0867 58.7638 14.767 cv
59.2597 14.3191 li
59.2597 12.0921 li
59.2597 11.0587 58.4569 10.221 57.4667 10.221 cv
32.0529 10.221 li
31.1703 10.221 li
5.75653 10.221 li
4.76635 10.221 3.9636 11.0587 3.9636 12.0921 cv
3.9636 14.3191 li
4.45943 14.767 li
4.81335 15.0867 5.01672 15.5511 5.01672 16.0396 cv
5.01672 16.0396 li
5.01672 16.7628 4.45497 17.349 3.76201 17.349 cv
1.83475 17.349 li
.821429 17.349 0 18.2062 0 19.2637 cv
0 26.2277 li
0 27.1728 li
0 34.1369 li
0 35.1943 .821429 36.0516 1.83475 36.0516 cv
3.76201 36.0516 li
4.45497 36.0516 5.01672 36.6378 5.01672 37.361 cv
5.01672 37.361 li
5.01672 37.8495 4.81335 38.3139 4.45943 38.6336 cv
3.9636 39.0814 li
3.9636 41.3085 li
3.9636 42.3419 4.76635 43.1796 5.75653 43.1796 cv
31.1703 43.1796 li
32.0529 43.1796 li
57.4667 43.1796 li
58.4569 43.1796 59.2597 42.3419 59.2597 41.3085 cv
59.2597 39.0814 li
58.7638 38.6336 li
58.4099 38.3139 58.2065 37.8495 58.2065 37.361 cv
58.2065 37.361 li
58.2065 36.6378 58.7683 36.0516 59.4613 36.0516 cv
61.3885 36.0516 li
62.4018 36.0516 63.2233 35.1943 63.2233 34.1369 cv
63.2233 27.1728 li
63.2233 26.2277 li
63.2233 19.2637 li
63.2233 18.2062 62.4018 17.349 61.3885 17.349 cv
cp
f
109.302 6.73827 mo
108.157 8.57039 106.304 9.81187 105.258 11.685 cv
104.05 13.8475 103.082 16.1751 102.271 18.5125 cv
100.729 22.9592 99.5924 27.9351 99.6595 32.6742 cv
99.6605 32.7212 99.6606 32.7683 99.6616 32.8153 cv
99.6608 32.7719 99.6601 32.7284 99.6594 32.6849 cv
99.6594 32.6814 99.6596 32.6778 99.6595 32.6742 cv
99.5764 28.1825 99.6479 23.6643 100.447 19.2439 cv
101.026 16.0376 101.998 12.8778 103.517 9.98737 cv
104.319 8.46224 106.351 4.2276 108.461 4.17063 cv
110.125 4.1277 109.927 5.73746 109.302 6.73827 cv
cp
101.257 41.4405 mo
101.111 40.5653 li
101.987 43.1237 103.054 45.6166 104.3 48.0165 cv
104.789 48.9575 105.319 49.9384 105.302 50.9985 cv
103.411 48.0802 102.035 44.8294 101.257 41.4405 cv
cp
129.823 8.67422 mo
111.115 .933087 li
108.599 -.10807 105.71 .563324 103.892 2.59041 cv
100.305 6.59028 95.0586 14.5912 93.8139 28.0338 cv
93.0381 39.6704 98.3069 49.2345 101.892 54.3041 cv
103.707 56.8702 107.109 57.7649 109.927 56.3728 cv
109.976 56.3485 110.026 56.3238 110.076 56.2988 cv
113.174 54.7501 129.823 49.7166 129.823 49.7166 cv
129.823 49.7166 127.5 36.9392 127.5 30.357 cv
127.5 23.7747 129.823 8.67422 129.823 8.67422 cv
cp
f
218.501 64.4019 mo
218.501 64.4019 218.501 68.2839 218.501 70.419 cv
218.501 72.5541 218.113 73.5246 218.113 73.5246 cv
221.025 73.5246 li
221.025 73.5246 221.607 69.6426 221.607 67.5075 cv
221.607 65.3724 221.219 64.2078 221.219 64.2078 cv
218.501 64.4019 li
cp
f
188.251 77.2871 mo
186.991 77.2031 185.734 76.8402 185.386 78.358 cv
185.283 78.8072 185.741 81.4024 185.534 81.5571 cv
184.864 82.0596 183.868 82.5404 183.446 83.3147 cv
182.886 84.3404 183.898 85.0952 184.563 85.8276 cv
184.563 85.8276 183.593 97.4736 183.011 102.132 cv
182.428 106.79 182.234 111.061 182.234 111.061 cv
182.234 111.061 188.834 84.4689 188.251 77.2871 cv
cp
f
218.17 14.434 mo
218.283 16.5608 218.364 19.0426 218.388 21.7011 cv
218.405 23.0291 218.393 24.4064 218.371 25.7964 cv
218.355 27.2037 218.3 28.6034 218.23 30.0228 cv
218.175 31.4397 218.097 32.8571 218.012 34.2521 cv
217.923 35.6476 217.836 37.0211 217.752 38.3502 cv
217.593 40.616 217.444 42.7509 217.31 44.6498 cv
217.573 44.4831 217.842 44.3113 218.116 44.1357 cv
218.344 42.3948 218.569 40.4697 218.771 38.4351 cv
218.895 37.104 219.036 35.7289 219.131 34.3274 cv
219.229 32.9261 219.324 31.5017 219.39 30.0744 cv
219.447 28.65 219.489 27.2037 219.491 25.8087 cv
219.508 24.3967 219.455 23.0156 219.408 21.6757 cv
219.364 20.3365 219.271 19.044 219.176 17.8198 cv
219.083 16.5953 218.96 15.4405 218.832 14.3767 cv
218.581 12.2481 218.258 10.49 218.03 9.26291 cv
217.789 8.03693 217.602 7.34792 217.602 7.34792 cv
217.602 7.34792 217.689 8.05604 217.808 9.29528 cv
217.936 10.5334 218.051 12.3082 218.17 14.434 cv
cp
f
217.241 45.6353 mo
217.096 47.7593 216.975 49.5298 216.89 50.7698 cv
216.81 52.0146 216.765 52.7259 216.765 52.7259 cv
216.765 52.7259 216.906 52.0265 217.114 50.7965 cv
217.311 49.5653 217.619 47.8086 217.906 45.6898 cv
217.925 45.5506 217.945 45.4057 217.964 45.2634 cv
217.718 45.3935 217.479 45.5148 217.241 45.6353 cv
cp
f
222.225 30.0231 mo
222.182 31.2094 222.138 32.3957 222.096 33.5634 cv
222.047 34.732 221.999 35.8821 221.952 36.9951 cv
221.883 38.672 221.817 40.2642 221.757 41.7095 cv
222.038 41.5155 222.314 41.3119 222.593 41.1127 cv
222.727 39.8466 222.857 38.4898 222.973 37.0586 cv
223.056 35.944 223.157 34.7925 223.216 33.6196 cv
223.279 32.4469 223.342 31.2552 223.385 30.0616 cv
223.418 28.8701 223.442 27.6626 223.441 26.4955 cv
223.45 25.3157 223.405 24.161 223.37 23.0409 cv
223.287 20.8022 223.135 18.7158 222.944 16.934 cv
222.763 15.1512 222.521 13.6755 222.36 12.6441 cv
222.187 11.6135 222.049 11.0317 222.049 11.0317 cv
222.049 11.0317 222.081 11.6269 222.137 12.6683 cv
222.199 13.708 222.231 15.1961 222.281 16.9768 cv
222.323 18.7584 222.35 20.8355 222.35 23.0597 cv
222.355 24.171 222.335 25.3228 222.32 26.4863 cv
222.308 27.6626 222.271 28.8354 222.225 30.0231 cv
cp
f
222.192 42.7769 mo
222.029 42.8856 221.864 42.9851 221.7 43.0895 cv
221.643 44.8739 221.596 46.361 221.562 47.4021 cv
221.532 48.4447 221.526 49.0421 221.526 49.0421 cv
221.526 49.0421 221.634 48.4545 221.787 47.4221 cv
221.929 46.3888 222.162 44.9146 222.365 43.1381 cv
222.385 42.9706 222.405 42.788 222.425 42.6153 cv
222.348 42.6674 222.27 42.7254 222.192 42.7769 cv
cp
f
226.392 39.6688 mo
226.195 39.8356 225.992 39.9953 225.791 40.1573 cv
225.789 40.3674 225.786 40.5838 225.784 40.7852 cv
225.748 43.725 225.8 45.6931 225.8 45.6931 cv
225.8 45.6931 226.138 43.7528 226.45 40.8246 cv
226.496 40.4053 226.542 39.9608 226.587 39.5038 cv
226.522 39.5585 226.459 39.6158 226.392 39.6688 cv
cp
f
226.73 37.9352 mo
226.789 37.251 226.845 36.547 226.896 35.8152 cv
226.954 34.8971 227.03 33.9488 227.066 32.9831 cv
227.104 32.017 227.142 31.0355 227.18 30.0541 cv
227.197 29.0733 227.21 28.0805 227.207 27.1196 cv
227.212 26.149 227.171 25.1988 227.144 24.2771 cv
227.077 22.4349 226.958 20.7175 226.811 19.2497 cv
226.67 17.7814 226.501 16.5627 226.366 15.7125 cv
226.23 14.8623 226.127 14.3806 226.127 14.3806 cv
226.127 14.3806 226.135 16.3412 226.148 19.2821 cv
226.141 20.7483 226.132 22.4588 226.124 24.2914 cv
226.102 26.1208 226.083 28.0764 226.019 30.0249 cv
225.97 31.9796 225.921 33.9345 225.875 35.767 cv
225.849 36.79 225.828 37.769 225.812 38.6956 cv
226.122 38.4419 226.43 38.1889 226.73 37.9352 cv
cp
f
230.637 34.0944 mo
230.656 34.072 230.673 34.0515 230.692 34.0292 cv
230.733 33.4043 230.79 32.7605 230.813 32.1043 cv
230.838 31.4271 230.865 30.7392 230.891 30.0514 cv
230.894 29.362 230.897 28.6726 230.9 27.994 cv
230.902 27.313 230.865 26.6473 230.842 26.0011 cv
230.784 24.7099 230.687 23.5063 230.567 22.478 cv
230.341 20.4194 230.015 19.0691 230.015 19.0691 cv
230.015 19.0691 229.953 20.452 229.904 22.507 cv
229.856 24.5574 229.793 27.2914 229.73 30.0253 cv
229.717 30.7092 229.704 31.393 229.692 32.0662 cv
229.669 32.7395 229.677 33.4035 229.666 34.0457 cv
229.662 34.4275 229.659 34.7986 229.658 35.1633 cv
230.005 34.7979 230.338 34.438 230.637 34.0944 cv
cp
f
229.869 36.1933 mo
229.804 36.2726 229.729 36.3521 229.661 36.4318 cv
229.664 36.8244 229.669 37.2064 229.676 37.562 cv
229.705 39.6229 229.811 41.0047 229.811 41.0047 cv
229.811 41.0047 230.095 39.6476 230.342 37.5973 cv
230.429 36.9028 230.513 36.1242 230.587 35.2971 cv
230.364 35.5935 230.127 35.8936 229.869 36.1933 cv
cp
f
207.182 27.5346 mo
207.182 27.5346 208.517 26.6846 208.517 24.8632 cv
208.517 23.7958 207.934 23.1478 207.451 22.7923 cv
207.52 22.7923 li
207.52 22.7923 207.53 22.6569 207.546 22.4166 cv
208.498 22.5322 209.171 23.2975 209.367 24.8632 cv
209.61 26.806 207.182 27.5346 207.182 27.5346 cv
cp
207.625 21.02 mo
207.737 18.6128 207.839 14.1916 207.337 10.5478 cv
206.606 5.24798 205.327 1.41019 205.327 1.41019 cv
202.585 1.41019 li
202.585 1.41019 204.778 6.34451 204.596 14.0201 cv
204.506 17.7671 204.461 19.9436 204.438 21.1927 cv
203.02 21.8681 202.037 23.3101 202.037 24.9853 cv
202.037 27.3067 203.919 29.1886 206.24 29.1886 cv
208.562 29.1886 210.444 27.3067 210.444 24.9853 cv
210.444 23.1495 209.265 21.5928 207.625 21.02 cv
cp
f
193.594 137.201 mo
192.657 137.032 191.716 136.524 190.789 135.579 cv
189.258 134.017 188.516 131.868 187.82 129.794 cv
187.377 128.475 186.934 127.156 186.491 125.836 cv
187.153 127.864 188.022 129.824 189.081 131.676 cv
189.641 132.655 190.301 133.649 191.307 134.161 cv
196.942 137.027 202.708 104.51 203.424 100.599 cv
205.328 90.2041 207.653 80.0243 207.276 69.4134 cv
212.326 67.4726 213.094 62.4707 212.906 57.9209 cv
213.162 64.1215 213.417 70.3222 213.672 76.5228 cv
214.049 85.6592 212.007 94.8316 210.457 103.851 cv
209.196 111.183 207.524 118.415 204.893 125.444 cv
203.479 129.22 198.619 138.108 193.594 137.201 cv
cp
f
133.532 13.0808 mo
133.532 13.0828 132.594 21.842 132.594 28.4116 cv
132.594 34.982 133.532 41.8652 133.532 43.4296 cv
133.532 44.994 134.158 46.2455 135.097 46.8712 cv
136.035 47.497 179.212 51.2514 182.657 52.191 cv
187.596 53.5382 192.436 54.1334 193.81 59.7763 cv
194.34 61.9543 194.286 64.2287 194.152 66.4662 cv
194.647 64.5503 195.146 62.612 195.174 60.6332 cv
195.25 55.3039 192.065 50.7782 189.9 46.1414 cv
187.761 41.559 185.782 35.3756 185.782 30.2889 cv
185.782 21.8413 190.788 9.32634 190.788 9.32634 cv
190.788 9.32634 187.972 13.3937 185.782 21.8413 cv
184.946 25.0674 184.785 30.7837 182.602 33.3613 cv
179.836 36.6265 173.673 34.7476 169.858 34.5372 cv
165.094 34.2743 160.33 34.0115 155.566 33.7486 cv
149.489 33.4134 139.477 35.3946 136.032 29.349 cv
133.615 25.1078 133.03 17.7681 133.532 13.0808 cv
cp
f
218.51 226.988 mo
214.599 228.21 212.911 228.283 210.29 227.589 cv
209.531 227.448 209.164 227.265 209.164 227.265 cv
209.562 227.387 209.934 227.494 210.29 227.589 cv
211.547 227.821 213.879 227.934 217.4 226.895 cv
223.045 225.229 226.746 221.343 226.746 221.343 cv
226.746 221.343 222.952 225.599 218.51 226.988 cv
cp
188.159 154.427 mo
188.159 154.427 190.076 154.722 191.993 154.132 cv
193.91 153.542 195.532 151.773 195.532 151.773 cv
195.532 151.773 194.352 154.132 192.14 154.87 cv
189.928 155.607 188.159 154.427 188.159 154.427 cv
cp
188.601 186.573 mo
187.864 177.136 189.486 166.371 189.486 166.371 cv
188.011 180.38 190.371 199.107 190.371 199.107 cv
190.371 199.107 189.339 196.01 188.601 186.573 cv
cp
197.4 149.616 mo
199.504 151.346 200.516 154.246 199.853 157.091 cv
199.085 160.377 195.372 162.548 193.085 163.597 cv
193.363 161.688 193.545 159.734 194.002 157.907 cv
194.602 155.51 196.295 151.863 197.4 149.616 cv
cp
264.757 109.64 mo
264.435 108.818 263.825 107.867 262.826 107.047 cv
261.845 106.226 260.47 105.496 258.795 105.339 cv
257.113 105.18 255.235 105.693 253.56 106.83 cv
251.887 107.963 250.425 109.679 249.417 111.785 cv
248.421 113.892 247.918 116.377 247.737 118.956 cv
247.554 121.547 247.656 124.261 247.705 127.074 cv
247.831 132.717 248.102 138.818 248.292 145.266 cv
248.477 151.711 248.596 158.509 248.236 165.505 cv
248.059 169.002 247.779 172.549 247.299 176.109 cv
247.216 176.778 li
247.195 176.946 li
247.173 177.096 li
247.121 177.433 li
246.91 178.781 li
246.775 179.686 246.63 180.586 246.45 181.463 cv
246.137 183.233 245.719 185.006 245.307 186.785 cv
244.416 190.324 243.304 193.832 241.953 197.252 cv
240.605 200.673 239.007 204.007 237.102 207.145 cv
235.209 210.288 233.044 213.254 230.615 215.951 cv
228.746 217.922 li
226.765 219.765 li
226.1 220.37 225.379 220.908 224.692 221.482 cv
224.171 221.906 li
224.045 222.01 li
224.042 222.011 224.035 222.016 224.018 222.029 cv
223.947 222.079 li
223.663 222.279 li
223.096 222.68 li
222.813 222.88 li
222.547 223.04 li
222.19 223.248 221.856 223.471 221.485 223.672 cv
220.351 224.263 li
219.183 224.776 li
218.792 224.941 218.387 225.069 217.992 225.218 cv
216.391 225.76 214.74 226.11 213.092 226.253 cv
209.791 226.567 206.52 225.911 203.735 224.491 cv
202.711 223.924 li
202.234 223.604 li
202.063 223.485 201.842 223.353 201.734 223.25 cv
201.469 223.025 201.206 222.847 200.926 222.57 cv
200.513 222.189 li
200.124 221.776 li
199.09 220.674 198.218 219.389 197.472 218.012 cv
196.722 216.637 196.086 215.18 195.51 213.694 cv
195.222 212.951 194.951 212.198 194.685 211.443 cv
194.561 211.083 194.438 210.724 194.315 210.366 cv
194.195 209.978 194.077 209.591 193.958 209.205 cv
193.733 208.439 193.461 207.654 193.278 206.92 cv
193.099 206.189 192.921 205.463 192.744 204.743 cv
192.55 204.037 192.436 203.273 192.285 202.546 cv
192.152 201.809 191.98 201.089 191.881 200.357 cv
191.674 198.894 191.423 197.468 191.298 196.042 cv
191.222 195.332 191.147 194.629 191.073 193.933 cv
191.024 193.233 190.976 192.54 190.928 191.854 cv
190.562 186.363 190.655 181.29 190.931 176.811 cv
191.112 173.909 191.372 171.26 191.656 168.884 cv
192.053 168.078 192.341 167.221 192.565 166.335 cv
194.564 165.587 200.896 162.839 202.114 157.619 cv
203.024 153.722 201.511 149.736 198.46 147.502 cv
203.188 136.229 li
203.188 136.229 200.616 139.903 198.228 142.843 cv
195.839 145.782 191.798 147.803 189.41 146.149 cv
187.021 144.496 183.347 132.739 183.347 132.739 cv
183.347 132.739 184.45 142.659 184.633 148.537 cv
184.817 154.413 186.469 154.233 186.47 154.232 cv
187.004 154.173 185.752 164.403 185.683 164.943 cv
185.042 169.997 184.874 175.112 185.187 180.197 cv
185.249 181.218 185.346 182.263 185.585 183.256 cv
185.623 186.097 185.757 189.096 186.043 192.241 cv
186.111 192.959 186.179 193.684 186.248 194.417 cv
186.344 195.148 186.441 195.887 186.539 196.633 cv
186.707 198.125 187.007 199.636 187.265 201.175 cv
187.389 201.946 187.589 202.714 187.751 203.493 cv
187.932 204.273 188.067 205.049 188.304 205.852 cv
188.522 206.65 188.742 207.454 188.963 208.263 cv
189.188 209.067 189.462 209.792 189.711 210.569 cv
189.839 210.952 189.967 211.336 190.096 211.721 cv
190.246 212.129 190.397 212.538 190.548 212.948 cv
190.845 213.729 191.15 214.518 191.48 215.311 cv
192.14 216.898 192.884 218.505 193.796 220.086 cv
194.703 221.665 195.798 223.22 197.166 224.611 cv
197.683 225.13 li
198.237 225.619 li
198.586 225.945 199.04 226.266 199.46 226.582 cv
199.687 226.758 199.849 226.844 200.039 226.969 cv
200.665 227.364 li
201.962 228.044 li
205.488 229.742 209.541 230.412 213.452 229.946 cv
215.41 229.729 217.339 229.268 219.192 228.59 cv
219.65 228.406 220.117 228.243 220.568 228.04 cv
221.911 227.41 li
223.212 226.693 li
223.645 226.443 224.077 226.147 224.508 225.873 cv
230.806 221.38 235.804 215.274 239.611 208.607 cv
241.525 205.273 243.101 201.765 244.411 198.193 cv
245.724 194.62 246.78 190.981 247.606 187.326 cv
249.222 179.976 249.902 172.667 250.072 165.576 cv
250.265 158.492 249.98 151.663 249.638 145.21 cv
249.291 138.755 248.873 132.666 248.612 127.045 cv
248.494 124.227 248.329 121.538 248.448 118.998 cv
248.568 116.459 248.991 114.076 249.904 112.009 cv
250.823 109.963 252.194 108.272 253.776 107.143 cv
255.348 106.012 257.179 105.471 258.775 105.587 cv
260.39 105.699 261.755 106.376 262.735 107.158 cv
263.735 107.938 264.359 108.86 264.697 109.665 cv
265.366 111.314 265.013 112.317 265.071 112.298 cv
265.071 112.298 265.091 112.064 265.13 111.611 cv
265.109 111.161 265.102 110.463 264.757 109.64 cv
cp
f
151.899 130.469 mo
152.499 133.97 153.119 137.769 153.686 141.801 cv
154.244 145.833 154.81 150.092 155.218 154.517 cv
155.639 158.943 155.991 163.514 156.208 168.192 cv
156.273 170.522 156.393 172.86 156.394 175.229 cv
156.404 176.412 156.427 177.598 156.425 178.782 cv
156.415 179.967 156.405 181.152 156.395 182.337 cv
156.389 183.523 156.347 184.707 156.309 185.89 cv
156.27 187.074 156.231 188.256 156.193 189.435 cv
156.074 191.793 155.993 194.143 155.836 196.47 cv
155.58 201.127 155.193 205.701 154.806 210.126 cv
154.387 214.548 153.91 218.816 153.355 222.85 cv
152.802 226.885 152.227 230.693 151.547 234.188 cv
151.362 235.06 151.181 235.914 151.004 236.748 cv
150.987 236.812 150.971 236.873 150.955 236.937 cv
150.765 236.832 150.56 236.747 150.338 236.683 cv
150.345 236.657 150.351 236.631 150.357 236.604 cv
150.517 235.774 150.681 234.925 150.849 234.058 cv
151.461 230.574 151.965 226.767 152.442 222.736 cv
152.922 218.704 153.302 214.438 153.716 210.028 cv
154.075 205.613 154.434 201.049 154.66 196.404 cv
154.803 194.083 154.869 191.74 154.974 189.39 cv
155.005 188.214 155.036 187.036 155.068 185.857 cv
155.1 184.678 155.131 183.498 155.135 182.318 cv
155.153 181.137 155.17 179.957 155.187 178.778 cv
155.195 177.6 155.18 176.425 155.177 175.251 cv
155.191 172.907 155.085 170.554 155.034 168.228 cv
154.846 163.599 154.523 159.026 154.13 154.619 cv
153.728 150.209 153.264 145.952 152.778 141.921 cv
152.286 137.89 151.736 134.089 151.201 130.584 cv
150.635 127.085 150.12 123.876 149.598 121.042 cv
149.091 118.206 148.591 115.744 148.162 113.72 cv
148.018 113.058 147.885 112.447 147.761 111.88 cv
147.813 111.825 147.858 111.765 147.907 111.707 cv
148.064 112.304 148.235 112.954 148.4 113.665 cv
148.89 115.678 149.464 118.128 150.056 120.952 cv
150.666 123.773 151.283 126.97 151.899 130.469 cv
cp
144.185 105.589 mo
145.586 105.489 146.804 106.544 146.904 107.945 cv
147.004 109.346 145.949 110.563 144.548 110.663 cv
143.147 110.763 141.93 109.709 141.83 108.308 cv
141.729 106.907 142.784 105.689 144.185 105.589 cv
cp
147.883 243.15 mo
145.89 245.317 143.62 246.576 141.728 247.414 cv
139.821 248.256 138.217 248.626 137.129 248.831 cv
136.586 248.949 136.161 248.987 135.877 249.029 cv
135.593 249.067 135.447 249.087 135.447 249.087 cv
135.447 249.087 135.592 249.061 135.875 249.012 cv
136.156 248.958 136.578 248.903 137.115 248.764 cv
138.193 248.521 139.764 248.071 141.626 247.191 cv
143.471 246.308 145.669 244.993 147.531 242.839 cv
147.559 242.807 147.587 242.774 147.615 242.742 cv
147.75 242.829 147.896 242.902 148.049 242.968 cv
147.994 243.028 147.938 243.09 147.883 243.15 cv
cp
140.516 97.8401 mo
138.23 98.3912 138.203 103.432 139.002 109.189 cv
139.933 115.895 140.495 122.561 140.768 129.216 cv
141.388 144.319 140.52 159.361 139.103 174.67 cv
137.307 194.078 131.141 212.935 128.405 232.295 cv
127.619 237.857 125.743 248.094 131.385 251.981 cv
137.5 256.195 151.905 251.676 154.384 242.972 cv
156.862 234.268 160.935 199.093 159.804 172.43 cv
158.672 145.766 152.527 114.035 148.808 105.387 cv
145.089 96.7379 142.803 97.289 140.516 97.8401 cv
cp
f
144.462 109.456 mo
145.196 109.403 145.749 108.765 145.696 108.031 cv
145.644 107.297 145.006 106.744 144.272 106.797 cv
143.537 106.849 142.985 107.487 143.037 108.221 cv
143.09 108.956 143.728 109.508 144.462 109.456 cv
cp
f
114.98 146.635 mo
113.433 147.345 111.249 150.296 111.249 150.296 cv
82.1108 195.104 li
100.638 169.422 li
120.329 148.848 li
120.329 148.848 116.526 145.926 114.98 146.635 cv
cp
f
126.26 153.615 mo
126.26 153.615 126.26 153.615 125.366 152.281 cv
124.472 150.947 121.776 149.543 121.776 149.543 cv
106.852 164.186 li
122.698 151.274 li
126.26 153.615 li
cp
f
126.813 158.566 mo
126.813 158.566 126.209 159.446 125.151 160.985 cv
124.107 162.533 122.587 164.725 120.809 167.386 cv
119.024 170.042 116.942 173.141 114.712 176.462 cv
112.486 179.785 110.111 183.329 107.736 186.873 cv
106.554 188.649 105.372 190.424 104.208 192.171 cv
103.047 193.922 101.876 195.619 100.782 197.306 cv
99.6855 198.987 98.6953 200.649 97.7282 202.204 cv
96.7637 203.76 95.8318 205.217 94.924 206.528 cv
94.0141 207.836 93.1413 209.011 92.3208 210.01 cv
91.9181 210.511 91.5045 210.968 91.1346 211.382 cv
90.7598 211.789 90.3536 212.1 89.9581 212.33 cv
89.1604 212.794 88.4039 212.864 87.9135 212.843 cv
87.4158 212.812 87.1631 212.71 87.1631 212.71 cv
87.1631 212.71 87.4084 212.827 87.9098 212.888 cv
88.4013 212.935 89.1866 212.923 90.0354 212.473 cv
90.4561 212.253 90.893 211.948 91.3001 211.543 cv
91.6982 211.136 92.1212 210.708 92.5552 210.214 cv
93.4311 209.243 94.3636 208.101 95.3082 206.801 cv
97.2085 204.211 99.2066 201.041 101.392 197.705 cv
102.489 196.045 103.68 194.349 104.857 192.61 cv
106.037 190.872 107.236 189.106 108.434 187.34 cv
110.795 183.784 113.135 180.215 115.321 176.863 cv
117.51 173.514 119.487 170.345 121.205 167.644 cv
122.921 164.942 124.301 162.659 125.288 161.074 cv
126.259 159.478 126.813 158.566 126.813 158.566 cv
cp
f
86.175 212.436 mo
86.1432 212.419 86.1136 212.4 86.0819 212.383 cv
86.1423 212.419 86.175 212.436 86.175 212.436 cv
cp
f
127.371 124.943 mo
127.371 124.943 124.501 129.451 122.204 134.195 cv
119.906 138.94 120.675 141.939 120.675 141.939 cv
120.675 141.939 120.675 141.939 119.787 141.169 cv
118.9 140.4 116.818 140.41 116.818 140.41 cv
120.744 133.189 127.371 124.943 127.371 124.943 cv
cp
81.0304 207.978 mo
79.2098 206.158 76.0346 203.152 77.0118 200.218 cv
77.4282 198.968 79.0175 197.393 79.7747 196.196 cv
81.8585 192.902 83.9469 189.611 86.04 186.323 cv
91.2715 178.105 96.5222 169.898 101.862 161.75 cv
104.948 157.039 107.866 151.888 111.566 147.618 cv
113.501 145.385 116.162 143.32 119.236 144.924 cv
121.584 146.15 123.6 148.13 125.202 150.201 cv
126.077 151.33 128.874 155.277 127.638 156.847 cv
128.564 155.671 128.517 153.952 127.913 152.582 cv
126.814 150.089 124.513 147.704 122.941 145.463 cv
121.15 142.91 123.131 140.623 123.131 140.623 cv
137.667 122.694 li
137.667 122.694 137.724 119.74 137.552 117.34 cv
137.38 114.939 136.466 109.642 136.466 109.642 cv
136.466 109.642 129.931 115.74 124.311 123.381 cv
118.691 131.021 107.471 150.322 101.66 159.049 cv
96.8744 166.237 92.1987 173.499 87.4996 180.744 cv
84.9721 184.64 82.4474 188.538 79.9242 192.438 cv
78.9055 194.012 76.2749 197.03 75.1851 199.475 cv
74.8493 200.228 74.6598 200.927 74.7089 201.513 cv
74.7929 202.515 75.4724 203.354 76.1217 204.122 cv
79.0108 207.541 82.1201 210.221 86.0819 212.383 cv
85.7219 212.168 84.244 211.191 81.0304 207.978 cv
cp
f
160.834 85.5006 mo
160.679 85.3288 160.522 85.1549 160.329 85.028 cv
160.161 84.918 159.971 84.8468 159.783 84.7765 cv
159.417 84.6397 158.59 84.5106 158.419 84.1286 cv
158.298 83.8587 158.303 83.5237 158.475 83.2829 cv
159.061 82.4609 160.009 83.5767 160.41 84.0121 cv
160.717 84.3465 160.95 84.741 161.13 85.1567 cv
161.283 85.5099 161.313 86.0288 161.507 86.3448 cv
161.416 86.1975 161.314 86.0589 161.204 85.925 cv
161.086 85.7797 160.96 85.6399 160.834 85.5006 cv
cp
161 82.9138 mo
159.686 81.941 158.612 81.84 158.119 82.4086 cv
157.627 82.9773 156.995 84.0893 157.273 85.4918 cv
157.551 86.8943 156.111 91.6202 154.052 95.1457 cv
151.992 98.6712 148.556 100.339 148.556 100.339 cv
148.556 100.339 149.908 101.843 150.35 103.056 cv
150.792 104.269 151.071 105.671 151.071 105.671 cv
151.071 105.671 158.095 96.9902 160.079 92.4033 cv
162.062 87.8163 162.656 86.1737 162.656 86.1737 cv
162.656 86.1737 162.314 83.8866 161 82.9138 cv
cp
f
360.915 58.6132 mo
360.915 58.6132 363.355 59.7651 365.452 61.0801 cv
367.538 62.3877 372.546 60.226 372.603 60.2015 cv
370.314 61.1925 369.603 65.2499 369.132 67.353 cv
369.13 67.3616 369.128 67.3702 369.126 67.3788 cv
368.315 71.0158 368.201 74.7662 368.093 78.4767 cv
367.993 76.3341 367.892 74.1915 367.792 72.0488 cv
367.672 69.4843 367.435 66.5791 365.566 64.6073 cv
363.876 62.8237 360.539 62.3201 359.184 60.2777 cv
358.441 59.1591 360.915 58.6132 360.915 58.6132 cv
cp
371.082 68.4942 mo
372.414 65.548 377.82 58.3503 382.604 56.9155 cv
387.388 55.4807 392.555 56.1766 396.064 59.133 cv
405.822 67.3541 398.91 84.7365 386.952 86.3855 cv
378.862 87.5005 373.402 84.421 371.754 81.841 cv
370.106 79.2608 369.75 71.4406 371.082 68.4942 cv
cp
399.305 56.9078 mo
400.11 58.5346 400.747 60.2447 401.206 62.0012 cv
401.165 61.7785 401.135 61.5541 401.093 61.3316 cv
401.596 63.724 li
401.485 63.1455 401.355 62.5711 401.206 62.0012 cv
401.673 64.5625 402.062 67.1382 402.351 69.7258 cv
402.02 67.7033 401.655 65.6743 400.959 63.7467 cv
400.263 61.8192 399.217 59.9825 397.696 58.609 cv
398.365 58.1907 398.924 57.599 399.305 56.9078 cv
cp
365.737 97.8991 mo
367.731 93.5571 369.124 87.8551 368.56 83.083 cv
369.146 88.0401 378.885 90.2463 382.653 90.0802 cv
376.598 91.6178 370.831 94.2832 365.737 97.8991 cv
cp
358.301 61.9589 mo
360.056 63.4371 364.936 65.7409 365.775 70.5983 cv
366.614 75.4555 366.937 84.9737 365.662 89.3648 cv
364.387 93.756 359.093 103.843 357.059 107.965 cv
355.025 112.086 352.295 121.375 350.024 124.557 cv
347.754 127.74 345.336 129.731 345.336 129.731 cv
345.336 129.731 347.35 135.291 353.283 140.248 cv
353.283 140.248 354.186 128.885 356.916 119.597 cv
359.659 110.263 363.04 101.142 372.477 96.9139 cv
377.759 94.5473 383.55 93.4946 388.854 91.1762 cv
400.028 86.2914 404.162 74.8029 403.711 63.2745 cv
403.598 60.3848 401.731 56.0169 400.555 55.3145 cv
399.38 54.612 388.287 52.9505 384.442 54.149 cv
380.597 55.3475 371.062 56.5192 368.262 56.3793 cv
365.462 56.2395 363.382 54.0755 361.684 54.0422 cv
359.986 54.0089 356.304 55.5502 356.091 57.7542 cv
355.878 59.958 356.547 60.4807 358.301 61.9589 cv
cp
f
349.884 61.4569 mo
346.522 68.4181 339.075 72.9406 331.05 67.9925 cv
318.565 60.2943 325.316 45.4053 337.2 42.191 cv
349.46 38.8752 354.39 52.1289 349.884 61.4569 cv
cp
320.213 66.063 mo
319.27 64.082 320.758 59.123 320.758 59.123 cv
320.758 59.123 320.482 60.6712 321.495 63.2261 cv
322.508 65.781 325.713 69.1149 325.713 69.1149 cv
324.88 69.9163 321.155 68.0441 320.213 66.063 cv
cp
343.247 154.913 mo
346.072 155.917 347.549 159.021 346.545 161.847 cv
345.542 164.672 342.437 166.149 339.612 165.145 cv
336.786 164.141 335.309 161.037 336.313 158.211 cv
337.317 155.386 340.421 153.909 343.247 154.913 cv
cp
323.12 47.0667 mo
320.155 52.3239 319.139 58.2734 319.145 62.1169 cv
319.152 65.9604 318.876 67.5088 324.463 70.3169 cv
326.75 71.4662 328.798 72.8978 331.104 73.9051 cv
332.475 74.8687 336.878 78.292 337.545 82.9215 cv
338.337 88.4159 337.423 93.3044 335.968 96.6286 cv
334.512 99.9528 332.608 105.313 333.448 108.355 cv
334.288 111.397 336.865 113.41 335.871 122.386 cv
334.877 131.361 332.271 143.331 332.268 151.835 cv
332.264 160.339 333.565 169.031 333.566 169.033 cv
333.652 169.609 345.034 170.055 346.029 169.834 cv
346.694 169.686 347.242 169.402 347.694 169.014 cv
350.489 166.611 350.452 161.753 350.531 158.402 cv
350.624 154.463 351.64 150.042 350.45 146.223 cv
348.911 141.286 343.356 136.843 341.558 132.637 cv
339.76 128.431 337.618 116.696 337.314 111.374 cv
337.009 106.053 339.35 90.9707 340.539 84.5339 cv
341.728 78.0971 344.19 73.4843 344.19 73.4843 cv
344.19 73.4843 341.344 76.863 337.673 76.3821 cv
334.838 76.0107 332.226 74.574 331.182 73.9379 cv
334.493 75.3671 338.343 75.9101 344.19 73.4843 cv
344.19 73.4843 346.338 71.1024 348.247 68.8317 cv
347.543 69.9399 346.779 71.263 346.063 72.8127 cv
345.202 74.6692 344.253 76.7682 343.419 79.1653 cv
342.568 81.5513 341.823 84.191 341.164 86.9955 cv
340.502 89.8082 339.839 92.7437 339.326 95.8765 cv
338.827 98.9982 338.414 102.246 338.259 105.568 cv
338.098 108.888 338.076 112.271 338.324 115.665 cv
338.465 117.362 338.659 119.048 338.976 120.77 cv
339.295 122.442 339.701 124.062 340.148 125.683 cv
341.051 128.913 342.289 132.037 343.987 134.849 cv
344.831 136.249 345.854 137.56 346.876 138.671 cv
347.891 139.805 348.867 140.859 349.692 141.941 cv
350.528 143.016 351.158 144.134 351.536 145.266 cv
351.63 145.549 351.68 145.789 351.752 146.075 cv
351.816 146.564 li
351.848 146.808 li
351.851 146.83 li
351.853 146.876 li
351.858 146.992 li
351.896 147.605 351.898 148.234 351.902 148.848 cv
351.876 151.316 351.793 153.605 351.714 155.628 cv
351.628 157.655 351.552 159.422 351.49 160.877 cv
351.369 163.791 351.299 165.456 351.299 165.456 cv
351.299 165.456 351.37 165.045 351.502 164.275 cv
351.628 163.504 351.835 162.374 352.047 160.931 cv
352.264 159.489 352.533 157.737 352.787 155.719 cv
353.046 153.701 353.335 151.427 353.517 148.907 cv
353.557 148.273 353.6 147.629 353.605 146.943 cv
353.608 146.815 li
353.609 146.751 li
353.607 146.719 353.613 146.779 353.606 146.67 cv
353.604 146.64 li
353.589 146.395 li
353.558 145.902 li
353.505 145.54 353.444 145.118 353.35 144.757 cv
352.978 143.3 352.251 141.94 351.398 140.712 cv
350.548 139.475 349.577 138.322 348.645 137.17 cv
347.702 136.012 346.849 134.879 346.122 133.58 cv
344.649 131.007 343.623 128.033 342.777 124.956 cv
342.368 123.415 341.986 121.825 341.701 120.236 cv
341.434 118.695 341.259 117.069 341.141 115.449 cv
340.878 112.204 340.86 108.919 340.986 105.694 cv
341.135 102.47 341.374 99.2945 341.789 96.2437 cv
342.217 93.2075 342.716 90.2201 343.229 87.4352 cv
343.76 84.6453 344.309 82.027 344.968 79.6536 cv
345.629 77.2857 346.381 75.1301 347.059 73.2354 cv
347.754 71.3436 348.477 69.7601 349.147 68.471 cv
349.771 67.2675 350.316 66.3435 350.725 65.6887 cv
350.785 65.6003 350.842 65.5155 350.89 65.4384 cv
350.919 65.3922 350.951 65.3381 350.982 65.2844 cv
351.292 64.8079 351.48 64.5504 351.48 64.5504 cv
351.48 64.5504 351.397 64.6379 351.25 64.803 cv
352.764 61.9446 356.049 53.9446 356.382 52.2987 cv
356.744 50.5067 356.965 47.5672 354.647 44.8232 cv
352.33 42.0792 348.897 37.8413 348.191 32.1033 cv
347.486 26.3653 347.897 22.1211 345.541 17.1684 cv
343.185 12.2157 341.072 7.34962 339.995 8.06446 cv
338.918 8.77925 338.658 9.51009 340.11 14.6904 cv
341.562 19.8707 345.781 25.7594 345.057 29.3433 cv
344.332 32.9271 341.745 35.5749 338.773 36.9885 cv
335.802 38.4021 326.086 41.8095 323.12 47.0667 cv
cp
f
348.837 170.069 mo
348.837 170.069 345.503 173.274 345.164 178.093 cv
344.824 182.911 346.147 215.483 344.932 227.398 cv
343.717 239.313 341.62 254.482 341.62 254.482 cv
341.62 254.482 345.894 240.909 347.131 232.02 cv
348.369 223.131 348.766 211.2 347.763 203.984 cv
346.76 196.768 343.66 183.869 348.837 170.069 cv
cp
f
343.599 199.487 mo
343.224 193.592 342.734 181.07 343.615 177.817 cv
344.497 174.563 346.596 171.742 346.596 171.742 cv
346.596 171.742 339.711 172.588 336.944 171.88 cv
334.178 171.172 334.178 171.172 334.178 171.172 cv
334.178 171.172 331.517 202.602 333.514 221.695 cv
335.511 240.787 336.786 254.959 336.786 254.959 cv
336.786 254.959 338.2 257.931 339.293 256.399 cv
339.293 256.399 342.278 241.82 343.195 228.427 cv
344.112 215.034 343.974 205.382 343.599 199.487 cv
cp
f
340.401 162.924 mo
342 163.492 343.757 162.657 344.325 161.058 cv
344.893 159.459 344.057 157.702 342.458 157.134 cv
340.859 156.566 339.102 157.401 338.534 159 cv
337.966 160.599 338.802 162.356 340.401 162.924 cv
cp
f
72.4032 113.912 mo
72.4211 118.019 80.1774 120.729 83.2725 120.944 cv
78.1796 121.637 73.2175 123.28 68.7165 125.762 cv
70.7512 122.398 72.4205 117.866 72.4032 113.912 cv
cp
66.8596 94.3967 mo
66.3566 93.4132 68.4296 93.197 68.4296 93.197 cv
68.4296 93.197 70.3174 94.3658 71.9096 95.6359 cv
73.4929 96.8989 77.7883 95.5977 77.8369 95.583 cv
75.8732 96.1801 74.9144 99.4308 74.3338 101.106 cv
74.3315 101.113 74.3291 101.12 74.3267 101.127 cv
73.3256 104.025 72.8836 107.08 72.4499 110.103 cv
72.5672 108.342 72.6845 106.581 72.8018 104.82 cv
72.9422 102.713 73.0189 100.316 71.6747 98.53 cv
70.4589 96.9147 67.7776 96.1924 66.8596 94.3967 cv
cp
86.3187 93.8272 mo
90.3631 93.0993 94.5223 94.1489 97.1158 96.8922 cv
104.328 104.521 97.0604 118.088 87.1309 118.323 cv
80.4136 118.482 76.2368 115.457 75.1298 113.194 cv
74.0228 110.932 74.4592 104.505 75.8219 102.221 cv
77.1847 99.936 82.2743 94.555 86.3187 93.8272 cv
cp
99.9718 95.3745 mo
100.479 96.7795 100.841 98.2367 101.052 99.7154 cv
101.04 99.5295 101.035 99.3432 101.022 99.1574 cv
101.211 101.16 li
101.174 100.677 101.121 100.195 101.052 99.7154 cv
101.196 101.853 101.274 103.994 101.269 106.137 cv
101.188 104.452 101.077 102.76 100.688 101.119 cv
100.298 99.4788 99.614 97.88 98.4984 96.6157 cv
99.0842 96.3359 99.5966 95.9043 99.9718 95.3745 cv
cp
51.1102 156.868 mo
53.5672 158.367 54.1985 159.03 55.1902 156.503 cv
56.9431 152.035 57.5965 147.16 59.4866 142.679 cv
62.5976 135.304 66.2106 128.162 74.318 125.583 cv
78.8564 124.14 83.6889 123.818 88.2402 122.416 cv
97.8296 119.463 102.278 110.456 102.982 100.989 cv
103.158 98.6165 102.038 94.872 101.143 94.1884 cv
100.247 93.5048 91.3335 91.1145 88.0785 91.7365 cv
84.8236 92.3585 76.9198 92.4293 74.644 92.0545 cv
72.3682 91.6797 70.8686 89.7171 69.4837 89.5318 cv
68.0986 89.3467 64.9452 90.2641 64.566 92.046 cv
64.1866 93.8278 64.6852 94.3174 65.9817 95.689 cv
67.2786 97.0607 71.0541 99.3981 71.2879 103.447 cv
71.5219 107.496 70.9003 115.307 69.4492 118.778 cv
67.9983 122.249 62.7323 130.003 60.6858 133.183 cv
59.4287 134.833 58.8294 136.884 57.9245 138.688 cv
56.8649 140.8 55.2769 142.663 53.8594 144.575 cv
51.5663 147.669 48.8656 151.015 45.051 151.543 cv
46.7396 153.653 48.803 155.461 51.1102 156.868 cv
cp
f
28.3876 97.6928 mo
27.6981 104.016 23.1705 109.573 15.5857 107.948 cv
3.78552 105.418 4.91838 92.0154 13.2467 86.25 cv
21.8386 80.3022 29.3113 89.2199 28.3876 97.6928 cv
cp
6.65203 109.437 mo
5.37561 108.161 5.1629 103.906 5.1629 103.906 cv
5.1629 103.906 5.37561 105.182 6.86474 106.884 cv
8.35373 108.586 11.7573 110.288 11.7573 110.288 cv
11.3319 111.139 7.9283 110.713 6.65203 109.437 cv
cp
48.9836 171.977 mo
51.4508 171.977 53.4507 173.977 53.4507 176.444 cv
53.4507 178.911 51.4508 180.911 48.9836 180.911 cv
46.5164 180.911 44.5165 178.911 44.5165 176.444 cv
44.5165 173.977 46.5164 171.977 48.9836 171.977 cv
cp
3.6739 93.9082 mo
2.82305 98.8008 3.6739 103.693 4.73747 106.672 cv
5.80118 109.65 6.01389 110.926 11.1191 111.564 cv
13.2086 111.825 15.1912 112.371 17.2564 112.517 cv
18.5845 112.886 22.941 114.328 24.7333 117.733 cv
26.8605 121.775 27.4987 125.816 27.286 128.795 cv
27.0732 131.773 27.0732 136.453 28.5623 138.58 cv
30.0514 140.707 32.604 141.558 34.3058 148.79 cv
36.0075 156.023 37.284 166.021 39.6238 172.615 cv
41.9635 179.209 45.3665 185.59 45.3673 185.591 cv
45.5925 186.013 54.5405 183.225 55.2504 182.779 cv
55.7255 182.481 56.0718 182.11 56.3152 181.685 cv
57.8207 179.052 56.4537 175.296 55.5922 172.676 cv
54.5795 169.596 54.1492 165.889 52.1744 163.255 cv
49.6217 159.852 44.0911 157.937 41.5384 155.172 cv
38.9857 152.407 34.0931 143.898 32.3913 139.856 cv
30.6896 135.814 28.3496 123.476 27.4987 118.158 cv
26.6477 112.84 27.286 108.586 27.286 108.586 cv
27.286 108.586 26.0096 111.99 23.0316 112.628 cv
20.7314 113.121 18.3109 112.726 17.3256 112.521 cv
20.2862 112.717 23.4206 112.077 27.286 108.586 cv
27.286 108.586 28.2948 106.148 29.1498 103.862 cv
28.9089 104.915 28.6812 106.151 28.5531 107.549 cv
28.3969 109.226 28.2393 111.115 28.2532 113.203 cv
28.2502 115.287 28.3996 117.539 28.6614 119.895 cv
28.9224 122.258 29.2176 124.716 29.6828 127.286 cv
30.1558 129.844 30.7296 132.476 31.5244 135.094 cv
32.3142 137.712 33.2292 140.342 34.356 142.904 cv
34.9335 144.181 35.5476 145.435 36.2681 146.683 cv
36.9757 147.891 37.7365 149.036 38.5299 150.169 cv
40.1197 152.424 41.9396 154.505 44.0309 156.218 cv
45.0713 157.071 46.2249 157.805 47.3238 158.385 cv
48.4226 158.985 49.4694 159.533 50.4074 160.145 cv
51.3521 160.748 52.1482 161.441 52.7532 162.214 cv
52.9037 162.409 53.0087 162.58 53.1431 162.782 cv
53.3277 163.144 li
53.4195 163.324 li
53.4277 163.34 li
53.442 163.376 li
53.4784 163.464 li
53.6765 163.929 53.8516 164.416 54.0231 164.891 cv
54.6831 166.812 55.2491 168.609 55.7455 170.199 cv
56.2367 171.794 56.6647 173.185 57.0173 174.33 cv
57.7258 176.623 58.1307 177.933 58.1307 177.933 cv
58.1307 177.933 58.0722 177.595 57.9626 176.961 cv
57.8481 176.329 57.6969 175.397 57.464 174.219 cv
57.2354 173.041 56.9612 171.609 56.6024 169.975 cv
56.2472 168.338 55.8448 166.496 55.2917 164.492 cv
55.1479 163.989 55.0039 163.478 54.8189 162.945 cv
54.7858 162.845 li
54.769 162.795 li
54.7589 162.77 54.78 162.816 54.7443 162.733 cv
54.7345 162.71 li
54.6554 162.524 li
54.496 162.15 li
54.3548 161.885 54.1912 161.575 54.0188 161.32 cv
53.3297 160.294 52.391 159.439 51.3917 158.722 cv
50.3916 157.997 49.3217 157.371 48.2818 156.734 cv
47.2318 156.096 46.2584 155.453 45.3364 154.646 cv
43.486 153.057 41.8713 151.033 40.3679 148.881 cv
39.6261 147.799 38.8921 146.671 38.2335 145.518 cv
37.6018 144.397 37.0186 143.184 36.4811 141.961 cv
35.383 139.518 34.4646 136.976 33.6738 134.441 cv
32.9013 131.9 32.2115 129.372 31.6932 126.893 cv
31.1888 124.421 30.7529 121.967 30.3831 119.667 cv
30.0263 117.358 29.7307 115.177 29.5881 113.155 cv
29.4482 111.137 29.4374 109.259 29.4417 107.603 cv
29.4596 105.945 29.5833 104.518 29.7478 103.334 cv
29.8999 102.23 30.0679 101.364 30.2049 100.743 cv
30.2274 100.658 30.2478 100.576 30.2642 100.503 cv
30.2741 100.458 30.2839 100.407 30.2937 100.356 cv
30.4022 99.9024 30.4769 99.6517 30.4769 99.6517 cv
30.4769 99.6517 30.4365 99.7422 30.3678 99.9107 cv
30.7546 97.2772 31.0977 90.1706 30.9023 88.8029 cv
30.6896 87.3138 30.0514 84.9739 27.4987 83.4848 cv
24.946 81.9958 21.1171 79.6559 18.9898 75.4014 cv
16.8627 71.147 16.0118 67.7434 12.821 64.5526 cv
9.63015 61.3618 6.65203 58.171 6.01389 59.0219 cv
5.37561 59.8727 5.37561 60.5109 7.9283 64.1272 cv
10.481 67.7434 15.3737 71.147 15.7991 74.1251 cv
16.2245 77.1032 14.9483 79.8686 13.0337 81.7831 cv
11.1191 83.6976 4.52476 89.0156 3.6739 93.9082 cv
cp
f
48.9836 179.077 mo
50.4374 179.077 51.616 177.898 51.616 176.444 cv
51.616 174.99 50.4374 173.812 48.9836 173.812 cv
47.5298 173.812 46.3512 174.99 46.3512 176.444 cv
46.3512 177.898 47.5298 179.077 48.9836 179.077 cv
cp
f
54.3001 205.974 mo
54.3001 205.974 55.1589 207.906 58.379 215.849 cv
61.5991 223.792 69.1128 241.825 69.1128 241.825 cv
62.4579 231.305 54.3001 205.974 54.3001 205.974 cv
cp
63.8272 209.47 mo
62.3824 204.841 60.9377 200.211 59.4929 195.582 cv
58.4877 192.361 55.832 187.407 56.2035 184.091 cv
53.9696 185.26 51.2898 186.639 48.7489 186.87 cv
46.4309 187.08 46.4309 187.08 46.4309 187.08 cv
46.4309 187.08 53.0253 212.181 59.8324 226.434 cv
66.6395 240.686 71.5322 251.322 71.5322 251.322 cv
71.5322 251.322 73.4466 253.237 73.872 251.748 cv
72.4252 241.724 70.9853 232.407 67.9513 222.685 cv
66.5766 218.28 65.2019 213.875 63.8272 209.47 cv
cp
f
40.4414 179.618 mo
40.1444 178.884 39.8388 178.151 39.5307 177.42 cv
38.5698 178.86 36.9162 181.352 34.8558 184.514 cv
33.1943 187.066 31.2695 190.052 29.2503 193.277 cv
28.241 194.89 27.2088 196.562 26.1844 198.275 cv
25.1511 199.964 24.1724 201.765 23.2303 203.539 cv
22.2954 205.337 21.3843 207.15 20.5058 208.945 cv
19.6296 210.74 18.7823 212.516 17.9695 214.237 cv
16.3498 217.684 14.8756 220.919 13.6238 223.698 cv
11.1214 229.256 9.51357 232.989 9.51357 232.989 cv
9.51357 232.989 11.0206 229.215 13.3736 223.59 cv
14.5508 220.777 15.9384 217.502 17.4669 214.009 cv
18.2341 212.264 19.0347 210.464 19.8641 208.641 cv
20.6962 206.82 21.5607 204.977 22.4523 203.144 cv
23.3675 201.305 24.2816 199.508 25.2891 197.755 cv
26.272 196.007 27.2622 194.302 28.2307 192.658 cv
30.1682 189.371 32.016 186.328 33.6115 183.727 cv
36.1544 179.586 38.0534 176.572 38.7233 175.513 cv
38.2332 174.36 37.7446 173.208 37.2763 172.054 cv
38.1056 174.1 33.0198 180.082 32.0031 181.844 cv
29.5343 186.123 27.1987 190.477 24.9648 194.883 cv
20.5678 203.555 16.5709 212.424 12.7244 221.352 cv
11.7882 223.525 3.20332 246.223 6.94185 246.252 cv
8.5122 246.264 9.15219 243.212 9.68454 242.125 cv
11.2797 238.868 13.275 235.57 15.1022 232.602 cv
19.1415 226.041 23.1124 219.438 27.014 212.794 cv
30.8655 206.236 34.8285 199.743 38.5991 193.137 cv
40.5232 189.766 43.1323 187.009 41.8192 183.248 cv
41.394 182.03 40.9281 180.821 40.4414 179.618 cv
cp
f
269.435 133.582 mo
268.313 131.264 267.172 128.878 266.969 126.311 cv
266.215 116.781 267.564 107.129 268.827 97.6986 cv
270.843 82.6323 275.067 35.4867 275.067 35.4867 cv
275.067 35.4867 271.309 91.3485 270.124 104.171 cv
268.907 117.339 267.437 128.72 273.127 141.211 cv
271.897 138.668 270.665 136.125 269.435 133.582 cv
cp
264.546 251.266 mo
264.324 251.27 264.131 251.116 263.988 250.947 cv
263.51 250.379 263.227 249.033 263.966 248.512 cv
263.988 248.497 264.01 248.483 264.031 248.47 cv
265.403 247.625 265.974 251.236 264.546 251.266 cv
cp
261.373 218.88 mo
261.299 198.45 261.352 162.892 261.352 162.892 cv
261.352 162.892 263.84 235.607 263.991 242.422 cv
264.142 249.236 261.447 239.31 261.373 218.88 cv
cp
273.916 251.076 mo
273.916 251.076 273.895 250.345 273.859 249.023 cv
290.469 249.578 li
290.522 249.58 290.576 249.578 290.63 249.573 cv
298.253 248.836 li
298.881 248.775 298.823 248.097 298.188 248.075 cv
273.811 247.261 li
273.794 246.626 273.776 245.923 273.755 245.154 cv
290.598 245.717 li
290.651 245.719 290.705 245.717 290.759 245.712 cv
298.382 244.975 li
299.01 244.914 298.952 244.235 298.317 244.214 cv
273.71 243.392 li
273.693 242.724 273.675 242.022 273.656 241.286 cv
290.727 241.856 li
290.78 241.858 290.834 241.856 290.888 241.851 cv
298.512 241.114 li
299.139 241.053 299.081 240.374 298.446 240.353 cv
273.612 239.523 li
273.595 238.843 273.578 238.141 273.561 237.417 cv
290.856 237.995 li
290.909 237.997 290.963 237.995 291.017 237.99 cv
298.641 237.253 li
299.268 237.192 299.21 236.513 298.575 236.492 cv
273.518 235.655 li
273.502 234.967 273.485 234.266 273.469 233.548 cv
290.985 234.134 li
291.039 234.135 291.092 234.134 291.146 234.129 cv
298.77 233.392 li
299.397 233.331 299.339 232.652 298.704 232.631 cv
273.428 231.786 li
273.412 231.094 273.396 230.393 273.381 229.68 cv
291.114 230.273 li
291.168 230.274 291.221 230.273 291.275 230.267 cv
298.899 229.53 li
299.526 229.47 299.468 228.791 298.833 228.77 cv
273.342 227.918 li
273.327 227.224 273.312 226.521 273.297 225.812 cv
291.243 226.411 li
291.297 226.413 291.351 226.412 291.404 226.406 cv
299.028 225.669 li
299.655 225.609 299.597 224.93 298.962 224.909 cv
273.26 224.05 li
273.245 223.353 273.231 222.652 273.217 221.944 cv
291.372 222.55 li
291.426 222.552 291.48 222.55 291.533 222.545 cv
299.157 221.808 li
299.784 221.748 299.726 221.069 299.091 221.047 cv
273.182 220.182 li
273.168 219.484 273.155 218.781 273.142 218.076 cv
291.501 218.689 li
291.555 218.691 291.609 218.689 291.662 218.684 cv
299.286 217.947 li
299.913 217.886 299.855 217.208 299.22 217.186 cv
273.109 216.314 li
273.096 215.613 273.083 214.912 273.071 214.208 cv
291.63 214.828 li
291.684 214.83 291.738 214.828 291.791 214.823 cv
299.415 214.086 li
300.042 214.025 299.984 213.346 299.349 213.325 cv
273.041 212.446 li
273.029 211.744 273.018 211.042 273.007 210.34 cv
291.759 210.967 li
291.813 210.969 291.867 210.967 291.92 210.962 cv
299.544 210.225 li
300.171 210.164 300.113 209.485 299.478 209.464 cv
272.979 208.579 li
272.969 207.875 272.958 207.173 272.949 206.473 cv
291.888 207.106 li
291.942 207.108 291.996 207.106 292.049 207.101 cv
299.673 206.364 li
300.3 206.303 300.242 205.624 299.607 205.603 cv
272.925 204.711 li
272.915 204.007 272.906 203.304 272.898 202.606 cv
292.017 203.245 li
292.071 203.246 292.125 203.245 292.178 203.24 cv
299.802 202.503 li
300.429 202.442 300.371 201.763 299.736 201.742 cv
272.878 200.844 li
272.87 200.137 272.863 199.436 272.856 198.739 cv
292.146 199.384 li
292.2 199.385 292.254 199.384 292.307 199.378 cv
299.931 198.641 li
300.558 198.581 300.5 197.902 299.865 197.881 cv
272.84 196.978 li
272.835 196.269 272.829 195.566 272.825 194.872 cv
292.275 195.522 li
292.329 195.524 292.383 195.522 292.436 195.517 cv
300.06 194.78 li
300.687 194.72 300.629 194.041 299.994 194.02 cv
272.815 193.111 li
272.811 192.398 272.809 191.698 272.807 191.006 cv
292.404 191.661 li
292.458 191.663 292.512 191.661 292.565 191.656 cv
300.189 190.919 li
300.816 190.859 300.758 190.18 300.123 190.158 cv
272.804 189.246 li
272.803 188.529 272.804 187.828 272.806 187.141 cv
292.533 187.8 li
292.587 187.802 292.641 187.8 292.694 187.795 cv
300.318 187.058 li
300.945 186.997 300.887 186.319 300.252 186.297 cv
272.813 185.38 li
272.817 184.657 272.823 183.956 272.83 183.276 cv
292.662 183.939 li
292.716 183.941 292.77 183.939 292.823 183.934 cv
300.447 183.197 li
301.074 183.136 301.016 182.457 300.381 182.436 cv
272.851 181.516 li
272.862 180.782 272.875 180.08 272.891 179.413 cv
292.791 180.078 li
292.845 180.08 292.899 180.078 292.952 180.073 cv
300.576 179.336 li
301.203 179.275 301.145 178.596 300.51 178.575 cv
272.939 177.654 li
272.963 176.888 272.992 176.186 273.024 175.552 cv
292.92 176.217 li
292.974 176.219 293.028 176.217 293.081 176.212 cv
300.705 175.475 li
301.332 175.414 301.274 174.735 300.639 174.714 cv
273.131 173.795 li
273.18 173.079 273.235 172.38 273.294 171.696 cv
293.049 172.356 li
293.103 172.357 293.157 172.356 293.21 172.351 cv
300.834 171.614 li
301.461 171.553 301.403 170.874 300.768 170.853 cv
273.459 169.94 li
273.532 169.222 273.61 168.524 273.692 167.843 cv
293.178 168.495 li
293.232 168.496 293.286 168.495 293.339 168.489 cv
300.963 167.752 li
301.59 167.692 301.532 167.013 300.897 166.992 cv
273.916 166.09 li
274.016 165.367 274.119 164.67 274.226 163.996 cv
293.307 164.633 li
293.361 164.635 293.415 164.633 293.468 164.628 cv
301.092 163.891 li
301.719 163.831 301.661 163.152 301.026 163.131 cv
274.519 162.245 li
274.648 161.513 274.779 160.815 274.911 160.153 cv
293.436 160.772 li
293.49 160.774 293.544 160.772 293.597 160.767 cv
301.221 160.03 li
301.848 159.97 301.79 159.291 301.155 159.269 cv
275.278 158.405 li
275.444 157.65 275.609 156.955 275.768 156.316 cv
293.565 156.911 li
293.619 156.913 293.673 156.911 293.726 156.906 cv
301.35 156.169 li
301.977 156.108 301.919 155.43 301.284 155.408 cv
276.227 154.571 li
276.466 153.709 276.679 153.01 276.847 152.487 cv
293.694 153.05 li
293.748 153.052 293.802 153.05 293.855 153.045 cv
301.479 152.308 li
302.106 152.247 302.048 151.568 301.413 151.547 cv
277.58 150.751 li
277.846 150.266 278.217 149.517 278.491 148.677 cv
293.823 149.189 li
293.877 149.191 293.931 149.189 293.984 149.184 cv
301.608 148.447 li
302.236 148.386 302.177 147.707 301.542 147.686 cv
278.841 146.928 li
278.873 146.358 278.811 145.801 278.585 145.309 cv
278.516 145.159 278.43 144.99 278.332 144.806 cv
294.209 145.336 li
294.263 145.338 294.317 145.336 294.371 145.331 cv
301.994 144.594 li
302.622 144.534 302.563 143.855 301.929 143.834 cv
277.336 143.012 li
277.047 142.486 276.732 141.894 276.402 141.233 cv
294.053 141.823 li
294.106 141.825 294.16 141.823 294.214 141.818 cv
301.837 141.081 li
302.465 141.02 302.406 140.341 301.772 140.32 cv
275.571 139.445 li
275.329 138.89 275.088 138.303 274.853 137.674 cv
293.896 138.31 li
293.95 138.312 294.004 138.31 294.057 138.305 cv
301.68 137.568 li
302.308 137.507 302.249 136.828 301.615 136.807 cv
274.238 135.892 li
274.061 135.331 273.893 134.74 273.733 134.128 cv
293.739 134.797 li
293.793 134.798 293.847 134.797 293.9 134.792 cv
301.523 134.055 li
302.151 133.994 302.093 133.315 301.458 133.294 cv
273.316 132.353 li
273.197 131.787 273.088 131.201 272.988 130.595 cv
293.582 131.283 li
293.636 131.285 293.69 131.284 293.743 131.278 cv
301.367 130.541 li
301.994 130.481 301.936 129.802 301.301 129.781 cv
272.738 128.826 li
272.671 128.256 272.609 127.675 272.563 127.073 cv
293.425 127.77 li
293.479 127.772 293.533 127.77 293.586 127.765 cv
301.21 127.028 li
301.837 126.967 301.779 126.289 301.144 126.267 cv
272.466 125.309 li
272.463 125.222 272.455 125.142 272.452 125.055 cv
272.439 124.638 272.436 124.132 272.44 123.561 cv
293.268 124.257 li
293.322 124.259 293.376 124.257 293.429 124.252 cv
301.053 123.515 li
301.68 123.454 301.622 122.775 300.987 122.754 cv
272.473 121.801 li
272.487 121.258 272.506 120.678 272.53 120.056 cv
293.111 120.744 li
293.165 120.746 293.219 120.744 293.272 120.739 cv
300.896 120.002 li
301.523 119.941 301.465 119.262 300.83 119.241 cv
272.603 118.298 li
272.629 117.738 272.656 117.158 272.687 116.553 cv
292.954 117.23 li
293.008 117.232 293.062 117.231 293.115 117.225 cv
300.739 116.488 li
301.367 116.428 301.308 115.749 300.673 115.728 cv
272.78 114.796 li
272.811 114.229 272.843 113.649 272.878 113.052 cv
292.797 113.717 li
292.851 113.719 292.905 113.717 292.958 113.712 cv
300.582 112.975 li
301.21 112.915 301.151 112.236 300.516 112.214 cv
272.982 111.294 li
273.016 110.725 273.052 110.143 273.09 109.551 cv
292.64 110.204 li
292.694 110.206 292.748 110.204 292.801 110.199 cv
300.425 109.462 li
301.053 109.401 300.994 108.722 300.359 108.701 cv
273.202 107.794 li
273.239 107.221 273.277 106.639 273.317 106.05 cv
292.483 106.691 li
292.537 106.693 292.591 106.691 292.645 106.686 cv
300.268 105.949 li
300.896 105.888 300.837 105.209 300.202 105.188 cv
273.435 104.294 li
273.474 103.719 273.514 103.138 273.555 102.55 cv
292.326 103.178 li
292.38 103.179 292.434 103.178 292.488 103.173 cv
300.111 102.435 li
300.739 102.375 300.68 101.696 300.046 101.675 cv
273.677 100.794 li
273.718 100.217 273.759 99.6365 273.801 99.0505 cv
292.169 99.6643 li
292.223 99.6661 292.277 99.6644 292.331 99.6593 cv
299.954 98.9223 li
300.582 98.8616 300.523 98.1827 299.889 98.1615 cv
273.928 97.294 li
273.97 96.7166 274.013 96.1357 274.056 95.5511 cv
292.012 96.1511 li
292.066 96.1529 292.12 96.1512 292.174 96.146 cv
299.797 95.409 li
300.425 95.3483 300.366 94.6695 299.732 94.6483 cv
274.186 93.7947 li
274.229 93.2161 274.272 92.6354 274.316 92.0518 cv
291.855 92.6378 li
291.909 92.6396 291.963 92.6379 292.017 92.6328 cv
299.64 91.8958 li
300.268 91.8351 300.209 91.1562 299.575 91.135 cv
274.449 90.2954 li
274.493 89.7161 274.537 89.1353 274.582 88.5527 cv
291.699 89.1246 li
291.753 89.1264 291.807 89.1247 291.86 89.1196 cv
299.483 88.3826 li
300.111 88.3219 300.053 87.643 299.418 87.6218 cv
274.717 86.7964 li
274.761 86.2164 274.807 85.6353 274.852 85.0537 cv
291.542 85.6114 li
291.596 85.6132 291.65 85.6115 291.703 85.6064 cv
299.326 84.8693 li
299.954 84.8086 299.896 84.1298 299.261 84.1086 cv
274.989 83.2975 li
275.035 82.7166 275.08 82.1357 275.126 81.5549 cv
291.385 82.0981 li
291.439 82.0999 291.493 82.0983 291.546 82.0931 cv
299.17 81.3561 li
299.797 81.2954 299.739 80.6165 299.104 80.5953 cv
275.265 79.7988 li
275.311 79.217 275.358 78.6363 275.404 78.0562 cv
291.228 78.5849 li
291.282 78.5867 291.336 78.585 291.389 78.5799 cv
299.013 77.8428 li
299.64 77.7822 299.582 77.1033 298.947 77.0821 cv
275.545 76.3001 li
275.592 75.7176 275.639 75.1368 275.685 74.5576 cv
291.071 75.0717 li
291.125 75.0735 291.179 75.0718 291.232 75.0666 cv
298.856 74.3296 li
299.484 74.2689 299.425 73.5901 298.79 73.5689 cv
275.828 72.8016 li
275.875 72.2182 275.922 71.6374 275.97 71.0591 cv
290.914 71.5585 li
290.968 71.5603 291.022 71.5586 291.075 71.5534 cv
298.699 70.8164 li
299.326 70.7557 299.268 70.0768 298.633 70.0556 cv
276.113 69.3031 li
276.161 68.7188 276.209 68.1378 276.257 67.5607 cv
290.757 68.0452 li
290.811 68.047 290.865 68.0453 290.918 68.0402 cv
298.542 67.3031 li
299.169 67.2425 299.111 66.5636 298.476 66.5424 cv
276.402 65.8048 li
276.451 65.2192 276.499 64.6383 276.547 64.0624 cv
290.6 64.532 li
290.654 64.5338 290.708 64.5321 290.761 64.5269 cv
298.385 63.7899 li
299.013 63.7293 298.954 63.0504 298.319 63.0291 cv
276.693 62.3065 li
276.742 61.7193 276.791 61.1387 276.839 60.5642 cv
290.443 61.0188 li
290.497 61.0206 290.551 61.0189 290.604 61.0137 cv
298.228 60.2767 li
298.856 60.216 298.797 59.5372 298.162 59.5159 cv
276.986 58.8084 li
277.036 58.219 277.085 57.6387 277.134 57.066 cv
290.286 57.5055 li
290.34 57.5073 290.394 57.5056 290.448 57.5005 cv
298.071 56.7635 li
298.699 56.7028 298.64 56.0239 298.005 56.0027 cv
277.282 55.3102 li
277.332 54.7186 277.382 54.1377 277.43 53.568 cv
290.129 53.9923 li
290.183 53.9941 290.237 53.9924 290.291 53.9872 cv
297.914 53.2502 li
298.542 53.1896 298.483 52.5107 297.848 52.4894 cv
277.58 51.8122 li
277.631 51.2172 277.681 50.6348 277.729 50.07 cv
289.972 50.479 li
290.026 50.4808 290.08 50.4792 290.134 50.474 cv
297.757 49.737 li
298.385 49.6763 298.326 48.9974 297.692 48.9762 cv
277.88 48.3143 li
277.932 47.7125 277.983 47.129 278.031 46.572 cv
289.815 46.9658 li
289.87 46.9676 289.923 46.966 289.977 46.9608 cv
297.6 46.2238 li
298.228 46.1631 298.169 45.4842 297.535 45.463 cv
278.183 44.8164 li
278.237 44.1985 278.287 43.6146 278.335 43.0742 cv
289.659 43.4526 li
289.712 43.4544 289.766 43.4527 289.82 43.4475 cv
297.443 42.7105 li
298.071 42.6498 298.013 41.971 297.378 41.9498 cv
278.488 41.3186 li
278.548 40.6309 278.6 40.0417 278.641 39.5764 cv
289.502 39.9393 li
289.555 39.9411 289.609 39.9394 289.663 39.9343 cv
297.286 39.1973 li
297.914 39.1366 297.856 38.4577 297.221 38.4365 cv
278.814 37.8215 li
278.886 37.4192 279.058 36.7838 279.451 36.0955 cv
289.345 36.4261 li
289.399 36.4279 289.453 36.4262 289.506 36.4211 cv
297.129 35.6841 li
297.757 35.6234 297.699 34.9445 297.064 34.9233 cv
280.976 34.3857 li
281.446 34.0374 282.011 33.7213 282.7 33.472 cv
286.529 32.0868 297.865 32.4655 297.866 32.4655 cv
297.732 32.4611 296.466 31.3496 296.248 31.2274 cv
293.729 29.815 290.051 29.9175 287.287 29.9035 cv
284.475 29.8891 280.708 29.6046 277.064 29.8684 cv
271.631 30.2619 266.473 31.875 265.167 37.4256 cv
264.284 41.1791 259.57 91.7129 258.863 112.874 cv
258.156 134.035 257.232 184.317 257.532 209.294 cv
257.832 234.272 258.94 246.414 258.94 246.414 cv
258.94 246.414 259.481 252.863 263.171 255.634 cv
266.862 258.406 285.856 256.014 290.416 255.41 cv
294.976 254.806 301.866 252.388 301.866 252.388 cv
273.916 251.076 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 19.2.0%%For: ( ) ()%%Title: (1601.m10.i304.n034.P.c25.239329894 Barber shop vector elements for logo, labels and badges.eps)%%CreationDate: 26.01.16 16:45%%Canvassize: 16383%AI9_DataStream%Gb",Kq*O)`o'lAT^&s0>MI?.sQ!I6$'\q:?@?DiA@Et;4a7%]rWpU"A,%Sui;=nhjbZq)GG?8q=hG)&ZNu@n>\_aL/N5%;7S1H@c%OJK*%SeXXh8Do.)^]0sUVYAs*Kd@L3RBS/\$K;G%?5,BI.*Sp$$7uo\WSc.YB!,p6oNj1g1lZBkdh?M3V8e*ORMHuDoqn<9\h22!%87;^2r$+KhmqGdMdmH;D=FNrQ!0Yr.'<$FV!82k1+*2T75k6:AH_sm14gV2WFeaB"$CK5J7/P6p*K@q0X%a*4Iff,dPL(g`^M2*s%4[UdqBWcZSLS-$L5sUJfP$f,mr*cZkoGah>!;<#rMuO76hL<>fS;6hEA=-USJO=DK\\r`#,rk\;^1l]q5Cc/]lkT.nVl?(F>pr_2%_Q!ZcKg_%6F0*0<K39d7/SHX@(/l@n1+.cU&R+^V,)$a9@4]`ZA^PBQ>\!_&?2n]hF.d;[]h=\Ng,8KpIpa9#On%oL6_S/kVVXIS%f1hW*#sg%HRq&4p2hC]hgJh)r9C:Z-r(@V/>.:N$+Ibj,O"7R$;="liqQ5_M;b(8+klBCshC]W]KL1]#pb9lF+Q4lhKdB%I4<Vt5%,^WWg;*6V8,6!@].scHZZ+a9=fGjNq%jJp6jZkr7h0QKchIKX&'2hed$LWAP?676@N2=mN#V0?&nQ3-u;OW/be(!+f%kRGl5Bb+4%'0a^ZYfV&KDR=?dHLNKjK&6d'BGsnID"*iTJ`cn@AV#5Y4>?iJhSq_q:<4+11"Yd0U]%@Cn"e\Q@j)C8)b&SHWOI!\IHD[`=$6Qc%e%4[K7^iD*dq)f(C33RYG?-)7R;_;$WV3o%$i9>(^!KELd07'2Ha:V'pk!pep$`[,=p\;bmfT*Eh8(jgD9eh$q.fs0o[[DPJF$]c%$;IsYkY7i4ka(4&mk<;Bg0/\S=n^SIJ0u6djKM!>eBKK[4b<r`?ogh#UJ!<V_=>UcEgKUo]:N-6hlD#0L=$tL1&>S!K*<Su`1N#D%Egg,5-`4Ar]g:iRl`aGq&IP#a?X.A)ld`/hWRXZ%#TrYc0TPbXYH\'i\$KqobM+a'K\++m;5S2BFK@ctET=jPY;1hq--:0Jbg\^h%3>!Y=QNgJI;_P]n_#2MZd:h*XXeDmW+??[Eohn`7s6Q0M6jn]B<pFO@s.4VQDX'Rq2Hh+0+?fOhf$R']2J.EbU%eomb3>$TTujHp%Aa#oe`BLd:R#?ZX_+2i6_T(,Gjoe!Xr0XFL0LX:!5:8VHnc\r02;@UK"EW>"(]1'>._`X$&aabL<u@c;]ijdgD1'WS2UYu[#LDl]%o-\Ri^(>fc_nYKia?taMl6spgXkBUCJ(;_Sm2`::efmX=\:q@TP<@@eHF7?[B>V[cE%YDbn8gYd5A-2N^Sb$0pErdTO9j'm5#,[b%655gJ#Lcfo62kicU?T^3ZW#<ofr86,bL;kFS95XDcAH0hqqWIWEp]#RQ$q@ug'$%kIkVs],B)/L>>F:S8'iqeFs3;!a<,=T_MgI>%T;'oc;dK?u%r:CGo"@BiE1XS=%(5u7Crt1U\60n$mYA-#W\]p0Y28J'>rYe&c].=:LKJ^$Yu;+??C5=1L;ZiSkuh8CHM]k!F4tJ!%qJ[%`jC/Jh7Ruo^O;pr,@>Oa<I,p99\"rKA*7i)\\64kge-2$$oLS[3<>GK9!@/eV3qc$0YB[M<$.D"FRO:f#K^%M1-K.1W0NG\&%7%DL8UY_K<9OjIcm$)41)ZRc3VWhhRc^<i4dl_-/B2%oUkppC?_DfQ'h!d#h),l@g\iGs)g1N6XK#Ak1s3R82RT;?GqN('b:qo7.%XP`4VAhIW]RH9,$UJB*I]#cCkfH8C6Z.XWQ[sZ#rF^OJ/H?H>1H_7?A$s]^R<7ut"0$e,6=*A#8bF`4,?&AR)g**4hl07=562uQ%%RjC1F+iS;-(l(Vt9&tO&?a]X7"K-bEflU(OZd:m@Ybl?^p\N^'<mpRcbnV<FfQ/YE-0k$mEjl">9)L=lro"eke&;Z=m5MFjo'_Ud%f%VgeH/%?=q/X_\gh?FUm8qpY[eNHl5,;o^^T#]Qch)MXk;/8peeRkaRNdZ-Lj,=5Io6uB1[8g5j/S43B*rO&hGV.JjkdaK7.P+R%p:M)',Q@R)(k@!bCAt:_p%0B%_,$\L`;01&lfk4[=$gkh0$Ij>f5P._)kUP&?-N.lgc7r=B@u.dYk-;SFgKZI9c':k?c%ZuWVtT_%0@lNO2op&Ip5>+t.rOhm8tIhgW8LeH<csqE0,0/N<hO@gqgXWVq0A-Q)k!u&o-?,4T#;'S1KuE":ATnj-i*1cnDf8NN-0:ATBWt%%hsm?J)kR%-d]QWRpKaksNVDDT=K^[I?f*:7qVilhVNX48]8/(Os#6C!583i1h+eD44e(jSB.*8B)l+?-871!XrJ=n'bT%"31\>=c%NN[\*d`jG/AlW?=mtAp!b'r]>q`gg]?g`1"p\?tW)tB=rp&1JsKq9?II^.cs:Hs(#AUY"mFHJ0!]Yg,^_ot3$0DR-dpJ/"Rm$,\G%kFZnVgkFh5mbrl'm-0DVAS:`(c?(,_gRXD.geZf7MV#4Y>ArZs-Fr*l`Qli"(*CiQg%9-U?Y8V@MbipWM0cASe4Md9Uu>GAHm)S=%d\*Z*HXAS"=Ua2Pid(-X*Vh[[:\)UrChVkRUhuT(h_Mn=2#G#KA$7ce,M%adMJ&+3c_@7V1\7q&q(@-Up8)XhR%A!;^*6A9iB*Wh%W44o%;Q2UEXq&!!5JuBnkF`iL/%t5f(g(H-=K!ta(ZC\M)5L'#r3D6M6R^A1*+3^Ng@V_t-*:=eGL]E#@u*-t:8QAr=t[1L@"%tP%Hh/oXkB(,6#@V@QGFjI3I_tM<Hb)Yr8u7!;5N2BjK,#d%LNCqp8LcfmTlR](DhW8Kc2dIrIgS%rXE&8jO*a3,T?>_5qBq!g>.`X3%,?00V'`Jo^/h3[@O$S-pl(r<;%)N/Y1LC0M++s?q@\k%6R8rqYT#VtfhcmHmg_BEm%RQDo_*J>C4NtI]plYk*VFPnfILsAUjNR$X%Lp-129&JPLKF8j`#9i47+m'"Q^?\&jpA5naE+@X7f!g$ZK+KY[R/*-CCEA.J1\7q&q;:N]7-PX1KQ+cFbU`8Qg4f;_k;_7uRVO/;%8ZVP"0CX"'ChQ$$^OP*ikHFQn^pO,%!^:>fYCC%c2#Wdaf3^Z>cDo%=nMi/d@IreX5)ttJp4gq$\kHUOTI(U+ks&mTVK4mZ:ic^r%2c-,\TTWR\bQFfIC7fTQ^:ANXS#:1AT'#"\gcWj+e(d(1S9]-mF$+p<rp-Z0_Ol:$r7BT:RVR]u%?^[S)D[lL\VC#`2+1t;iq0Qa%PgM9Ga1iUm+!)VSpG[?Xl@8-E>Z:Oqpp%RnRh]B!l7M&PT,3!>X"*E%Z<jN>hg`D2o:SoMf?Ao;]+Z0_++M<&b?r!"\mSs$YH[55%n.LYY*.3Sn/EV.A]Z\Iq%Z'$9gYjU?bjW.DihHsNLY^r,%kGN3N!K?"_.WQC/U64L""4"2-1Z80^W!:m/`5P^=+<8hr9.X[DVfV"%o1-2oEUfY]X?GSYq3h1]m^kC?Mf"TddtV!_YU01cj4XG0Fm>U!f[HlONVAHN32Ra:5!BjV:AT;V-;N!CcNmjTPO?;>2Eo$/\sW0b%\9!hYIKJcK(7WUN$e)\0Ze!Q!(QS8`\?]I^#%,6DrJ?Hh^9UQ33bA%m>K,8[Gr#EMeU5DX^16uT4-gt8iRt:<l[6bDI4%59Z2Dr9%=FR/@pZFW(n$4_+Z(18b\r#Qgc]VeHgdQDX?-8S6"O1W!@D5Aphkck3;E?3*Vqu5.IncL5B"_A(iH_AT=5Ze[MV%VZ\6VA]4n%f&%k7QbmA>WV8<;Ja@DR:QLCqJ'f2[qt-[njKPrGDdJ1m^ilMER_8CfVRO,n=;>RCHg=?;?rUPNLsPQgSMc%``iTl$%2(0.5"\3QY:*%s(,t<1um8hG'1L3"]:c'"[8hj27@t`NM^T2FnP<kdFHt>DSj\W9n2$[.+9\pg->72hgFnK@SVK\&O0OMV!2.J:&*_Nf]5<rZmnS?%:=@)i>):Kc+H`<?I`AZk?V%97[!]b`b<1oZTgZWHd7Y#RFoTZ7nJN#mMr3UQ*=+(L<5.4tpk8Tkf6k-4ke1gfY?f@f(\?A"]QQ$5%?2S;0k-^+mmG_&Z(KRAaeh4$j"t=!)CDSc?ainN:A,$n??$qAuq"b4hAtej[[rRE\=F9ij^L[6p5K<_g3lQTUf^_UWjt$EVho.7M%k<I)g%+8e]-i#B4':@=BjL[V71qQNL]DW`L:L1^7iIS;&e*?DQRchD$<_UutQ[QlTc`/Yq_Um!/=r&gdB=$_+B&8ftYEep`f?1U1%_>0?OXpFfu_8#u71>i$GQ@)CW)h7fV?Q/GdIb$X[p71s)RccmDrj>1^ro1<UoQTm=S.Cr.(SnfY_k!V'4fb;AZZaEg<-l-4K&5&$%mVM0T;<'4dmCs6[s,2$t<^HM^XM]7/WTuYWqT='p.kpt%6MOWqm,hQ:L%b%J?JYhr2;Qe#RfVB$EtMm#l!1`Sc9<I4F%*^!nE_s*%Zi<QBi4jOTlaNeq8FoHhm%t>$ZkB$Zh+E2*dcZmG)9F#9N#L"m!WS]IFB6t$?4$B/"O&@so/u4gF-m3#R[^WGh_>M=FL@:22,B1B%M^-6Ke[-d0qu0tu9#'uYaG9f23,dBmdX-[)B/YNYKmM4m:H:q,5Q7$ZGku7u7BNJc])#',DjO_i'X,kJ^7%%[k[hB`b(;tYE3h`'%glGO'kuF@D^G!S1&)YcHcgOVS?P5TnmZd55[ge^Z$hn@_!qGkd;eG.B'K9p9dPY2\1n.m$r8IGH[4h!R1;EPE[oH(,"HL7cesB13%R^g*=jc<A7$N4kIhh:7mH=aGYV%5BQ]-93(q5fo8J)t<&oBP<0XSEg*,BC]>bb$,#_8D5','$!Fr!^un1D`bM%c`5_pO9"=]rNmM%Zp<l6eBbmB%@[*97HiuK>eWl@)HGttS.h<'9_45-6Sr8D1X1!<H-S6.RE%F&qTY9)LN99ViTYR1RD."HU[OU.:&dZ\(JC3o1Ghmr%k"4#aBppDDo;(X:-;EJY8=J?'0_7k7M#Fo!P:PAMM:8@J:7$]4Y')Z=NpAc=:#G$cn`d=Rr&<rJai2K=1[0hsidQ@NhY\2a^[15M%iYV?]_UI*q6i[%C!?YU.D*hW!?_P#5ChffdQA:'NN`N0L5<%D_"FK9,=0HtKBHM^@e^Y$oB3n*`Yqbi"P!\^865oEu0#j8[ranM8%k!&_'Gj:DQjl5188q"\Q8c;Y1o:oJjn'-#,_e]1209!JANI4<='8;AfcQG$p>Q<\PS%JpW71/_!_1sg(r?t%:hlUQ<h;o9/@aEN@%?_ZEE>9de;T=B@KjYnacZM\g8R_N&*"$%N2n7+*lq'0n(/A,1N5o'8)^0:N*7Taa34[]5Gcb=.Cp?p22q+^kE1"s4.JG3o=)%>PB%,2L<0Dd1F1Q?gF>^I9^FJE;"%OLI(<$Uu]="06?Cpr'K2YIt/;58g0=$bl%YXtb(q)t2V,i0\i/q=n<c9IKePI:jql_JGD'_N$N<%_i.>$>9!%)3([aIJTTMo^tEj>>.8D#>.U12a1m9`q^/4=mJ"rQIG(O\O)nYdRgrk-I@6!rT2f7lCK\I.T?WfLR(KZ-jiY;4'm9Kk%Y1Zp45@=i4_!M(]!l!%0J"IZP^;YG:^Z.1%hsbO+n+;4-WAg#g_)U^QhR:k\TW@=lA=mQ\b^(,lcaZaQaAaM.-Pr4]j3=m\bcJ/(%LSh`kB:Q]/ifi80*)BJ.=k*@f&\<@rlOLYl42/Jn`;u[s&`h0m*"_t`<sSYsd`_r;Oo:*.++BA>J%;30s,4j`iD"mlE`1)/-oeP:%NjWpBX2;?W2tSV<DZA-WbcEq3/m_BNV'9++ZM]QG@a@Eqs.I?EWp&8<^&'f9KNVGN;_,F]a-eR8ELuD@D8PFhbKATGo&j;ndr1Su%^5u@i#*K[d4cJR9b0p8oQ9J96f^EUA@\7d2JYX"T9@?..C\K;2/jl6ORJt`(f^ltr/B*,q*Q_4,qQs@J?9PODJt/Kk2Oja2N8bWW%EdfY0GFcqS'8->5)b9hR1s8!.gZ?8@7h?pijRL0%kF`3'HV0*G@sYQ>G!9"fl/35/505\Zn8FW*/n#n7/K7.7'C5@=2:&PYeuF&J%PO4Ze\B3&ZoO2!?2X=B.HS*Hn@5Kq$hgVO_k4&Xi\EXAP"=CJso75X6*KkO'W[5-Zl3YoGJ/K;7s#3a648cm9NFQXeSrJjp/AmRa%pkPVo-W0fR#iI68KF]6a4b4_DYT3Jb6&,'q\#u5nT1$;'*\V!j/SlE7NPF3.$WssT/Z>-CIc2=^o)t9h9jk]ll83W&L%/[iL1cnC%c]n]bZNV[,F,V<[FG;*0(H;^bLl0-/$@Iq87[ENGbKHD(iWkJY-'`ih"k@Z/>o9/i](u_?%cP;]JGt-,nJlmnmhnn=^fP.VAC0na%#!&4``kc(/<1K$nG>kCfV_rVGe-SXU,4M82S0/21Yp)g\&h:/d_F+#<<b4R[/IDThB@+;(G"L@*AdaI1qIebEHm)R;4'R8/EeP3Q%p:j=jL7?RoWF>J=afN9$WIi?O%!!L?P(]C4Wl1kV![LMVYU`"j:\]Jg]p$1i4$640NlZIJGMq0%%a.s;o-uCcPY+^4OX=(9(mRU3%AVSROb7Y3k+#o8s3@'c=O]\Yo!BZUP@heAV(umRF+5ao+Z"&M"9`*)R#&A-1nZV.F#+!W8$u\Ol+T*/^"><4cjaX^r7MEE0Ih(X"%$@JamMq3PYlF.mC9k^E4i.'Od^OqR+2eOrOhhQd:gP>5e5CdLh5C^D*hpDBb@>b));H2n1$nSl7O$C!hDeiNI$+L85<`'`2dMr#U%7;&N#Dr^_jVB/M:<1(V:DOur(Qp*l4m.J]dZ#-kGjqE9r1eJ4*g20E7$6/Rq/cYjlrM2^7s6+3'lW>?Q,PY2=ngc0cjq$(DNi8R$%`Q2Abh_U8Ck?>/U-\n0S%>.OMH!i\gMW5f1Mu;)BAfjUeGL4cEjf]Qq`h0=:]k4tMeSVS,n6oH2GgFBtXu5,"e]f%;#n_f6[XKQ)%S1$[8,YhjleLOl2&]9sFIO88B8V)grifn/99fm5f./<Vklp(o:H2TR3VO]rLj*rsC^dcO%-Ep?(9S`s0HH"*Old_t'EC.b$2Da:i%M:nZsJ+AcWhdQW$G&DJj9CA^:DG-IF9*$/:l:l[Nnq[Q2Ys2=,R5%L.I$n0IWgaRp@#^tK::T9ND4<2NW&)m2J_hmAj`EVVlPd:C%DPlYmP>@NuaX.t1I?1hP34KT@-haGo2L4[N?)--(HbK7d=6hbrrjf*Zj356$[?nVYXIH@:LB6\!]3M+@em%fsgm*a:aIc^%n>45+%>dtF9$Dp#O2/a]Z3jE=&ce?D/0<mEm56F4"e;3&#.MAL/p9Ua'[#F@pbmI1Yb$Uc86;'8FZ=^iFF$nQ$W;e(_^9Y.pj[SJSaCGc+%?K&$VUM5&s/?ZC1BY?MFelP=&RV#\u%_SRnrLnQFqVS.t=g"5tZ0q*5YG8[1hZLAM.J"1u.4ci-:ZHV83t<Y_X"jaS8r>`_!hS):%2F-8I8S&&pJo7)L`PL=0_j:Zfb@]c@Q&WuXfnFBkRYY8WM5Vo'&o2n7:H/cUngl;3]YM_Z'$:N>KtpA+<)b<hqh4Mf-RVdej@iOl%BJ+LSFs<Q8\`hsk[,!W6U4U(sFe5H!6+(7<Bb[u;RGR0eHe+7o*$J[jWU&Y%XG0sgj_".!_<AQ/%!,Rl_nbX?FQGO3HUb>[mGSRX%+qcZ`:BbO]ms%`)[.A.J91?nn%/6lKAh[1@Xa6$#*d"LV9YG5p)ojXu/97L[Z@0(.2lAMG"u?1D]StFEp9gpgaVgXukEWBkrFJc9%^jsfkS+X5Xl'YhP@Jcp1kGlcWcG_5l\3(Z-LYfDh9,Z*Je%9jcW<m"qI^`X4,g2DLgDm0SkShB1<PbpI'=u'RHI\5(4SP63(acrG%`$iCom-cWDJtB`rPT6&ogT5aP>KrV!!3:jbYZ'$jd<)DGCt_g;!@4F!0tZlkN=gB,f:*#6$#MIf8Sb'moZ6WDTtp^F=Ot+KKG2i1%\:><D*;,;JbGQsUnRfJp.2\Xif.7hD\,:u/7)B`gF\P8^kO\,#hl@e.$HF$Fm8?+14oO2s!qd=bBQ$;fY_P&e4o'Q3@Pl94&jt2q%c&pELl%s,N7^\-XTWpIA_!;KN17iBMRXKuXYE!\aWI<;M3=^`j:c6^ChQHlAG&ShWA\DA-rp#I`gkg6VQ%fM6p!`a_YG;YM!aFco%+#p/IaO>o-OInB%4<naj<?"^7]JlEG,=+3Y9<Hjo:u#>$cD&W:;m[98>=lTZaRYUdn4Tn%J(70f=06#6eZV]@nk+oh8Aob(H8U[a%Dk/4NN4UF$_!t&[\]l/4f^bj9@QSK*geVe-s3#TSaOSd`ip1`6GN-[-E2)4jI*HcAM!6d!HUg\#;$hh#'uM;1eG[->l1p??!`sSR%5\OW69s*Zk$$\uS88F5!PueF9JPBdjR@WDM/E70Qdi)!)`;V2Oa]?I[):tA&nRd'Rc+]<kBZ.?sc*7IpZpc-XM7\iSN_MTQ!]k="%a'&]m!n/%W:2NiFUfL]0&`<+lOt=cr/&!$3kYjX);T?6")7nF5Dk&>LehaD7B"ghEa#B[Oj>;3jGO%E1;76^Cc5:iD[.'5!KQa_C%GuV:H7e?:`['X/W&bm$HEi0t--+5sm;.$_ai6k2k-e^M=6-qhCNb(@sU?cO#ND]jf=V#O8-GF\sefelqCB+u?%dq"r<]qJ*"(>66%hWd$?K#]lL!#'hcg!RBUPq7ks0*AXWU<!WN;lk:%/&(Y;GLq.#cS-YUhaMV>Pp6I'MEAmm,uNaBpG#eUJQ#Dd"AHcT&AZ#DN0H"?%0,]"fl#4A?@NoWr?lTK5ZUpL>8*C2R7PG&-`u;KoF4)HW]=)/Gd(:;\48b,sO!tk6.`Ws;1:^N&94R5n^V*a2Ms!*0133%c_\'i9%=T[.<To85\F'[f<D*bphY0Z?!`4*gKkqZdCHIL0:fO5ih5_<ORDS0+F#=>_u%3,F*%cLN*k`i"P]q"==a:Y`FVF:nXT"1&6b=XYZ%bVZ+)0gZVBG\9Y1(k>MGmoLuWo+_KKf^r7o1:FgR7)*_DDu)k,9EiOP7-?sSiI$uNDHSX-PtB<AM.)E,G1noqB[Chn^\&qT;FS'9%?f&4t),M/3j0eW(=j^)a@6"kNhYjTXY%(NOp^^Q6Gu\c#.I5>M)6>)KkG/]h*):CiHBPhOMkNW+5ut>VKDfgZBX%=BrF_^*IiU$X%d8!3`\jOZH&ZaXo'$\JGBgk_2U6P325^oogS*[2d_q:aYH?Y]OCh+(+Xd%u:m_n[]@pauJ3q7O.Q]-,k3&lh4Ag=0V:EA?kUL^S*%[FFbrVXr+us*25X:C44KD.V,\%3-uQp_>NIbl0Er+,o4@,2L^)$Qk\GppCZun#K1Xi'2pF(7"i#7,KBa/D'C%(qI/+=bRA:/*(L:%WK]TbY?U('N*!I]n8"=6(N)j7ppEN(7[6od"!7T&f_9PgaZW_`e*7El/M-\k=2N@-pq2>PMeDqd`X*0Jek`Mm11'Da2Xi4?<(qtk%69Y)T@`d(u>joDbf5pj.8j;XV"Rq$Js/9CcWti8-/)`o#as=5LI%H3smW\YmDPU#Z=Y)7bWU3)<)Wii&COBqCP`$;`HN$l![`6-g%#O[epV9Ra_A`^_"39p)GABMu(ndBn%q8'#U>N6?1rg6>0h/4uD([Tg>s"&A[\e.LpXB25bkk^$,H:+rs>&-'1YK)5:s!:<sMg&L4%(2p<p6\18q93mo'h]g?en<!^E21Q3gc'>%/!&s1$mc#Rr:A,9kUsFeFb!]EBVtiK0^H2b.qm#IVZfkP;D`O-=n-MW]+C'>?#UX^6%43;'oC2H1Y-U#EeS)s=abB5u1&>`g==cbH+f>2o]\a^;L):a1N4-e)`dS]6Q?Jdcq$mq#kCuf02,R9O$e;;*soh5>_ZdC`pncj<_%Y&)?Zqf"?[?]VSSokN/bnB7rGh/G^LmE*J>8h(V04F(g\**%TBgq%(C?VtmWQ0oZ'P=9)s+$I4/<F@,FK<^MaHCIHldjkh*=>SCd%@nk?XPi[m2Ko^CMBf=U?mnl4`:CgmpN"O>/]sV6!a]8&0Cc<&e`)hgn,nsZZ<'keV,'J@Hqg(iu>5gm"p`H\XPmr"e)l8jEZ$c'-%od29pOP+O,leOWZOj6C2X]F'A(VQjs="iF<9m)H:3*B=uYV\7WO5G>aJ>"[s8=-#^0[a1-.ekEFZL(rk/hZ%"H@>+9'CQPM/:.7M%W:'4O<Wq)_fjsfiJ\C3JG;YdI]PC#A@;kXW1$2cVGe!6tmZPoQE&"`bh5JnK]M'i"l=G=JmcAlZP*bX093uU`qp6jqq]<C*qq1Qk%O^m7KVM#'?k.16&]2c`*9R:oK04jV?mU=\YGHk*>7bV\*)r"UjGiQ9I7rNFY]Au]J?6\5.J*5+Hc?=TlUJO2?c"R)Hn&\mTeXKd/%db`G^[-l2:Ns4u4F*6oakW^_HYDi.MpZ?In#,BsZS]flFe)m4qW?A?jM\g#ODu$E>jK4Yj1Z"RoRGPq=F5UnP?GC`ECj=k7;S%8G%Rd8bFU,T4I(O_k,n`"T5\%EQV?(EVQj*T!ZW98Y6A<+("7@lY[/bg.$kKUn5j^][A\@(#(>MNN3[ML1El^,S8m4?#>H8lNQe+`+h%@cm)$]9k/l$]AZBe+Ve3Gu7\VAtYd.BQJ1`1%0Nq/@JsIb#Xs8XIhib/RR[iZ'/,70T*D]0)6:Sh'LsaYZLFuer,m/:gQ3PZ2D#h%':8Nf:P#%W\,E[6nO:`pDg[D*_lW;Lc_PrVbJoPqGBYP3$I:dWhmIBF`HSM/(4B@]lh^6g^?'_(Nh.'b^@k^Bk3FThX%SB(]undG%HG$g'I+YVS0j@/o9;;0n[A;YB^+AXmFhCB;"M:s]^dgaba2(Dgl"n&BZZI)Agg@YI\B$79S%dXRb4/>GWU\L(06PM;Yi!(Chc]IG%Q`j.>ra:6;cHi(qD80UNKDt8%j^!@pWT=$T[F:TEph4<jT9mG-s7N+3jaUr%?MrpJ]&\?iI*27HPu;DN>LnJhPt(Rk3P=/4/.;%.%f(*F5]j6ZJUO`UKo"K3c[![8OBJ10ff6<O!:A9[i)H.H<X1EPfgeM+/Qi!K,bE_2GAS<BcDd9CM(\cmRXjaDaQ.V3BXJE2unk/=f%GAlTK*pB[foP;Jt($Rchd`S@-=3O-E&+&2rmZ'4;Y,GD&8X21943rd%8>`hu!ln[`",1oI3H02?Plg'b:+">H0iGfG*A+Fs`:VLC%7Qd&BPr"iae\-`EG]j$4d9FkL)s,VN_t`?YPMnZ.Xm[$5Pgu+t,-L_T0>Y'cnuZh)\kfu?m2ZIl[0(kL?TVOO['a[:Ion3Z[C`h9%rVgub1`gRfX/jeJ+K$';_6&@/@PI>j<.ZL`M.Z8Jpo5:_(46&=o<Ao<RYthLJq#rQk_lQaWV"=/G0%1!:\I]Zok^Vj>JInuna!#!%5.TN"2D.@Tm6W$3o'ZcMnn'9gMOqIcL5q];,BP*cnY)kmbMuDDHr^XJX#E^3(qVp@9?Y:d3)](X.,gqZ^h*9bZb7((Nm80Pc,4^G%A+>Z<h?][C'fVA_:Y^d#%j!X7RjPmiF+3ng!J2_;]]:,k9HXo&B)$FSK@ppG'Q[sMI*>#:EQJnjH')gY\?%n8a=R*hp1/;uh8ukO%fX/X<Zfd(eYsgQgYjI(u"m:B77lbI"--5HlaX23GJ%4XDf#%;h=jP:H9?+HXY9rgW?4p;2ppg*@cKF9@+b-[J7JQ%><=p!"Zcn#.%fJ)>O@:reN((RO#Mo+#uOt#VH90Juh0D37kA'G_<96jCiO2q4Yq*oO-/;:*_pp.U\95A=J4\9(S%]!'?,;0eWnrH\R)/)VqlLhHq%Fsfhd\lqj[5MLZI\rn^i\V=AW)JaAsN5"C5H`:g'*-@F?GYCqOG.152qGH<VojoA<b3;DV27@n[;,<C`D=pJ-!e".Yf/M=Hf;G+-%WC8JmXM+SWCVA<PX;?$m$i[9)USb:B`:m27M8W#)X,sj;Cm?Xa=11e^\_Lcu5&iXsJ$*_QC8LR2VVJ:k^Jo*BG!^Q-nX\LDo'4MW%<\*Q"?7[,aF:L`gGCBLi]=X7ThX@$UXeg4`DiS9!G<>KCnm3^YDsZk_FRSt0SP3os9<BT8\fFM)Ch39!,#Ob8M<"bfDku0'FJ@WI%qaQh%DX5\\q77KXXBnr%cRW0N[^+_6NiArT<pZd&FCPidI:'))/HlsgnaOX=+-1H1h0@d5&*&r7r^C;\WaANBfoob%0H1KLmOrA'%7-EeoTA3Q*XX@W$g1p3Vc5TL/f36e*Q-8>sC29TAVG?d'H)d5hHi)[EeX_+CUce"A=&34grHj%YGlK)"g-&inU\I,!f52L4eWRNL%XgMau]j<\P9h/8dT@;u4V0Mi>h<uDfp:6C)?/6;ZbSP$gLU@M<pF)-:m2bTL4BrjllCigCXIGW.d_3rm4E@\1IjVoC?-C_MDP)tk%=ms?"DESb"/tCP(j6,'\pEV.gCF;t.H$aQ\qG'dhgNSKjpc,[H9ft+7p3*^USpa0g<cVG>oB"DIGQ$<lq-]e?mjn?8-"SX!B%;E]%_1,Vp8ulTUN?!#Ja$7a[(WsbS=mP/H0Ya;7TBGr-cAMFQltWHV?+^O\Peu:#+h&?1(91uCGeR4in=@U;O#G=&nr_DmDIKSc+[57s%(WWr>j,;'#o(d;`Q5:>7QdKR0r:3>I04&fP]?)Sfi;WO%)[pOg<?&uTlep6TI%@c304*PnElsACX&j0sCRMl*_YU-Ldn6cTDV7X#%mIl@>52;GGMS")54!j?$gg@h,].8&Jn%JJSjTY\_f#_OorqnUF\Mjjiq*E@Qha>tA;gG=bCZgc;oCM$Q3l&n!V5mehBiR^uTAj^r%napd9QF*K1nP7hs>[2#&O^)5YVfScTXg;98GYu2r't\8#Z]]?<?7bkEq&Xle160dd=^&!mQVU7J\(nR)?.FWr7auK@2_hu`h`@h-%#;;oGp@>4jBiH:(Q07pa24Is%X>YBZ\&P&K[q`I5ejZ^ok]Z:/h<J&>oR-8=hEK%Ho_C'"9'PO:?*O"WWMXkXl>j5d\4B$L7dmm_%27JdI9(TX?lE/%+eo!"DSStnW\C=r6-(qEJP:Q!*]<oE@)!c4p1_(&k9;>PCh<o5Uf%8%*+.kS`d!N:\Io2e\`L"cT[b19D@D*Td%hd:IIfAuneWkY;-hl^68L&?:br6rR)Sch'_7'^]2E2:?\;"N`4X*O)fIb\k1ohJGp.gG#`ARhbRA?_'P$,;IG]@#u5iR73TnWoH-%VqVXkri"^1Z;Wt9,JM=T4'LB&BjogGP"VUP6RUi*UPK0.N:uH^3j=!F'KoUqaK^4IbGt0l`!Fq]UJ\3*@H?0HB6m!3fZPo)#.H70%<joB9og=0g)i@(qqlSRa[I$+NH.N-Kn[]M(/P5+18]eFZ3T&^W(A9XBG:U^rDSIHpP2*>%LGe]Y9J>q+W3.pLOfaE.>%Dundu3jY%\;^ZAA1Q^-g.7!2XEniSM/3QG*qH_p;Bd)eWP06";ne"Vj@%/*.GsK]M<Fc'E"cE1KJ1f,of$[&?-1\o-%r,<fQ2,qEl"BH0SdWP%SLqru7D:ap]o*ZciJ[F8FlI8p8%'A9qoEA&g^5CZrV]]'^Kaq2PK?E[4_FSJb5J/qM;Hcp,uuh^2>MtIR?"3,7#B1$7(+6SV#:;8%^%atf_15>)0:489@j0rZ.@LeCg6@=BXk[:QX3Z?).9R9Z"7_iL\@!@Mo?4u&ancYtM<CkJhI#$N3:t`D1X[3:W?+`61,V*JbA:j4%\%_LA=arC^a.!"@Pu'Daf8jP7b:cEdC1QY7`\7+`Xc*'IZs?jL"a?!92BW1[WK6,@S*Zfg;W=p)!RiC!kjg%GPW.pu%1UmT4l-Ku%f(E-DcF#&*f,9&`T&00H-J)60o#sMu<q>Y#ET84PI8R`7jGLZudd:r,%h.htCHc!d>No$HD<!bG`YtmUa:caUEe\#kIE.0RD0n;)%%Gl2H'F>jDOBr48JtFJEV?QNN\=;3\5&FXRO!o=%4o%K-j0#pLM!bukgtb]-F,@TqNn)J;cLt<7q;d+.jFCY%0,kS,;#i%g3$@..%8,sU]3C>&t+>D1^90AB:`fborh+5kgBHcmc9N3p1?BUbcZ4rL[kGR&>M9"FcTiNqD\Y[_o[(u49qGI(fg';K;2p&+u^&DDsW76i`%ksJt5RF2Lf&*sJ32A2:&Z:sBo]%'i6]=tC?\jG'@Jj9(P"tsH&eR9rUmFKR:c/Zu1Z9jFNmn0g/C[8g(Tg$,\b#-0Lo5;kf?!-G#%,/iD75EJJofbecYDSeX89V(m`.i"&b<l&%"((SUggSoS.P)ags(]LH#79BTWfLr^qI6CC)1K@3SQ92/;RWN_:/2Gsq$,,)!B>Di2%%1&ZV0pmpDIe</l-.94BH:jm.*eb9lB3D"@:D[!P^U0#qfn\4".UG,7)"sn1:;tDYCLTEHXMK@e.IC@Mqj,G7q"fVpDs%iE$\"a8%cR/?)IN=/(h'SsDVQtJ]]VY<Z?3rftS,8bqU8eF,KTfInZBahqQ$BuDQdAojDKFU507>P8C.mGhDLj.,XeL%\#BpYr%dcQ_G@8I9%Gj<VVm@00u<]'huR+SA+"B)UZb0#8L/K>_[a@.8SV39!ceUi94a<^3Ye'Uai)^em*=k^N?2=ITf;WD?A*e5Y0;ko(mq0"%dk&G#[%HIhGa3UokP"#,3TJp^U'$V-8\o50<=LF1f*rYR**bLq.&V8/,$N4%b8-+`Y$iWIJ(WQ/"WNN`FA\#k9TM8`OlXjtJTN=etHBY=UF%FPfWl(J6bCMl2o7fN1_^h&V>":T\YIrNqNbGnHm73'')+V7)TI.X?oa<7fh<]l4t]a-qcW(t\%rW1UB$='lUb(HNe!2sk\K.*tT'%5NN`'`0R1je)Bt[$D4JE!N&;U0X_>aJYS3YWEB[k!nFg:n/4ElW]AMIDJ]nL@.^'V-O"aABCP.G5uA127q"JN-[CO/m"^PJ9"aT/%62[Cp@AB?sW1bI[ER5(2KoeXR,X(-ga;l\QlAT[N7`!ZZVoU(Xm@]ka1,h0"kqR.hk@f9WB"%g*Hk64eNB3u#,!SK^=kl2`9EC^1%S!=Z!Q\XdTQ]ZujYdD0L&?hCNn1n)OcF\!j((b5ShsT4i1bp'cDtoU?$]uDKH%ZC=b?unlH#^/9KEM(mk/r#8r!K43-Q(=Nil7I-%E]"Pr[k`l:]K98<^<'($e)B4&OiL3HOUVQASWk_JA([SoXRQL#N)J\P9A$r6*>oRgK0dVj%&SZ;1:jK-m]]2R,L"(c<O([,S"TmC%Kp;-p<ffHDKrK5C04`5/G)7IHF&ndH_@PBt26=gtPo(.%-<fXNJ;h/kAaN9H+_64G$9ETGFABZ&5P(2u;kraD=f$EI@HCALQ,ACn%/rnYb#g5+Ar;6Kl7gMc+JE2M\qPX>[e>$/KMek+.D_QHVF^Vhed#oWDE'sl5ZQppTJtF:m1jf<?*-@ugX9o9W;+t/Ecu8UNh/#^?%]#gbBHt2E&j8l"a"\F<Mi)bk)7S\]h.mi6/mmV2U&pr-'BC5VB1iK6qa^A^*0`&/EMQ$N7SQ),]%[/P,5l.qY'$\F+3K.CJkc-Kq%0p$rq'K4+5,M8*e9'9haq<m`'ES+QD)V78S4Le0WO"O3O::;Q4pG_em=hSU)IMjR=DYl%Ka;r-]F,.l*"%F)MmXUkMo(ftJPc1,G%nf.8W/Vms.,u3K;Sm/juS.**#$8)%Daj<jNOYrS9?U_<#`:N)#]`'I!CfO[<.`Af3/Bl6(P:W>k%4!P_N/t%o2W).hFp4%FFnV@]%$YaHS&(jTU6`YQUJ5^pk#m.O$9"YqPNc3EkG;cS2)P*dg>bhC0+&37Y@B_H2296f"l%_QM*u5AB<9>dkF:e"L;R*l-ja=!,\Uu5>%(;oos2#;D-W]'LE3&";AVOeiQe\qHp>_-uZaYDSbE;[<%;t'#-X!EDA=OJ8akql6t&+26"0pUZtb=S^b,ZA:+"*'SEY(uE+`d<"X%V]P9XI&UYgs2=``Q=?uqpA34WXWj)eLU#<5"F.IpSQH2Is4SPX4iq','!#U@_,/dDAO^S0M`E,*<9t$7jOZ6om\U$N'!L,:2hSa>%O,p_[h1oDB_aguOE=bJ6>\0k?RojBMLc)[_n*n/d&AW+J>>5<TPWck9^)9s5+QFCsp?s%?]pL[cXh((mBlNN-Ha*f(aH<U"lU=>d%CYmIQZdJ]"q&.apVoqNS]dd.eZ3!+=5,Y0s<QG9H@sbUiT.I9o$:Yb"H-i4B68//e@>g8Mo9HPT8B-M2`N;`spDbcTCY(8UAs5gB%7<kKf+>g=JY6u0TI^PS!.doq;42<E"g?\+LV=sK*MW/1FAN2-MS1"_jI]E*&#XRj[Jg@6pF3Ugd6G29/]@ZdmDgQSgjZC&u34(W1%H*!/(KQYt5%f;+P=ZJm1[L?D?6!?sij&Tk*KJ1i#1$XUTX0%1@T.Bb-9n.E)q<V8&m3d'.$[T?.U7:=TXm@ZbZ&ui^7#5FOr!c?m%=YCXtP:@''23^0:-#(KqU-pmm?g:j\K46^DH'NDn74gFBh::M:T6T_iokWfBo^2/((+']F4P_R)qV>s6oM.;3_?n>N&UXlE&k@Z9%`Sp=W75IjB8%5slHt:t*M+Spg=n!fjNT5IeN'qTJV-J*7<OcR>-EI+M(fYWTmVSJ!6joCgWhC>W9DirUdLE2SB^T]sI^B$H<+*Zu%f3hl(i=0p"3u]:sR5G7Hm`nal>IBIBK6"RW/Qh)6(CrOj_[!\PrMWW\<5\(=`OZ5*-&-ZGYk/Q#"UoPHeK_Mi8TVd%#6#?/4pf2s%/Z&U?d^YE_2m_+uXcCQ<A^/*0FTG0=3AoCE73X.Lj`9nQ/]pd9_5K:CWOOQ<U4n9?`gVc\@CYusH=SgYg*@'gYV:!kM!Rq(Pcemi%BbJJ6ZU3a7X_dcYnbUON0=%#:CXSer[3%Vi?gJ5r6cnmPnoh]gRn/mkE\ZO91Z'b]K?jqNK/lX0%ehaD_-P3jJm`@+_]WV_dalfD%[$%BamKImB'95F><*pSf7A<!4XJ-X^FLU#*9E%GGmd4P)j/+UNGuMkM_X^Sgp#oW*"+S/!jMS<,+uRHNo=8cdMm9\*Jq*AOaPTGp%Kk9_/YjA1kh.E`<PpI1`C4tuXGOGgYJM.b!hF!)98RI#h9<8rJ6-YKhX#?]o6<%"3WiGP&CB9VRk$8[C"<+.0X.f65@1]$tn;ns`%2'UeeSP)(Jf4L>hFJ6_n/*:86\6_9^fXVYr>]FM4GpC!*_KRt3,CKXX8()AASJ3g*)]k/0R\7F.%oS'"FkFY[X*@E<X4K?fH?@Dt%*J<c"SWjfLQFcM>ZN/,L@-+_SlHoN.,A]Km7#.WLFt]f1%A"E_M2HW39GH+DIPp`Hh+gD.m6sn_I3gPNqRDg"GnT#E9,nshDpV=?%43`OY8[]7&D+;hem0103JE8G#83<g7DG9VF`'ddEqVTqtAo8@Gk5Gd+BfL*s?AsNE**&[!omZ<i'k,<V=S$\jj]u)'+b`)"2C\s#%_`r\jmO=06q6e!f9ePOZr*\u!7JrpmDq61MV#om^<3=uIpelt(EB`LQ#[gmiokK/@h$?AR[)*s\1^pV0*aVgkqr1KJHP"j?Kic<T%Jk4)^==h/gUa5t@a*`lF&;Zl)"23\W)A;c:A21dj)mTO<\=r548',CQghNZ>[L79?Y`(%&;:MOUf:88X,Y]RoDeFG2"b0?r^EpJl%\5lj$bO=?UqtKOoOI&GoJS\prpTXLV,nc)s4\CZsV9!X#S?6WiUiogC2c=FllOnk:JfdmI8<[jJDWtp#_V0U*%aU]93_L$2>\\&&%EL=PVOYNcgmZ]6$^sTm]>\#%ZVft=Pd#@+FSI3UW3GG`:CFq$^N^tU>d!;n(Ep-lO.$sk?-?#GeF4#C8S9sQu`,6dTWqX;G`EGN8%;bB1nqpkEcJF)Fl)9g`Q3TD'ngicAbW5_:U=YpUT;t(.;QhO)=.D6R6"d^5>g6OH`oW`U\"Y3l&m+];?bb96!3(8U#H%\UK=F5U\%4+1RbA7@`p].6s^jaK^\$2k]O3fn&;EcQc[$7K:J_oZNWq)K6_Us#ZJi\1p7iAPA<mMeTa>)S&'8TQoZ[7<FI6T"d#Gg22*@'),k%lRSacX[c1=*l140>--0m+8/DUICm8m8foTj+@%@j2GYBOrRB9uf0UA8#Fjs::/T`m@h/*kH;<Y>cSTOU3Eu_#Q0"$%169YMe71;I%0euB"@D*#Kd9Den++edn%gp$W(Oid:6U2c-;.4%T:ta$eNMs/?1\')t"E\AF.ahP7>"fnVhS1?.m>&[>JruH#8H9Q4l%&T>gQ4=O%fk%XpZ)nATe\OQ:dC^!d+tItJF>HZ9MF&nRSJ^G'2+Ktj"iad(hnN"qGKF;;HC:^hbOnrfCLFYgRl0]`e4s.>OsFhJi$V`jn_3C(%9.HBgF>f2,I:KW@-qQ(nHBotu[74W-^/:'&q4sUpWMG`1ng$NCK?!(QkaOF+[/KAU0jA2.E]8$tl!Pa$kXWb'j=*J:/"oA2*BaW,%=]gY@[^JP(JF]_\.N#[C^JGsmgn<6FlL]0Q-Ea4(^lF[='30gq[%8(]egt$HG9/n'1/H?dbA+q_1?0@p<jjg+p%oTeq\%L!(2(a"%Ja^:Q_i3usX;rXF=8EeJg[;oWojd0AfZ8X?]JK/3`Ne]]4(,ik.A,*Q4kPD6B+I].d7]F[A62:3dt!;GZn7j3ar@"QkNaQ])h>Ts%oP?[1kcHO6%Oc@QPqHAm;;r3drf"McWp]t/++O<2;f*m3`dNr5NlKYR/Q3`iYW?%AmtWt8dA*12A[qS]"CNNYl7Y=Lf`Ss]o';'8%WQ4[ibu_OdqC*\L=)NAlT;QqAQ<M+1De4U_5mJEE5AIk'2XkfY2K<*=p,R>tLB_/X:qJ\.nir:,T0iI&S6FV?V[cm_Zj7;?bGB1;%0^'1@,<*lDA?!(F``!#,gn"[d/M?)#5@V:64]:OYQQo]FTmj?[QQIC:/450*&^mCC<)3s[UV6/JkZ26[r]DO:dfhXL?bPVFhp45+%)g5k%061XN^\TiB4;*MuamYRNa-"6qAbG'-DjK*gD+Uj9G(J3H]QGXB`p;L9(!r<*>3R?L/;;fr]o1bB)@JPkCD"G^oAVr7:Al_.%EoPGk>&JT;cot;#qQO4hI*=IU[dNDl+Znft+eBLo,uTftojm<!ZVTF)AT[I&Z?j,$f/iQ$ZF^&#g4ODD'Y<tgZ.<d%5g="C4l*7X%Y:a]2LMC2)jVF-<q_Xjs1VN&rG1-<HV$qU`Bsdd6U8`?n3#g_r&1H%9H9GG5pR!ho;l6aDo(;9Q(B1>uD,64!PG,BI\-T.fbZY;`%3DumMnCd;aVZ$Dh0Y&CD,U;qPZ]T-T)LYBdAAhub4ZZkH63Q\^Wn#jqHCHb_3#7#""2bW&[t,Q\Bja.Oh,?8+Kh(_k2:Ch=h@cK(%ka`i@O&uqM3iCr-)%`4fX6j>&FBgjFbZu;=2C_(/l9.qXh8&d&KcR'c?VN50'+>nJ](OA'4"SCR7S<!7Q[81rY5^A-U$:BMolah+%C=`BlqfEIlccTa$GHtCk<.eR2p%$&["Yp<PM%JuR*q=igM7o)2o;2^-XZLfUJk>Em_[FB9VKM5CcN32;&-Vn)jijMl3B#S\WR`q1%H30D&^1cX$090U`Hj;9B/-t#lAD6'gfAJXI.N-L.:(6@U4S*)<[,/LjF,3'.i1[79?*lQpkLI<8c7kBL\C(:AIuNidfh$4phpm/c%BCr.Z/l/9[dZnq&P[SC7#h0=(R7J8,UR?G%eo);X>.s1;;-::0(*#8d9NNICM.F=.i4A8*8Yep=P-%^!*iD7C_8cLdF;k^<R4-)N%IM!M;D=\2'TAp!'al_N0Tq=/mj-4.8oo@c,7N8tQo$RD^T/s0qrjA/:\n=d.,\(AZ?jZM8pO>mk#]HnSI#"o)QW-`.:<Vd^S"X/h%k@CphNodXO@!frTNKY?&@8XCFfXJ$`g,]Wd.Q<Ju[+$sjR[MQPlJ5NcGYOLQYr6&HQ_P>_23X6a1h&4iLQjjZ2`JndFrI,+URa$T%ZIUOKqZ[oSZ8^a2Sr%W$FIleho2N[I]/"rl@gEbFX`pqJSRA,L3W7Kij#Tp)?$kYpelqg*0Vi'C3+FA&mn4E0k/9hH@V7WdqS/8S%kuIs3>6rWuI(2*`N^f%5Ju>D#YO;7WCkts:7dVm9R$:.h"cj0<-VK3(d48;=rU0&HCKKEM/#@RG`palqbVN'IN*b>i?&>J-ER'6l%P=Mh:`EU_Dk_Wcq1Pca82dMRFaOR_=91.#p2"WY?eoE$]V^#X,_^Z(BPWZVDMkX&0fXRSoD=#eI>U-3#<u5dL^MOlBr,FkkLcf77%BTMUX'CuEPl9('#%4>oOl8"7XDQ9cJ-XBX4Y%mND'Z6^SXkD2nJ&jWV;+Uko2;Jk<T@iW0d10XY)YHi;\84i.lfsj!kf?JB1+">4%A*up9NFm7t@)W&p.1*JgKS;i8a%oM2`D9]XUgi.rC$;-X>f'Ted]'Yni?IEo7\p_M3hjg&*hT+7YjV*$IGC9MG2D]PG2>AY[==<>%NZ4p02T&R,W'`A[8W//P(0Z&W[Rs@Xjd&cpRr-b&FNW)/Ui1]&+HB[I:8_m$9pf>(Ym.$qU+1o.YmUf(NjgVj!ZP1t7<H8bE4j[#%'"K)Hg`0jN;\2Yb@%KJ;7ICZ+T?%V`G)B].,RR4Ofi.h58Ta8_o^4f8L!A@IS,IM`d]5rd+)1"ndB3lj-Vs-r(##-W-WoHXccL@0%9M1+N/e&h:2iH7&qBkl+&05[*Ru"!8W#_==(Y]TR5c&'OgiC+h?n=d(<-h6Na)qFkLcGa&^]frL\:@Jd*&bBQ(#YJFIU==#^j"Ch%mQ[#Y^4Sj`Z,u-qN`llfPW0'6LVosLa6JqsVJc,c(%91R*da_YF&E=(ifr018WjH@VPC0`5(Be/9s$4"*\=r1ZkFg_P<2#W=^/i0%iPjB3`0F_-UHDM-$)f!'B&.8u8Wa9.QuS)87a90\O#dHBe9,U'N(:^WWp\Y1)NWIGL"[tZ5R59HZKNji:CB.Z\W7>5F5eh'.'CI?%\-QW"A@OlGOPp8m6,kmTWO0oh\N/?U;4LCj@_B66rA@c^?aR4Z>R&sI!Mb9K_i0R&H4W/IZoMQgHf;D>e]bka$K"-!%1=F[nA(g+%-hl/%9-ibn=JuD9?;6&[IF;FP,3^FTO4lkR?m<Va2MsA82s'L'G\#-2r2'p2F^GC6j,6id=WJ0aO2J:dhW-`b&<E,h-Y%`ARlD\]%E+gJ!loU"mV_l5i&;8nn'dj:KrqeDX+S>LN,$ocLlDAGLj=f$?TSpp3#NTU4l#),]<Vl+2"AtmQ<kY.b1"R_M)SUH3.b:uVT[\"8%9nDnT54#i0Mk7EZR;1Dr(W]rqF*F[V+5D4B<st`^8#S@a*<6>NW51C[4*9,!S<mDD-O!aB7)Q+jcIZJ51?>Bnm`:Ng>nRlh2Y/tA%Og!@kRe@`eh($W<[eL9W4nsUYc]LD9GLN%/HY^G>9rj>sG1jS7$;[*Aq#(19(II)%nM(4hZV?>U$`o-_@Gh[q5:;=0=iLCXO,1SF%E?RSDnXV_/p&]NOPW@kh`TQK=B@B4f*s%^'%.abWkC]hAa1a0`G40fme0M\bH4So*0nKp`5;"X]./^dTCSAMIeq[&S"c-eReHNs%%&"``Q08K&U)*i[s=N5FK\\2W<AScS!^o9F4(0F&rKLAB@1G\--;'7NMg^m"B]HZ&P<jZ6CX4f6sns!ft7T!7q.]NhbZ=-09A.'a"%;Z[UmOl.Zs<K]N8"TfATc@Wl_SdYdCX<:E>U'R>L+PuCFOTj9eEO%iVA0A8p-r?4?X%+Kf8@$cNPU+@<@)/draf,E_WF;2BP9V</%,%2%5XNX9N.PQa;LbPPoR?k\s0?OtUEN00U=GoOs19AD='XDB^V@O!mUbK!0A:bp=(DNBG:(4HABeLZm%$*(cbY',m.Df")`[2Di%30d$s#a<DOKH`V(.V-[*3NT.d7q"MB7[S_0.T#K_!iKM"!Z./56)'a0W$7K.bb(t?XVHQ-8`Ne^#,!MB>H:_R!6XjT"G@itBNL9>%?3VPb"A69KM57fj<([LOaW*rW$XnceX;MfD[>r<g/effcF>d)i`RX)20VaMY7k$"J]E!o2q54:McP7X+*/GVq877%&jDYt+EuY>q%!a1TmKs_+c_UoeXLKQpNf9"s1(0N@Cn=3mg[A5"k/Fj;9@7c/<oRhi0A6,SUUWP>e2Zn`=W_0+Hk@GX"!KmUXTK9uD@GZ!;L9['F%`0gc7ciG.#MGZBQ.0'Rq#9W13J;d*XN)0ue;mZ]Je:Ra(.a/ZmP8ObN0YD36UoG'E?tc.U(;N<BeH96MA<SG#21Zo:;*b\j('</?%_bulCZ;t14!=:#*(?OFgX[ofV9K*6Na3mZ2,D>S2UKB2m!b&$IU,=i,.p5\G[S7+HK4GN1WsZ9=+Qc$f5RSH`+1)ePSjEU8[5%3R%VZb"APQQl@P`%4/Z>*=@WiSIZS1*-Vo/p_=JD<`I4=W*Y$GlpCi!4Xnj[LXG8bT4l]L$$L>ZQpZm"/?Dd#Z]q7MR?d"PoLi:)-n=%j(6&Y0s&5h(o+*_/Wld#P1CUfZXp%6Sml_JIAgJ)\`5(sTJ*r=clu=`.8Z,*Z7.=:*e46E(6%2XGJGTHfue(:)$!*cg/44MR1>/O%8!Y5k$o)Z+@mJpbCCWnn&Q;00-5-S;L6iS]"%,W'!=NLn&LgD(a/BB'N2j&m-qkj6&rO@H948^?,6;gm7M-j6,"FpS\0_Pm=i)o1%J6\m?Ohk"ja:P9qK+J(m(1!%S9Sj?@$KED_JdEp1dafC?!$XN*AQ>B9?nf^@e-kc1PL10j9H\Wa*uL7ZBk,XtSj6_-"nXSR`fQ#[%(nD"eYl\)pKQ2r62"lT'8cY2NUm8e2,,5.%d(g5)qEG#o@$8VgJqW[t-A92hX)o+s2$G6q@P%\@0Oig)?u&#4(nST(L0,l:`L@cW%KS"U3d,:Wt;,AYf9<='X!W^6rmZ>8!'[S22]\Q[t3TO"%MpGPDLpDX1$+LtV6t,#HO<!b#Z7)r0R37'8+BY9"4A&#n_/"%LABc?d%$#Ik]71fd,7?n-#0-T<*49?*7KujB2++Sp5V_IUZK2n"%,!OrVA7@]X!(]N)^um.%SI,Y?GZgmt#)/;K#,,H>dMh`r]f?Z]Sn/3T%8#$D@U_9qZ(m:T@`#$EZE>_(2<Dg#oN$.,mTqu?L5HIR*\/:#?,RP2QKifUNJ<CJUM%Q+Ig`44@BZO'gOG57.JDc7%3hrfF.T*_o%Ljd&Y;Q.eNDotC2*$\:Ij^D<.p0MFc<6I:S=-aOEk8[)I7godt6OY4EAJ2CB&.FE614Wd8k:d/j<&+g526%,(mYRqIUG>(s+"rg4%?kjQ1[64dhVa@'s>'V%Ko#0pi&JV2<!i]+T4bVc.<hKYZ7jCUdS3q3\XZ/^F*&/60K-&DMK?T2uE(1[ID/:e3CQ-pL&q?$7=+Jj/%DtV2GVZN1bX^u8V6)G\g`0cBV&'0>pI(P2@RC26Z"9DpVjs1-?joh!0`eC)`$<;!93@'-nJ<qWA)d!j&d/XSlZ=o(S-S]_WM2G+a%Q,Bn$/3\kGGWTF>Jk?ou=FagV8CU,5=<Xf/>_sjaN2Wbd>[X2?Y"7&I-mE<A'NM$=L1RK#$D9N"Z3V2mLF<q87)WEMG`"IdJ2%VU%+q0D1CBYY22FJ4sc@PI>$naHRAE(QSN,Ac`Jg:WJWAt*f5biZO>S\oiN%o.'691(Y08ZSBaF]#.Etld'U,<K,&6T#N-lkgU#c'_^%0L_5*>Tf9@$im:a5"*.2P*LQo@i5oF+H5DA$KHAGe8Q^)iW;qQ#EGm\N1lR\;E#epEa]HT&n;@48V*CeM?TATJ]oaP-':G4qIZ\j%":n1c&djoB:q)*!>,<`"U#?_<."n]*'28Ta$Sk2q'I$-NCW?ekAJnO*2?f`\>bNu)[`1U0,%4MA?n?)I3'8Z!Be,t=:af;*M%TlK%(H<qXii+D`BF5$k!0]-&Z<CI)"&K_lWWa'<J.D]Ti@PK!2K#p'XVd."XU(I/,[%(-IrI;FUtVu5<?D30)Q\fE5!u9m;BWm\Z4/&e%7:L"cZY5L:,3:;c!K0O;-'>YdifjqNLa*ZWXLtPE.u29!-9u+WfgmC07W'K7=@-%UOpKK<U.GAN@C8OeZ2mW586X/V@4J"G*FqJ8%LNs2AgF4"#!%8ZtOa%G]DcN7pnYh2<[=HpI-<+ZLH-=]FQpIHCbSD(YjI.92QRfjm$8b?Z$Rp'@o`C$[$(TNaoTZ3*08dGpAjsY^%"RR`'2$aREI2J^jbnRu<PE:o/B:*6kNegQGK&_C'!aWV>&?&E)QGCkG@"&=o!)AL<!WX+0e5&>?_2dL$!]%ZW<*lDX!-&DYD[Nj2%5TCMQ%>;p3L4P@P+ta!32kH6RXONKE)Ffu,>&]"WZP!r@NC<IPC>!('e1>MQ/AOcu'ZSMjO@6bmWMokV4Nl1\#Xm@qSmbYQ0X=\1%&SYi$U*6h"4J9cK+G^It8r^4p?FAttH:=F7MDks3$Qf8#?rrNX1=U!J._\_^?p+hM"37/>$7Z;dL)F#@9,2.^N=C\W!K:29M!V+5%TsZE]LLSVPnq5.`'bsBk+_^&@,[;PA`aT'ckIc\fOQ9ca*-%&p;oa^%",4)04AI.A5qjN5JlO+Y<Do%^iTCHR"GSHe`]#_Y"rMJ`%,,@Rg9@G?oI1X64-penaDEt$b.j^;7ZF&9#1DoSTNl\LU>1F:O83&>"o2hZO.-ffs8cu@N;,$8SYaPYcLICG_7(,\C7t<jf(*`f/%&LmfR0JaCM('FFJ:k/_@[MLop(7e!5OHt:t>'(B2nWiI^NE'-4.V(96<=FINj_;Ph_l9O[1_t^G&^:I>9>b3MR9`[u_KQpnO[9cG%'2(CiARfED&*AK(m*[&<Kh8!`!qp(<;+0-5KL)3Hg-lN=&#]e2CY*J->BPHhD@fEl"eeacm6IBKZ4<gC/8J6E,Xo,f+PF0pNjCJY%e1_*o?\UljG#9iiA4NPf2ulNn"]nal`\JpqeQRZ,716-"[be9Z4ZF?C!i*.b!6Mlg29%UUZ4$rO?^>H95]U"\EQ"@KLudG!!Cs-C%2FLU0N5MqgS<0G<1<>kMQU+Zn\mdEAdLJ!`OY)qOdV:UNj]93M=?=a5Lu?tiC(\:fEgH),LgL3,j>iX+2O510@S]SC>GftR&kFu/%OLRQKd_i=8('N:n&QWQO(=EcF[cK9b$In8q,ej=D!Pu$+I07Abo+&#3:HB18g5Y2_+I6',^B#'GBT+SXX%bRX]TOPhqC)WTQ3RHp%i+;3(?sm-EEWK>_'0-\9nWrq0M2ai=<\<D7@VKA1<^foCV%GHOOY)4(&c'H1RPnb4fs+.;+sqSG*l5TYi,?/>#fp-e#B1:r)Di:T%#64rH"2TQUoECD"?u3Xmfte!V<%A#I<"_Z0CbUfJ5eI=6K>LeX%G28L@R;&G<?nW]*FN9j,oS(d=DNiDf"B..!>We6<pTrc;7.St%7Na,]_Dp5Ke_)Yh`*4^nWrWX0dhYBB,$L@qAQok"S?WigXt.@7>#3)H:R3Ct*;3os^bQ7c7?LU1J=mVcciC*8,[:O%_haHj=/f4,%%t"a\5n_9l'Wc(RW=d-k]Np?"Whpp,@.<PKSKi8D:^iqm%5K>al3tH3$FHOTe0&3F&]P0rGY)#t-5Ac`C[@?s!M,GY&qS4O(FP%e%:7?r=gf0Q8)5]q<+KUFiS<Yr33@`,s0\[k85:2a1c,hXp+mp)gD.G#HA5<i?U(A`tJcQ5@7A-WY<ADJJM]m'Z_IP0l@O5emYll9_%To^sk+Bp@`a)[um7<l*\.`i2T(1Z]AODLX>1`:t^b"DPU4%.,7_DIk"/.ur[ARa[BF(8nZ<lFqk6*es'.u2.2L$'/-8[ih5^.XBq%Lo3"OAh70>(ID7c%T(*j*#bd:m9JE"HBPC>!n]P:AJ@5$Vh#AEd3O:%Ju(okBS.iX2aph!CP2hJ^a,.5`QfB13)V%60^;(phF_0p%GE?EI,ST7?Z4SH?F9+*WQ8t7s-R@L5YS<:t[2\TF1:;'P%03Z=5n,?tJrhC:CeiAS>bn2/:aCbU^0!#+Y_3d5'UH6,M5\ip&fP!c%ohPY2Rn5K-6nMeil'<<P,"%T+qc/Jf,W?-d=aQ&,pg=guS7FY5i_@4U`nH3RA-D4%K3C@p#S]b8MU^/oeh4:kiYcIT%a&FMgl^Ta%WY!<-[#dj%%`'VJo2[<&OVQT=Klpu2]>2LMV.*g9"AYUD8L6qR"Nln/=>7$qUr8&-6=P+G?<@u>)iKFj7nR>0=X^4b&57_@&@7B'%RRjgq$^$O!$PY(#S-1NB93TY/aaq9A_35(f#id3LHr;@E@p74fKn?=/V,a+g2\o6o<jgZ))#k-a6Td!#@r]qi":Nnh5bSfD&57VZ%Q@Qk&YnSJR(._J?X@Idd?,[^!,]tS*'P5Dr6kgo`+Y_1kQ&2Rt(`:+);J?<8/Frp3Zr@FnBO!Sr3EBfV(kc!km$]j]YXFET-CMA;%[)U>:lF97V`sI^k%[).MTF>uq=BVj8o44nk_Ee(!j\X>7d)L/`!^[)kAjj6g9f5J<%5K,bBpCPP_c7&+W<,`&(9C,0&D(*kloZXD%4C(60bbPf,et5gA3MW8qh9$;17A,>V!5SZXTS@?LWuqc0A]6u8W4)p7(#FO^4IKEZ#=5+8Kl#lWf%u:Aqt<ucW'Gr+j@Of]0M*I8%BXhEbgT<oFn3a4LZ;mokA[5PHZfm.f7A0N^OOHk(23/B0C^H>b+lc=o%DWsC^d'5H$`;8q&"rr'BbIIdS5jOfO>+ZEe-u11$ORZ7%[;^,P/OOa@"L?^@:l/3cnaHN38=!??kckB/cFL2UeZ.J8`l>5`nA*M)2qHjiftrsV$H%9PZHiY-La4rAA!:#PWT$sVQ0?s!Fm@n@%!a%pG<qI6anE9/6Rh>#0Th()-R%:4h<?riWej0s93>N)Z+LA@0Ka8to<d)<1AH]'&.'U!>W"iDRX"o!2bMq!`&8Qs;MU;k6afZtR%EZ`Q9"M1oh@'st#>3-U%818Jr1\4#.aZ(J:4%HuD<M%,CQri\7M9RlCZoKXF,IK5:lRgKt174MlE]NQKgQc:NV0,e+(0dnL,RT]6%g3?Fc;:'YmW=)$1$RekRK+*pl)^Go[amK:,KL#0cS.r2c5+GW(5UZcH(=P*9_6XB*AFHRT&j<^STdA%<)'h0Y;XhL&8[>Y\2eAZ+%6=jTm*)B+V]`mGmOptko![U[+(..QT&)EVWT[4@j9]-s`g!tfY$lq,aM1F,C"TsWZ(aKd5)3'2Z7\CT'cn8<l%]uj(O>Y-i%8Dig%n-[ujLf8m>M:`Jlnq==]+P'S#_pJ6Q<gSaj=hB\6SfAs(^f/ne_dU>;9@hsu"iW[Q1st,<-PSZL01k/=-j41g`/fi\Tqk4<Q%q1V%@"`\Ch#SHMM,$`B"il!m:k9Zm(s\Y%.3rKHT&:d5\NXr*RFb8NIECD8@>AlRkGMjg^lU0//=+J_`(7[+L)!1Ij)GUpZ8p]=G<diK%@O9a#"TpF%$+/t^KONu"O[iiQQPaFs^i3oo9CE?OE*j!*""2&GbZY(jS.-Gh!LX*]o>,5D9Z!HK"GW0J9;^Q41U!M5\;#'%,s64(%hUSn/&tWWB`E/3HO]*nqm;iQP'S5[u4/'/EW*5Eh;C]e1?cFP@2Cq$9q_g8eU*i_":o?dU"77%f2:U%t9b*OZrM\^;3?9"EHWKKq%W&Ya@hpCWskBR1g=JrXT;6)QZkFm#<aFhBj3lK-KEujfSdtuJ21>8>/&-!'Ved8\$42*BM*@cXS3`Ht%e5i_R:g45H1_!E,N5r^c%#6qXWA-&[j#H'WtZK33e=<P&SYKYsCZ&H<dU1@\q,R%RVon^I%Rek-.BV\-:E'Hc\s!Qh8EJao5</g]c/4\&3<="ef0:+t><6e6J%Ld<<`,_@nZJ/d62EpYY!W,4@sOWcRCl&I%*A<:[7bc&iXOJlWD$E4-KK7QV2+lf7TH:3OMLnin=4IR*c:69,\rg\C=5f1tRfN9H)%X$%-5s)7>]<\8$K1pJG'h]ZnF>(SC)A:D&T:0Jc2O:[j!jcq67MOoCEDGdN.;/`Z5%Mii^^%3o>LCM^V)qtrT_EH]!mI8eAQ0/m&%h6l(Fa;kB'/4[09T$k3qq'kJI)%/S&/;/q/*>*-qhd&2:N\A.l).;XVO'ga+qh1!ja#h/X>4Zkn'=5>/'p!?1i--l9:XaC,p27&I%M--t`a\O^A#qKZdl,-17Vu?9%:8FEPocN([(Li%n.tU"<?Io[Y/E?JMQ/Na7(3s5G*(tce[hs8>W1R*MjsR\(T6J-Q,id.@\RqAW%c9c9DcZt#0:DB(=o*JbWX6&.JEYJG^2CK<)5R#c/?+QhPDo,BdPVA3^;:b\G](`X5(R:@)7Z1bl>oge<#D:V8CiZr*c%kr\AA$LI%&f`S:k\..D`$(#_`/"!UYBHA+%k7Ee/aA1k6p(p7b;]&W(@`aa<$gr_V-bK"!\usq5-?!rrlLb+b9cc)Qh.raPDK"]94X-sb/Ure%4Zpa;2+-L">Hj>.fp'gG2h0C2=UOi`K>'kp%T):,_'osUl1*aPWKk0S%"';/52si&i=[keolN:DGro?0pIXKX_4M,^NO1Hs'8B1?%;1@65W%s1QaJI;(oVULM3!OcNDFJO.SieYLG_2^Q_P21WM*/j.LHe5\W]]g6;CUHa)b;-`UYM9E=TN38rHU5,IsI/?`XN`-\(CFi%_""Ncdu,p!,W>(9H5C_>HFa&R=M#9jqQad<E7moJ&"M(I."fl)*,CA4XcjF$K+bajYtGR'nI\@sl__&d@&lWV^<0pW[s&VkCrXY>%-I_D[jaBr_Z?glhjqBJ.(=*)q6sV_9@ic0g?h&<-_CfWoG*rCaok&CmCS9naj)[B*SsJUD]Y:P8,ljlI@g"h/b7@lm[,,:q+V.FV%=!,jOA*c.t'Zg[4R63(b9/^<"4r->`[km<u(@g4IjdT2O]nFm)#T!?F:7n?V^]WQco=@\,8`@G00>``b]NqE<@7>[Z+1_&Lk<287%QgmQF@6KQKn[JK*+AMa6Z3p_VgT(aed!4-5T4L-Vg`s<-6e8`:QT)KDMI/R()ek;bh[CH#,Z^DI%/Z3r3a]AZ!0FY_Qg&p]4ftb4%WR%Y!YL5Pg"tF6Mb7T!0;WGDO/<P?pOY`tHFT>o9F(+;-I?F&m[N!oCHoFNHN'>YS^HTFX#,+[u+LH6_n"6G%Z2.ZR$Nl]$^C3O4%68]F@9gV]*42%KXdO(4[mqFG]3Iq&nlMk"q&>riQB))4#--CKh_ZT.)\Z>IkbQ0kVo9=N3e]@pPAa!5d-!p&\Ene=C18Cmm8bE3g%6>Ka2O#;k^DBT[c<r8Q4T:_^!`J_t;-h$29@^!o0nrpfci_@PMbi>7ITR7bA[lK`>o@P-7iHac#jmdHmX^iJor$(1QpajD79).f6%d!\B8]F\)",m+/+%p_1B2<dB?E@bBED8a@;dSE]L[:a[F?:U?($m'haUrjLJ^R`-KX)G^IaI,i4q2H%qGMbNN,C)=#E\q-QGpE!l%n&+<C4c`P,H$\Z!161P^]qhYNI(g[e*knp&c9g3MElGn4kOr*!<ap>?Ab+2;IDGQ:>`IUkiuhtLaMSGUO\b5>B>`Y1+p6idcHF][%:@n9!"7Y/lI2=$>gOAbF8E;1mnJE?a+o*+=Gl[?hnUm`bHrsLsoD#Q/*qqm8[`@QWOkn1pG+e+<*_V#tLE96LjbL!DHaT2O"^prd%j(7mhAn`n]F^VB$9=d_e/Z9CYFA.[\Kb$8UTDl2d^=f7+Fm?[40YO+1l&.A'T!nRGr7jdAbP]4C=QAfH_NgL,mYAh;?I]L5P<.R!%^kX$'X9'IbcU6OENmWd+*n7M#Upmb_)\#?I/7.1hhOF5[rT<bDl?Y8WgEh4gpqq<'])D=W+7o@R],0%^e0ikKO8:ir/m#Q#)E%7d%GbC/QRjE.V3LZoIFgsW*nAc^M,kH$Sq:W*()'WgY=*nE\]F+d#)>)CHIb*$Kc[QOuQpkZ$)$`Ht+&YOXM`4_o*#3L1]S<F8:^g'O%l:)n!nX8]0jomEkop5^`JDRk"Feca@V<l!:9Us+>,7HIFMEq7u;nW03[Ve=>6rcMgE1'm25XI5[Fr^ZU<P'$O&b*/)>bnKSS?)_u%#kTXtMYbTB;T+-on%-i!r9?.O(.C6]g'n7]FALfL-WB&U.!F3pp&S,&7@TbI109(p+KWGZh_e[KkkUNR%VUEQ"%Q?U5Rs_Lm3.+!%Lm%c[03;TgVp/"%qhAH6GRMg/m>sG>S(D*??..95a\hrFHd`d#[F6/GB7TRD)516?Qr;"e!Uo=flX`[iE-&o.<?WB`6!5a0.sQEB%-TH=3$0XpuMMq7+&(#(jk0YOXI[tpD%b.b.pUefq9[1!0?UY_mB%&._kt9^8kcAR=*\"sd10L_g"QOa:,.:O*`ksm_8X7nYmu-Ve%37[7g@U1q9(7aIn*;eVM^HKi=ZhQN]E-6g<Gl)B@i%%&I)IlF>YVWX+:Yr`pr1bfQ[Zje8)!$2%^%+dT%l-etHp"rD<X^0tO^>W)%h,hmd6!sTeHWTSKBH\Q%G\&FA[`RMGbY8CH\K)g?SMN0h:1p:V_CM917te@D4VC=U.Y[*^XfdqtoqeiD=T,(o+_PZU#EQ-N7&Hq?%#$Z9X(]^O-73B)@FUOnHokob;PEo4V@85+a!7q/HMtE)tA:Jof%0088WLp$=+g\K891Zo%XQZL>s/NZ9.<J0Ss$`=(-;A`h>DX_W%P*(<KQMZkf)f*URgtJSD#e"N7s8(1fr<me;BH^IlK7_bA;;Vgp+VY-t7Z]+b'F9Bmf)nT3KT>"=+VoAAHcctZ0&^]12\UN@..q8,%nZb,BjXdJsb^1'-@?m/D?;uVs)(Wj_+Cq0`']M\iErjo,!S[VDjFu23;o%hDcl.I!5c.DeLCrbN"VlXa>=C"i"<O$!7\>a:YD^OU%U6/<<6G<X9!"d<d`!L7.?<"k%mPc&2R[`>[_Z+S'LVF*JRS\\I"PV7t"/K0K'MHK5f$[Fbo%J(PlN=H!D:%5ir2,N]l:=9Q)#9[K%);LkC[<^SCA+Hq+Du=@EHasDeUj-Xbj,0qM^`/<nQq&%Ve)=sqH8K+,mNk1.BXm0UG/5chZ?^5AVZMuB0qlAt(6EHt"614!5)j4C%5_JmpVP<SG,b.]bPa0<HqO6/=PXh#L>eZVVG3BO7nM^HZIWDA$'dh#42tN947_eE*Ne+%)%+W.%f.C`Fi!$T%!G0X.ml_)M%6t'6%1^+UOf#"PMKL;gqX`"uuF"gu"l0d@BC.@G\pYD`k#I8q1\][M8=#/>?aQ4$Pi1@kL6$,kKq<[VK"c^D$6,LDr=/"$HPj7b'7JM;4%\5&Fd,gV74johL)msKe*J3E)l7rYi6X;VI.2(T8/B!TNNik+Be/LCh'1l#VO+ndb$J+:,=BN+R[m^oMlKNXMu[CHIbmo11ZMc7PF%6i\0'cGG3D"E>#C)QV0U#"Z41Rd$m)io/K:;E<@gW65HU<dt#:OrjunMTC3g3W2]s?7O6YnVrS(7P0W%g8N#[?D`\fYn0nbOU04>%>lVtS52's1<gLpd9P:&JaT+Cn"j'k*4:gY(@;NbT!^,OFfC[2gK_mU3I('EsMQ$?tEQ(Xb<YAT8R\Q0>co/Sh6WGEGJ\LfQ'dAPb%k0>JeQn9TLBeJ'J]57gDH?6YA#$8Z7Q<Mq]aP5pYI<dc60M)5m0B^gArD0'bYQ%9b4b4:e.hs*g/CoZJbXStZ\RqCdP#Mj"9Zt*1%n0O%H-PV<u354li0ahM\BnC-$88q]\W<45d?KR&p1NV`M6T,ZocW"FA*D*.8Q*X%<L3nZP-(o@8XuqSa&Br&_T*]<^*Cs/iU*>/4%pYW$G#8R5ip7kZ"/f1*I;5$*9G&or@!?'-@h)o>;`o(O6?a:t](Mq,a0IhO`Kn7p`YPW2Q6"k#rnD,I,k&aX)CRc&0l`sar3(`Z"%X>5q:iW;sE)F]Uj\SfJFlplRaoB'0qNp0SaXD!\BXG`tiT"L*$&&h3fI.+sh,kt_MnN/@3k#'L!!p7UD[.W/[TBDS\Q!s_S303O2%!m#M9?Lni5@Q;ALnJPDA!bGuI^@:t'`[e8[m]0F.8Kc+pZl?N@V]ccg$JG.9/tuRdL(CK%bPF03Z/oKh8ICGMGHQ=edhSQE"EAV"%\L3`F,:QPW&nZ1["Q5Q_L.pFXO$4e`C4-f2q!":VI)If.aZ*9le&UWHcOYrnIe;r,Qb):_K`XX#`7V$jAf"om!ab5U40+-'e^FA]%>t,O`o((Fj9aM*8a5X%KX<cf?Y8h%Xc'\IMBUjlK[04Ym.-iun:ipZ+fLFDIb?"3BG,7.fF153_rODW1#Y.+9);fbRUXOb:9L]Di%>p%rm3tAU$\$\Q%.GH/]>Fe5R8TAs65/6d]*)74f@CFdmCbb2QP:uFm]q4AFS%iLNqYmX\Y$I4*jE^g`%tUi6lR9%c@)S0pJ@$Rp%WB<]l(.#pIhiB=EQ;(A%;)T]R/dN\.EdKC>TsZRC18;+X<dgj5k6<PDXT-.FiqOZ9T&L7i;)uQTZKR.;68J]Q7#,4-M(%R&f\<$H%F0@#u,SXYFouT5#/p]I;T=#&'`DM"(*N\)cQC_qGR5VHb;,S&3n\uQ7>n3F-r8#W[!NBOJF>ZB$cE;s,aRuE;Bs).S01>J]n#G2E%E9[1_'mV?olp\4NJ[f/5`/,uBAQ2/[ePj"i!<o6#,@rZH&b"`c[3[js/u+dF9Kf7bfY6Kp]64=&d<"2mc"a,qK#NkBLM]2aHMGlT%5s>KV;@g&UbBX&0NX:cH8FPInDClu!Y%U?",Hu^MjR1'MrOn+jr_cFY2Y2sLU/W.6;8oeNZ#$UfX[n84MAeIuo*7buTacV;ooMiO%olBIPZ=HI8*rGY3R^-o-'o'2f84o_FgKgp!7c>IFZ+RJ3<P;p@BYJg1EHQrXpY@(&A%'umaR,s##DeL#>qj?'<m<6B[&b*FD[(P!%n]-g\5^Tpc<S.+BoA77cc'p2`6jhGSYt4kk2,D,T270%OC9FukfUT6"eHjiInMm=3W"1F('cs-=8?fR['V=d-rp0>eD<;/_foWEj%;%>nQEk>cR298)f3;>&V=3F*hno4YD/=NN%9k0.E.K7<UnQW"F*m0qbdGE'WT=hR&jp]jA%r"23(?E_GAT3GF\!8a]")K:Z"/lKl%dm)lGDhd(J>Y[CBMph^A&e"pBl*WRelG?@0*A3j#*plDrjRj360HhJ5Jceb?pa8SrY)VXSOMPA_ccO_>82-mGl7q6Ai.Oc,S:id8%5<Ej^bh:OZ)ouB9lcA%l]gf/]C-F4:B=Xa_4RTA<NY-Q5Tjn;\>ILZ`/#"#UFnaDUcRX;=@sZ2$U,V\lqfOQ5$Zi\8CX3rW-,3Y6%=<XJH6C>=NdLI=)H?02f#;"ZV3M,13M&;;DU$73Q.g%RAhZ%TIULVm(KU<t2_qR"#QO->sMd.4E@@a!`XC[$U^WCcsTs\'gG"0KM%M8'LnTOs0_8+,'1oh2TCaPe+Ka"FR'k(d2iVLKnpf_6'TC,KQ<&_%l(O"A3Q^YO**]>4S#G9a9sejJ"J[A(8)Q.0`.B$;qT+LjrZ%NG'[WfU,1"VB-^raY7K4XJ;di[hL-/a@P]8@_Y*@]ag-[L!-WVDupT6<)4kc%8`?(e!M*4/>t!2B*3UZg8@A/W$rgD3d[1L[k-:J%L*5o9-P>@;hOtH/p2XY.%,'*ATQD^>,cG4517i$hRJbjD<sDPQID>^<6h^HA-Rj$4%%JPC[tYRmZf^Fso3q+!OM_33[:p<%PRATO%_4@8P2#JFN?qV%lrpb"T!:R>mH(bR;^/nE;Ag.jGR$^*RERf6`POsd03\Gsn&L/3)0eF=]boclUP$0s^]*2$Tpl:'Qi`S9Wor!#s%r"TnmGa,fp<;1i*^1Ms&"bP_qK<>2DMl^2@bKP33U:;mVJ>@_[4-F*Q1W0VIT/[=YOro7#%VT1:YN/P'<>Ods[Re53<D7"u+R/I<%qVsrgY<Y@/.1'OL888<$FYWaBi%L2Y%#Y4a%A.e3,0M+3]V]6*.9"`*7):0*3([,o+k1EGE3VJJH,tkm1/1i5?]d!\RCep;DB'^-%,eP!?JKj+Z$T8e;ihB-"JC[XE6HCOD7Vn_ig_tkp%.fgBN-$#g#XYmBNJYV&*I^%a$/80[,IGW[\jncFIP('W6K=ca%pYc(X1RA*%>B^2<SL!.$;sTQ)R#_8$=YTqSgW`;GZHR<j>sk9YM>Yh-@dF-cL.I/_:=0T8jEQLnD,9cAj26_C%YP@H0.q]#duk0f2ut!kl80V3%VcO2eE?Fd8[H)FH9XTJ$W\uT2^K]PS-[pq:q7FBp9`+S\eGeJMs7%2FIJ_4^s5W".>FlG)6I#TQAYPMNW]lVGEI'98E>t-[?+&^_%(E(f74fE!BdU9ZWILZY0a?]VR"%2/?h%/b4j[n,<KRbD/Gc2k9=(#k$a.*ke(?H-(>Ep,,,"j,kKMW#I=i2Sb""@Zb#6GB0ZP0PS%a^t"k49SZpJ555;F+19U'YPXD4Kc%U93cmQZC9)1[\4`S6i7?D6m&W=Z%b>siH8R&&]14U.D,\Y30hR0QFuZBX=lZM#j6f0^nqC)%912Dqi0gI0Md">#;/`anbE1(jN3MoBmY]AV*.VI=HG%CNkqe%S6`P:V;Pb`'F@T[5YBit1UbWgqc;-[:RlT:)o5inT7CLPKp"%$)%WGXE;WfD`Y?95e3/Bc+$;^F]%P'.Uk/m3W<pA_QP9INrGWeQ3u,[V?'(rsV7dA7GAEkpBamD';<K@P15Xn)ot\QsP"`"Hc.NnWKV%=6X"pKluUEhqG:d5mg_8_OQh@e,8jE/IS>i`Zk3EO]lGXEgqjiI$_3Z?Ncc3/ld8?i(6M[]#4nX(Mo,;,20.l$7D:tE]@Be=heLg%*h4O*3&7jG4'a+l'_O.c(r1KX$3%s(%;a-"k-';OaV['PpH]Q\;IQ#C)UrSY`.U+U2BtMcRV[RC4S7\hokeSF:)\1p5T[a\4@gj'%094kH%G$[WYD]Q$V_&@CbsWuKhC+NEq$]M6QQc(m,h<!ogH,>Q??PI`e\9ma%oJ`-Bgd"SN@V$_^@3p\G"`j3'Ud9e]K)<Q/Fme/%U.FG>[>WBG@HloKR\jI5Bb&l3=+;:sZ/4N]F<*8)_2)&$r@q^Vc"i0fbX-/7cgVcB(UVd19?Zh4#=1XK`G@@=B\V?YB9U6u831-`%>8f?`AjPkFgsWq0]0,P[?E<TT&\o^+gh+3A5t2VaNKSfB^*ks2\26+,ZgaqHP85iZIPQH5YV[u5>7@(844JF_K#('f$/iupY?cp5%;XJ=uq/CDU$&R;N*/&ZIru<B*^a[/^]ntl6N<dd=H/^+OL":'!2>Cb3i<MXp<Q*OLSViC_60P]([=mF`M3*ftBg"KCa>uB0D&8n_%0+ROsIW7rk)Q.t&%#ea_'.J@+eH.a]/^\:TnY!munhM%272]9,B@\^"_*!1/eF,suq)'6lk]KJAjZSCUM#?J^ktS&NVTN?l*u)M$%8W'a^J$KY#"=^;1,fL+Y^31Rl@7$-@8S^lk\V6<:M^d#VIhm<e;C-/iLE]5E]4=8lBdQ090dL6IQ`l:#?[;DFIJUd9=e75`$%a]J%75Fu^9&a@+d6OtE1UfR$r!K`a68+e6#bmZIFG]mL7:2AaJQVc][#T,55h&i_=<i8pHspje]LXRf5F=Do>+U.UJ3_\Q@iVq+/"X+(%R[q.q;fOR]#pe3dWVP6rc)s(+&Lm%H\fj?e0s.>.rItNeiherdBP(6"28$HmA=djmDeaS="PP6mDFS*$<sLF7Hm=;HqU(I3Lbt:;%#@>iH>4V9@'8`j)NqUXEZH<`tjWoC!2n<W/B;;hIjcdFI3c^ZIVMK_!eh53:p1q]1=`_kAe4JY7P>3AkPD/Wamm.+<-j/9l1-kpV%=!arepD+l>W&W@!qslRY:\)p[0/kF-c=CS)rTHkM2'AA4X(4<u0c\8<]5PF5+Wl?_\SUc$V:R%]rg%!*g!=-5PEAcsT\O#a)UbKn%jX!jPJ$Qgh2$Hu-M)EfERVBfo1_]R3Q"VEH'k(/W%5psZ3Gg*#-Rdb+.S?9`DC/a4gGEKk[JN9G-?hoY9k"?@n%QftEN[]nSrHEs%k3XW]FoU)neZ_@?1;%.nQF`Q4>i-Gtn8CD>J2Sg[>\4.[Bj!@':*&C[m/99)q<Z7V9Gb_2+^>UD=f-WV?$2-FeX]L=jL)qbeigRb%:$>9)EaN]X'niUGr$EW<G;$DN$IBE1cDo',fV2Y6U6qKC2tqj'9ADjU0j+GaBji$Z(qst_#F^B%EeCR,8668_/OXJ?k5m#hnHR0\%Gdk#41.X":[fI>>l*;e!d;P$Q&l'6&A,EP)WIfo.Y/WV6F'e2:#^<MLQFlM7W>JGNWBI9(5fA!+1lj%B'0AB7P,b.nhap?jP/QO.%e:Z__+E4>k00h;e"e;^**mA`381-ti[euL+$HB<nPi)QO.FR7ScS`stf>p])?pb@_NZ"1[N=8S<?6*r6V#?"K7<&FA_W7M(rI,u'%/Kh0NQ9<qXefY0u=Nq'F9+RX(M`#jgJ<i@*>(jK7l`aM[*)`^2`Rg6S7f(bdK9KGTL5">l%Q@:dEhQ5a8!@b8UnP7Q:'Q$-B!Y5E%op4qGZ\$3E,FJu9@O!aCP<^&-oDjR-p3<!f_&cij[;@2!o*ug:/N.]idP_6nBBE_pZ0W/.$W5tN:"XE.jE)R9\YNf:5R3g/R\sth%3)$``?nq>?/"RSXA/X<9,K&q=JsE9(kX)R`b+[E9K;`93GAnd]oHRUF?c\$>203c41h?GQPDkGt%Yn(63#!3(.KqkY3oH)%e8udO%A9FFa/`XBX:QPfUOs_$Q!2XN/LdP("()Dq-4Wb^2`qI5mk4.SCUk7c>O6f3CkT<+1dLP0J),%c->9/=;?@\,+,_LQ*[IUhVF:B4c%g?6jI13U7]0lhH3+KZaoHUCMNANDanisK,7!\LSDmac9_1nsXO.$ZbI;JPGX9n6P]":'sH,u[07*7g@C2R,3hZrtO64Okt"(J@e9%*B)IFQ=iqV9VtQ'1,=F>CNO@;3TrWA^>)tYK-XZe`ArtU,2]kGM=O@h)s#S*CcfOeBFHg]>,1H7d["BMX,3@hFsg54N".^UT;Pf5%fZ!.&7YC63Ud"-Rk(U!uK0VPm]#]&9Tn?6d3oq9]8DV!aa"]gb,j'i_WQR`7MaQ+&B1YW#if;"+6)LhQEfB+hCb?-)np:,V_ZhV6%>`G@-OO2mo40s5-EoO+TA@Og>RL&/F-/C#IL2$\6Ucko(gIp0QBUmm#FaD=)j/uAa<<QQqDR['B?ocr<ZPdh8Jms>IYk?-99qQ[8%;?]*o#pi9sR<LSh]GQL=h=!f+%N2/-h,Ae5BJ'N@XteC3W<s(qg;37uJcJ<g`e.A>U\0DpZR-R5S.tA3PR"4$M1&c:Up0[D.5q)8%5++0ad"c^Z+5F!obAM!0)Cu$AFTksgmQQ]0f[UR]iKKZ7G_DD#:1Yu4?Nir0=8NTM0GV_:[P\+]Tt4SCm_,)G%-8LC$*hSQg_$u@%e3#Fg_B*[IM9!R.%"YsMeU_qfE#!LKqm.FB_6U=R%)P#cK/8g3">/E.HP*.0b_+87B=\9>Yj28CNg_aX)@5`0Nk#GP9u[VCBVpd0%L*o?^7-6E'A<eAok1CFD@pba!ktlQQUDS_KC=a3>/.1P@ji3YsV2'.%#kHA!UMMi2'ZL1o__SW$JIF@6=a.'d=s(s6JCp#>^5?9f%E/stV/#t]ALIt#e@gW_")R5Es`EL%4q-/6_.at`)o]<]LA``.p,\/-IMXG;VWA`RPA12MR5,jsATJ+L.bp]SV3^t?rof\Srk7KN#%$=qVoZaC8C,'t[(:aH/RSk>H(^cmhO.Ao'FEboTO4H,^QQft'qj@KASlTM\caGSl7>3J@&']pNHX9DSHGF9_/m#qi"$N8(aNGLZY%DZP-SYI]l#::)+T^gupr=e>c5WAYLgZ=3<cObAhcEoQf;dsko=S_>.6E(56Q].A\.h[@lEfos""0aUgDV1=P7"!@<Ri[GK5QXSVn%)?RM7ZT[,^dm0(Uii=/IE2]!1d6tqbhnS/PeX4.Zeq&MA(dg/-iP)9RP1n'KBqD0Tl8XuqVSKmOW(NFI.?WUPUgslh!(@?Wnfsst%^A:GkZ>cKFfo#VB;AO;FJ)rEO1h>hdW"<V9hS,Iu*7]ZQMbA,b[Ms9P8ZopdfiZ6qp6^k?p6k,ZG42@fFjs:\rM9B'L>X_GP'o58%AfGT/rf4+6.')X;q8$fPR$.YtW[f)PLAKi"gc><6,s_UrRMm[1UOhVPUsV[?T3uGVa?"Yk-l]6-"JgfB&,\j?J9eK1XAJ,MrEe,u%m;*L+]61o0#sSp\E`go:?EtH!]"S=\9$FUsWZ,i*ohD:PND,?G-*3n8ho&4;\d)^PM4j?rf-u@<d$!L$*gVNPf\%r92!>%%.Y_eZ%-5/Ft%^A.bYG]V%$dc</XIS5Bad.+WRaGY?!DDd%-&`0SB1E`SSNf;/U1?;rD*8&&)/L_N=a\lPYBH"sOlp!fr`FD$SV$28]@B#q%Grr0blVu";pp*M@4XElgVk<\?Q&ulb!1[pbTph2?+YepC_*`=_TmmB10]XJ]iHX!B)Z;-II9-$TWOW4g1,A24X_%`qJi:a5(iBM]%3YMX0#r0`HKiCX]1YDtF]$iOAn<XP?n'5[.XWM*#DJ)GQ's/>d4`+K(,5'(G`7GUm26Z)>frRIiS)E4A)<.qdgl-ST^\V*uW3FM)%6WqkZA_ih_I,,g*d2Z!/Bke^1#ndb(A7\DW9bhG%VE/=96NXVl4R&Cs'RUdL'dr_g4)/\CV2eUMN`63R.I'OtcTlN>13SGEXI^Qp%"cL@qk(I]C"dqOA:Yn73Y7u#L4/`noi`'0:<?JL:mRau=XK"%QY7(T"<W+[;rG;.Td,O3K/J@9hTNj>jG!4:lip[.VWmRS-)>#%1%Bm+"oZ[[dE5\/nGl#u\.e4p<:\emrQap*u)Cl;sHnm5E]91"pLn>cdKq"VPQ1rmE%n>$kNbUW]umF[:[rg"SUDmaFe8?;90clY0<%:oOl4#EM]j+uijdU\Y^7;c'okO^3mQn'JaBAr2rfC9s[J2]8oo5;sOP+2et(JKQqghD`O5\$TM:%la3r[_^n/UI"[V_F[EJUgT&a%RD^9'd_#fMr7(T0%6>1o%#/kD&eq_t`ICHE+;s)*fE1Q1;0Wj!]M0G%a_6hO,("5?O-.:Y@)$VtP/<V*H"@G?-EI!uo?kcs(*&!i%n'+dl_9"sY]k"r"?+/Fu.B<k2(3l?5UH.UKGIT@%8sp*mg6;f,N-I6K2M\p3Ed"osmVmlWAt2_n$=/ka1YCXi2K?/]-\b&EX2Zd?%h&hpe&m`+Zd3)=(iO:i^SC56U&DFSM!EhC9[_#k84is3!hD5Dm9k6uIY&r>$].92!AkGJ:**S56#8B*q\ielfju3t7$#IS%:hlc,%-d(etX95W,.`6jd_UTS2C`Npl!GL>M0+?8\:kg$7P0MtO8ET*)3t(D"-/eldeL?K:a(X];0=6/`.SB8.Wn]UB8W-P4O=="!W7&Ck%bBH``L[dB!&KnN.4aK#J9q%]l,V!=L\B9E9Z/1jBbUf.:?l^%@a3$*bnsW(\QfbKZU.9[7kR:BE(S`PjU]`KeXF/?thcm7I1?.@U%@IT"%MP3JIm2B;S7@FL=-ET]&?B`rZiS?"e-q).4RE(1li@\NS7eYUUA_f:@P&5.O0eQ3=lh\0F80q$a>2GQl7ErH2S<!_XZ`+<K%W@tg.CHbp%=B#R87R/b?StAh"BOiG-#oBRM<`m9q5iH-l^*7X-e64@EXXkf`gLtm,VF_.Q3-RLQB"qHH)a`%7_S_HCp?/G;B7fM[%Tn8%11e]Nqgkm%%n,D%+omoulrM:<7!($M.5%f?/hAOZaOH$V@+Mh-B%pf08Yqb*<fo'A'oR/AiEY.bk3b<SrG345[;J)LA$[c$L%Wnb\M8th54@+?HFKA=E_,;@09HY^'a#2F32DrD$Sj07K"bK2dh[AVWbfTd#&d8I=VB(B,>dBP8>V.GbqM&'&Mr\Wd,c$eg]6-5nC%0X#:E@;DXk-6%%'9#>jaV]jJ8)03Z0d:mnu8s(c@BH94JeMJ$HAPeW*mGK.@=sRZaBki)b`/U0=>LR"`(M+$)SU8AEFU/'?Mj9@5%L)Ak+f'@5_PRk'JIZ8jG2d<)V7B&3>`_siq8@RT_h<@_fP[/^M&\?Y#:66'L"<#sfI?Q\GU)QJQg#/!AAS"gK=Xq#BD"1\q7(\K6%]r6Rn5=c+3LJ\pZ_,Y$eBhj2C;sge$m-WuEB8(M[oIP/\gt\6i_-A%2qt.3lJ!`gMDRm-H;/#)QjK6ij-CI0A_RMt[F'_`]]o'O7%2]OT@9<BUpq]Z(t&blUS"qL5m)lIaYP.Q95:/VZ%dVko/)4ZBSDtW.c##&i`IN#bF($b]bHHGUE[0U'_3JbCceU$hkSbE=!!-\mN%=XKn]+B9EBB1Ms7!>ij,@-cL>J7CZM(&uD)^O4[Q;4P]\#uA[%LMT##F@_AD4]ps(:"iH)mXQ$e#cnBmFXSp'6ABe,gfG.l/@O\q%4l^qRNq<.9%`5'SZ&ZZS_Vcd1/!Vrs>?tNo?QH9^goMaP\_:IaRto9^%D68JFP<gr@q_Ra*&RO6*+:!XJU*[*^W8\c]/A6K(ef4E%,YS1ReF!#;cmfBJ!qdei#$<l`>%3mU'.[D,;iNa$D*0c_p#_o..h&'naXg3j#ZSUcak58a4U)Ol20XQRKT3oF^]H'Ub65%Kj0>%>%8H>X8e:P.mCc9./QB?rnaoE#XWX@44GRW?2G&ho)iR\4fL,9&-ln#`K]!<g6Lkth<lic#6+^(`DRWh+l*/!7ZXMf#7Yql,T@k"FD%TWB(h^>Z`GSclH0jei-rJ\_H22U>!]2"eM!MC`TX^mg,\Smn5$m\c^,kZ;+lGMZ#?*l"TmZVi%%i-[<Y3Q56ahI`<H+Ika4%s\C_%PP@I9O\-VmoWt#J`UXl0RN+X/-p!(jL-&7A]!(Rc+@:Z*+Br+n&9Z1F+177YCpMSt)u90M&/_0(]a^BC_BqM/dE4IL&&C!_K*\9E%b"fFJMC't09cJhA5;YU65p9;?QMbL787TQ%PLu9I:/1GVmW&NCc:,*cPH.Z\Yf48#qIIOYguMk[rnVD,6=>lnFTI5tKni@/)aS>;%1lO<G7J*nd%+(=hSf_^8dh=gX1S+_2[7M;tfKfQtQAr^Ef"j;GS'475c"S,?da&i(&mp>i:Nd[k;OHOtTOQ^[dnm@lmrN7ASLU"/%]_AH&lUMrs"A9&F$D%I,DJf&UohlgYBnT[OVNm<\m!t0V_smYq2n/eSk1@Y$cj9&U%pISF@NBZQWGPKek'`1f(H31sR$J,A?&Ku,%Q%3O88Js%uVl8@/P_>4*Ad:A'0Gbj'aUGCXEH3(X]N$mrB%L:*SB>e'eIOA)9'!2t\p4oUVc4aEI4XEXNc$#U_L5Nd3(fNcReh7'%'ZM$XBFs\@gM,OhP%9f@YAcDk'Uk''h[r#.hS\UKU-H<'1A8JV[6k];-"6kLVC)ajNBB8k((DF`@I;Ph"<rtk;_,Ttq3^Y>G-63^%*U$pD^lm28dkBD-H=jK(!&$G9="Bo^89]T^H9,RsJ\ke)$-Bf]a09TqbBQ&TrCrjt9r;+po_C(U+\$er)J.hF\/b46`!!2CD<"$g%!gbQPc&P>2&:6+e6\\[F_%"^'MX.ILb#gKph2j67X8Ec*4(6%BQ)l+m2tCk1H3T<7+;0,_'?E]dnm>l&?$96P>sRtL%q8u6Z.DY$%0m-=!UXu2aI`N;j75`&_>X)CC78D<@afQGu("cse^qAL%rnIA+E5s2>)=4)T,t(fOH>(MGL=GW`.V$s4ZG/.^1E&+ZUKEPD7Slf;%,h%NCYn7Ic<7Iq%@nNTHLodfc"L^_K1C&p'&mLVpdb+D$Wbc'VZ`>7f79PhN!]Kd-/F0>+_:s,l294N(![_`s1DX#J7-W,LN"8an%$kd,3o>rq`10/Dk#>\=o8h<0X_9HrdYA2\TJX3;h+4SGnD@@h""$b7i+.CiPa@B2SVAT1-/e=nd<<=r5A(!%rW=Ist5rR&lAV[;a%)Qo\ob3YcLRLr$/PDl+4M3N4B>n+)sl8gT[+Qn*UMu8lF0cK]iRCm_B@OG@oZ7:jA"@!dM7ibDJ'&L,96l8QJAo0_6>X42]GSXbI%-6S7%SA_t'&GZ&6D)VL5c(ejP/%@*Apa;,sS7&?Dn>Ka`.KkQZIqG:p&N\6^=4U8</M=Lt5%6Ck5`*RkJTjI@%DgW86la'`Qr#$N%AlXejZHE\:#s+<e<s@E4A3p<qq,ET96$K3iQ<I)`:crNl$53Uo\YYZ\O@DV()PO::HM'_L3i)aJ+[WjB1.:e8a[[WaNku\`%L>lI%(*f-:oqOdS_g;3[/!$\M$;*&[-%,a;4t'r=E_24`7m\S@nV_p+>ZIL%S;jW-!B*S/"B`8PMmWm:04mr"?pCHFF[Gm&,]o\1)!rn:%X1AZ3@CL%n,KrcBo11=HFBjgun;&W+T*WOka3um%Fj,sUlBk`pfQkGn!G//=@;;t-h.4AL=*Z5V5pLI$>iKOGLdVjHk*)FU,om/e%LL(q&3hsRM3G/PPBGFm^<;h#4QEnZ'6Pgc.C-$?`"&WO$="r8"[6BI4!.:p52:J,jL:"0,$`$L=._9p%DUj^(+Z2LV)$WuIFU;Y]%i/4\Yf05MFaOb^D9`@B_E;rrTQ3W9$>o_0*60_Bh1eaRSH7^#n*h1Z8T.Wuk!h'qB&@rXq-(Eh[CuQ/>ZkCcj'dY;>RR?a0P-ku-%)4.iB:_1j@eP@A=nfRdaQSc%I;4!Aff/k/q@:7bX3T)2e=jP@P/DXQm`$$.9YcmHp,*h7m_[2?`[<9TKj(?DSL7=<cQo\S)'5<d]%5SOqoL=b';p+GTM2liUr\+ts?c0_r;WQp$_4iBAM9"[U]HLh^,%YA)RD,rXT:!P6TQ:j;E,/hPZCr@e55!fE\8<bW$2`(Lf.Ge=@%G,m+-?VZ.[#;M8?Ygt*&dgAhHMAdE0=-nDrak/e%aRBDV2L$]Z<'ZXf(g3*rV@F'63tqZ4d\^>pkeW.0r$=^rMB%PIH9a9j989f-%8VBCNd0Vr#(&5OBbU##qgq)?_-O'$L5?b-1L.@DI7-kJO&/ZZIQ5l!Tj2-[gbbcboUW,0PkiUJJlXtL*U438Hl"88'Tc$'bZmZ'H%;q=e*[4RlZ(YCK`o0<LFbVa5;1[)EF!$#RmU9X$F*Xj4^#,Fl%[*6pd:gSXMOY'Ya]8cVF3,Ud']j6B9J+mZT]h>L.*862A&*KsR%R]C%?hh-oPl4-<B&2TQuhrdR-9@<LLPtI?C<-mJ,?8fq;cj+qCF)Y^M]I3!UK'=@[^["3)O=MoRR/3+`=b65TfBO_:rV;*.6q`XV%#$;EAdE_47*(t,c&24H/,PdHh?`P?#7G4ic9QQb\`7IAf6pSDQg)dh'd9Xgij!^&Bb;]?A6JK#.>#C2*'O%aQLf-\/#90C]s.lWk%O[RjbfAEJ4Z7J`ki6s.(NWGdSR2(V),jPsp;TNhSk,C7kLMhLgQ#2\WA[C?H7h\j5I.'(-C72cHVdaFSFuF.*Z7gp8K:'>u!c6BF%Y[]/Z8!KHm+B%=\mNAJCG1QkupLbT<it_o"$Zco4Y[)E)P=BGcG!bnIC=SLKXm'[a0Kr\5<Gr8ih5*87^Gr#H[.12+cb?^%bdq=1%QYTJ;22_#il/ep*_E+"r-ACbcQI_`"";\c+=;o/>`n'eP$[b"c/2h%HiAN_5;Ip`hmJ^po3%3*^64qd18=V-pPG9I>@`PC=c.PT9%YtGm40pcXOFFB09Ga3QQG*g?"PN9Fd%W<AsY`hY^%OSS-FjlP_&)/#HFHdB;/X`%ZEhouinWU(qh9t;!?3f)EYcTsS<mp_f;No%V%8:#/"bP-R(lhlNS>'-XdURdBnJJeOc>mHn33MHDkn=d=E'*M7]@DN>J;a#d@lcsXH44kSF@o>4Bf$tJRRigIpU`K4)0sn&Jg]\N4%Vn7i^RP9h:C"3YM8_JdfdJg1aps(Y*D*.3"?BNuMJ;Vdl:a+Hi>+^97l$kk9nCq!oYF=CanRp:]7ds=:rnpQUqZs-uKYORnE7iP+%;L(b:VDR(:0ibFo=Oe,95#a3O7c/0]*A2BR`X]2EBIlD9(0qiF3$dD+dL`Op?pkk$I8nRJ4u[7tHU4Hn<EXr2#bC'dJu^P/Kptk@%#[J'tJ:]^&`%DpBHK7r?:Y2b#oW\!Eb_)TB%f<5HR9!.N2N.gujL&gac7qbt[1G`,KEGgb_46'WO,5d#CZ0*@AE\ldpHbqmHn;pW%#[g')&6f2"c'QMc&DUGncQ4R"K5N:>IeI0S.71XW<P)dZ`kYD75+G$@?UXQgFP2#*N\"$89c=oH)=I`^m+e<\W/B="]c/OQ1g8@@%h;PFCPQ#[-$;t:qfr]Eoc-fDPAN8/D$=0XUr\;,"jqunqE@Kn`]mA-.Hg?j$fk@-]FZ`Q^A9!1;A7._<l*Si1c$Pr4*`8T<bE3Ul%jNR)qS`sK\Zl^9BUM-'W[Au>^faF,Q/7jr\!,%1^eKo!%N0"_fM'%-pp<7&,!_(4`AVuE1<Yh>DnY,R/+*RTng#S8S!pQcm?Uq3c%&fpW<Qnh^gVIdKD\/9c'q-\p'G6USUS%qAkB4=jhS*'g>8+3^O/V/oH1coqN+h[p'^^7t;`uYW).*rGW0QR2$rrkaCg8ORFYYg#g%O*6H'5#JO&HH$74:kti:5CGiQM^H1A(-t<l3/ic+bN(gfJdK#tS))&*+Iq?o,'hl3q:%5^->H+0#g@IY'8:SA`LP3\/^?7\B^4(K%"F"$M"BrI`p:@r<F;,^_,lo?:IY,t:A$':GjD;"W*,mHDOeXR#RRDfMG11M)P*j`J"fng[g_B=O$Hl:=^3-G"<\IAu1D$,PjQL!k%abm)BNZGSI>XbZkW?jZ<lK3u6"erR,?6XIl(icGt"2^N;'tfXQO0]+9SVeh[8WOKZW'i&ofKF.:$:_@a"*HKUa"j$UCmCnbTWDQ=%W97u['q)=c?8^\GV.$#0#jSZXgs\.1Z)m'-*qCgQ)mH\!L8Y5H?+u%oO3E8RZ`&i+KFkel#ADmr0O>Wa6+7I(`Lr6)gQ^ST4dAn3%.WItT_m%iu$m)];?B]\Egb]lRXTXJ*F:L5V?P0Rga[YcNP-2%Q!j[Af5*V(>Wgc7;l\gHXSA<LO*m9_l@O0eO,]U/tV=aEQOD^ft%=Uf+[#^(t<FAn-V3)aQskhbH(=Km4-d=M$Ga/4#K]!uqpC(r%C-^_k0:.=61)un`8`$&uP?@6=TblsM&[I93>BF`)@]p2^2^_K6q%`P(nd:-#1.!.O0J??j]Z==0Bl@E%=UU&VppnKZp]=:bVhW/*/F*LV7HgJ^!JEl%XCEE\ALM%a:W:5APC(l"\W;#3F[(IW2hEq``^%Wi^!d<i&XneMpeG4pJJ%BK]'b`$C*J&<_H:J"(W(e<NbK0YZl"15@)0]IqJTbCucB5:UEnq^&)nX)L?thGVAV`PJ0BC:W%6Jn2SJ%I.uDAWjB(i\C!2)2s]._Nb`mKF=+c@!C:Zslc<q>Es&k0;Mi1-FQuhs.S<&0AtJUIDJ^m'"`r&ainC`o>CUo%>AFYDKMri.18bla%dSXp^(26,"Yce6'94L=3.&X*9+IPhg>6)Rj:9#i[f!,mgN\RE3)>6LnACo=^lk;m:!5:LZAWup_DNkd>FnulZJSe@^RMTW,`;t9r%+;k2/jXUOdnk1_tA^^H-7a%9Zg:X.dV<UZp[Q]F7OF0o\AV^ftOlEoMn_:qL6r@i-3>@W(e8b>`e^n9(PYEY*jA9TQEDPJ>fVKSN%-RVkHcE9hpqV/@lM?AT\12maB$IUaqZAB/k9_35Hr'e\'V-ofugOaBkB5a7.,8b9+/'&rf3b5ZDikDG-27U$gRr!`3VnVIWMMm$O%aS*oLa*poZRt!Ng74Y=_l6D59XIu"/JcSe?8&k7J8!8YeW"+>G>,/";^Oq5EL\,+YK/-JCbc0ud?pRCt-$9JdTP,Re\F/0sX4@<W%U$g?l[Zf-3COi6gI%O+C@uF+R6[H"a8B'EGq<u<+$<cj^-&$Q0.`]P6%RNomXLr\VHe<MUi=FZ-?#`nq3k8!^b84p`N[tTu!S/3Q%oQlYS6m(p6d8`FQBNr&q7mUuhTd/aBPYmWUbHC=,51P[&1_UQr9-9&s!o'H2QWn&V94HD0W8:mrLuLPd.D)dB1>Vo&G+6J$%=FgY%Al$<fZ*Jq_?[K9"0t6q[!<QRN)f;Tr$OSJ/].L[/l7@u'WcV[<=M7l)Y\i=+Ct#tQc,7fOI2L3/PNDM$mqg&himhoO<*eo`eQqY"%G"ggWH/`O6.t#/k&puGi2=u"CCU6^h_uN,9b:;5kCoSf(EYd4]:@Ts(nt?p5WY(X%[(QdbOnU'n"F:/T7s',RQ@PfA?$0VlYt:C'%IUdBFTP@6QF][0FqUQBbQ61eTFIG.2[Zg]hC97(jIS=.-p#Jqj?d@M:lZRO3XkAqAVQ]'-&![$5+dH@Ia4I,qhi7KM6F;G(V/-]r%1+F][mg<I-P8cH-3BV7.(\Vm2%tngs'j)^$&Qti3:g8UkmT+M)%6;V1QsfkL<T0Y7#A+H4I0[;8g<qW\<gZ7Af=.i-nsY_m=cJ@.%h.qMqPb>pFH@B`)P4p/1X2@%+\p_ohgc@.[o&8P[q+[pM-#DPbTH"HS8d6\G5qP/4O%'Sc?sp>:gq<MGn9)lQIn)J>ZE'+>Vt+'Q%#Mbr#p=^TG,p*hAPtsAQa2+-BjhGtH-2@*lCJ>8H(@,HJX!*D#HrN/^-s\uQ40Z`UEFarb+p/9>LueE3Z#4'(]5=k<Yi6^C70q71%*"3,+YBlmM]PS9N.[A-Z+3TeEOO?@8Nh!LO'O:s15L*J1)j5YBAd%BI7EQ!mTQUS?</04d)O/G#>fQ=&Bfl(6S:+MRN)(\]!W\um%*;cV82H9H-JRt*82`1%Qr6iO$+!K@F<406D$!iH]#<";9*+opP/rPZ]eKfd',ccAc[)<Cb0mr(oW?9+4(a#`?Z9IMcZEFVr<_ab+%U^E#'B\REVD:"CEctQP"V97r#iJ2Uh8j^_(,u]VY8XBi$nSm.C0PpoTTRf9nJ$9g'(RIgo`Ot>1<>ga;%XGf3emMu(XOe*//0H-H%*bR;^@HdC_\+qumLI4NC,t8N4-cHq"0W!h].:/(+Q@s!5L4c?n,^HK4bd_PH;-ab;`HsN/]Gu3!<CRl]eQ]<tksg3:Mp<bJ+^5Od%3[sdf7odV><]u(hpmmjN1LPm5!X1+U<s2@LDm59:\p?=#O.+JroH(G`R<V9=/"D2>nmp/,JnMc_/HLNQ.GCeVUtpU]XehK]k4r\"%_d+sV=fW/\,6G(1@SUl'gf.9)='34)+*ss=#k3Ge!t/r_-O[-$'_=-:gPS[;gBaQ5`ti<-R79>W4;mLV[KXWfEX5OAe6-GcA5JN7%cLg(qXIW<Ii3(tV79&#*lMq-KonB=^Ac`'JU9[aeJjKKl."IiT_\dfESS,8Zf1Wq=-KS6UU>>mM5s3]5b90QW\hc&I!+i"\W4#\u%5oJ/B#4Cfq6--U;QAN@D=CduNblZDD[&aH`ER#+-?lT<*R6tpAgg>ca.VrZ>n+!q*B>%h1N&G9s33V]0:Yga&SCO2gb6UAbYl')a%G2_l40QVB@.0thZ^fGk-_)e.2.0Xi;N&F]tW4mW#[h)YD%=A-h&DIeA:b8;t(7Eqt-c]HuG[T2`WPUUA$X'jo8J0#ub<@"D6k[^m%D_E3[(m0qZ,c3p;Y*TPB+q/r7eR$1XJlOIK0B,*1Xg3Iq'\sADY)ts-NX=r'OJ`lbTQ+lZEf2VX%7E?<U#J0cf)[B22X?_S;Fc=/%S2T];^*obg"Ca$=7^ES]Pl-k!1.&b.<.Q<]$\lGf:.@QrFZ3_<oF1e7s+s)<S,00lQI"g1U!A4KScqHs.F_<Cc.E]):lSo(Y+7IA%*KD/nK#P6P<In.#AG+79*0b2O35l*f%k&[8ZIq=)XD?uDD%ua#>;cQPPt374XI^,OlK"j0.EL/E!A[UJrTY?,ID!r"m#4]m-A%!F%Z-?e6Cm'BD@g*1!mj@Ii<t95&i&U(KK[RWCr'!j.CqP%#G?)$H0Q7gKY&@93/'ln]TicD?FWqsC%fM#mPOW,W9/(=Z]?>;u_-p.%%T7"\oBefUAFi'<3dhKit@SmR\MO`4B&7*2Q&:9dk4ilj*dKD7cd,uQ/[^p2l"<CcU!c1PF)c2!^":LG8Kscl<B3(E:_5f2/LPA]-%%i']]gK2KQ\#""t=Gpo>Q6"e=nk^:`);%!&fE[HR(.DM/B\i?66?+`&fM/@NoWoAefF*9'A.>Hjn??E%D#2tXIFQ!-WZLFi#"2[l%"])OTBn*2`lcl[a;"C88(kGk$a&*X>S5_D+m$jn,b0a0BJF]g]X[tsd+QnV(Nuta7\\"'/Z`<(#N3C^2De?*QArs5dgg.>1YF,l3%X0<NI/#Zj&OHPn+-J8MMAaG,_WVXK7cbp99;C:TV\A<nANAuNIC]K/uR:dh<]m63-?`,:&!L."@L\\$`D6EuA+p&!7c;aYn8L`Qq%Mosej"R7V``d,i^;cF3sb(f#^1j)[fdrW[$3NF+KUsDrs3ATTC3m4`.s4tk'T8h+SI^05CDLl4s`6sNTFF[&6\!03e>rt]VkejD>%*BO.t'H080>%D1&WC'Sk#b8!4+=r2\B50W;#S>N#C3e==Q@Vc<h8Yt,eR65/oTI,H-p\>3/t:nWH[jP8r2jYRDu#gn'*d2R*c9+'%U]^Mt(s:YmmknV,hKZW9/b.S&ZH+);,_-YSa5YTfP#s)il%Ejk:W#="Es,JW9dJjP;!#r<$(O-;HdKl"lelf)PG9)O,t"NL1li=7%'Of0-etm14fd+@D]2VB"M1rU5r(IL6+cVO`]DW\5-<oj>N88_)MXm]/d5%B\#JlC2V^:(66TCoO,"/R-/48`Hr%q$/&OZ"Bs5K.?%]IdYd`Q3mH,]2%"n<tj\"3@Z=K^;Y`H&i7D(Kt;u[>Sc,G&q#Kr*@<T'iILS`/n!sN0m,EnVA`i@pS;3Kds='Jca)T)EM!?Jmlf^%n%K*A@8_`9JVIs"Uj[$2o6=A1B\GE-*GDsO!fk\0DiV+pqZ/H1DHeAu,M<:sk_XDT+[+="X)p5PTG_%4Y\H]+8A)R"Ak(!i\d`N^%DM4M^PlRrP'aZENE,0/l03)='OG#eL]Gjcu5(G9>TPH$smoApD!*@O+AfZ>e)-s_oOr&-m8#A9r+(6;Mb8QD!qUhgO%IP,8h7s?K%I5buSj5Qfhku3*M5cIa/IrRH\XB`=A4dTl@jT;A$qdhpSZb>sD?LTss%"nAJV7YAO;bZSL4bHld^CZeTfeBc_VuV"[<h'e/,YH(:%oh!4F]<u.j+?@-E=6I_u,;gsBIH%.Xad[M6Pr^]Ig0ZA[@hhFl#6?SPUZsBt%YLfsZF*3IS%8;@94i<#Zf1(+h-BBf$;J*i\NnR(%daYY,0K9M2?5$n$Upp5XN1>CfprJ8Yq)T_3)e=hrq<[=iXQPT0NKEP)<<'t&i>2NV4P9bK(Nm,i"Ehda`A.Vm%+\4@,o5-S\f5NC%(HE0X$jkcbn-R\lr#;cZh2dKH3\&FNP@iU7$s#r^"Raa`QDgYn>(M?I4-K!M5Up*J=:lbhbD,3LB@.:K&s6[]n.cd4TY/-*W\URd%B&2HG>YJFpgg-\#+,4(V[&UB:-i3rKoqFbQFHM:G7D+X44eUhY+-%6,`YV.%T60<E&B`]<<c0]SL^[Th'h+]6&48bN$t*jVLA]Vj%DEJf*NIYIu0"$a4JN%igW27SgCkA/-4l\f@e8Ck^+Z3$>[N1&1P`\ch_AP7jj"=f@9/I_`<#AsV.O9V"d]VjZ8agH:!0knc$"c\1%>RGZVXbIbh5hPce\a^R/%VfMaFKjmHZ74]>Hi8il&k]d8$MojCeu-b&=qQP_5Z[^Gq&0QNnnGFa00b2Wo"\p4N\UE0FPHlDVORll%h9OKHGP,&?ka[PDeJ*XhmY*e@83459<c-,U9_o,*qPa'7Wkbgc;01_"j4B!lHSTbfEC')m;O&?ndLNrdlZm[%RrdGdOGSK"g/X]1%R&G,X#i-1#eVc=ecHNdD:j_Q`%[gO%X+AREm%0@KH:^O*.@EpZ-!#Z(WR_.Gggj>eAAM;O*Bmp'H=L0"0@`4t<sFfY(*Xog6;o^8%_,M`8-a2mm&*dW^AjWZWcaco$X0%RMfr"?0'7%1dl'8YuO:m`=eU$@3V#:9Hm<Eo!JiukM%,FYnlLX@kBjV10Lr='<D82gr8]Xh`%Ar_ON9=eYnEbg;*PX7VjQfl@P@Psf*lD39>J=%a"9iS9<2pd__R_#Budk3dAdi'+&OH<I4IUDZoMAQ>nZ"-,(Y`/fCkYU^XKG.42%5YZT1c@FF68bK-!H?=;2956LuIh=!*ZN/#n4^]=M2GSdCQPVaJ8M1mdP<Cd2(nkFj77@G?fcdI:fLhp^=:2j8-n=MVM=BiYTeY?0%'Ob2954`B":C[m\A`UtNn[A\4!/uW%gQ;*&2HPh\br!P.Y`49HEQcDhC^/c;p>Wr/I&+JQftFLj0It#%&$fbB?.h_&[_'\T"4>TN%2D<-#iOb">qI+Q.UFV8Y1)/V?s'ei2#?n%6Er-kg-74de.6j^l*#W:_i;73*K6'O/%?uUoV[,tI.8$?Im_3,%<m.oY+rXU@(^d+h%./@ZUaL#)DQT.#lDG#chd"eQV(l6V2d_QE>9/($DB%Vqa>Il&cI<?EuJ-XV`c&+67Z9931SsYbG^/B+ZU:A8clSl6>H1qf;R/Gm[%Ba^e!ZnRa96MsIQFk(<V<h&*lY?!eQ$pCN5:8'WZp5;pX=HR#2'8[S.),\RM`=8#j2:TPq;FHT]!?O@,N]%o6H^:le@.!+Y6GZ?r%Xqp%&ULQLUb$[0S?GX2m([^ob+,ipp?/&OAc0F'\++clEXgKm\V#)j^nKc$(k,C6UR-f3A<<SN5K0nMLdjp/mUT[$&^(*)Kbd?Si%nuN2,n`J1f!o#/nNFU12n\E##kfG26DG^rOTrK""!eunPV,Q9c&$:4m`al'Bhpc@iJ.MFXA5H..5Y>UF$3#l%TJnWH^<Yk>k95QP%J(gfu?Nd?qAbWNLR89BrT\8q%Lnr=@q8F`7e$EuWdp(\Dpb\H6j8Q95j1T\/ndK$lqt!..o3']=#@Ha+JeIH?0"@ee5ndJ$=2kjm%8hEhX&An&apJj*mUd'4.X*1tl)t4Q<J^E7he=?r<lgimECr4$pqti>P\4M7@XnL(K*3GqXK=%!4<(6$k!YCa2,]WP*Y+0B`U_Ydr%Q,DbJ@QjhW#h/O8^/,soZH9damHdYH-jtYIWWT%c0Q#aJMOj$"q@RP[esFqKRlC?X(5I=k8YC#C#&96#Y<PUh%iYlZk\a?@bYPP-%?(=eP&Z*Qbc<nNX\pUFK\s"]*52>C(5@"Tm>s,7`0Aa"d?2Tf@DgDBBdqIU!qnkTl16nT4]Iu&oUBHq:W<P#S$OjLs#sYjj>:(V3%,$r"'Ul5u>V?:HeBD*HV1I[GYV$bj)VMQ"21e+OuYD4O7iWK(aP\[A\Y\ID<=Z-e%"AgIk(`-WQgTnNE8EF%)*K,>aG5LnffiL0T%Z\Ng7'n+bMKAd"i"2LfV9&MQa(e3;Kr0*CO[c*I6)mkDm*Q/KJj'F6WmbmTkmS10P8bka9B%6>SSN^d40M(a9o\sOpY=**+Q3m=H%MrLa]T??X')Q0s+&<gD=_mk@brQ1E)fTR&!?R88hb[NDfq/3C&c7"Mj)p`bjn485Xhc#d,Kftm)E1+>"]GtGkXIg\)Ds5!hN*N]S%$7XW>6Q^4fr\qq,reK\g'P<7\(JE"E,Pn&!RZ'C1Qj[<L/=/,R[$/cW4OQ<-JoL!f"iW"XpXj'b0gWbZH);bQhj9:?&6LFmK0ul>%qfXOtDo&`kj.'>C%;U1L&[BlL)Hg`V%Z8Vf2A$hs)!WFcpD,eJ[dK_rhGXsJP7^u]p7(dJO<bhIm)>+fFb"?n)YYYW/WF^CC9ke0%h4o9)S*oI<qfGgo3Qc(O_0T%Zb;TUN)e6Eh-<E#gN[bmrW1=6$K]B1Zd,R5tU_S:,g55_oN"-)[%%*.h0S7&!S2\<*??P*oE*"D5%pm?s.(SG'e<,*j5A-6FeIVq(.Cc8A+WT,?RVAr'&^hQrOp)u%k^1<=l(bZblLCsD?Z-*l.;`4m!JmDVTV%%*m-KFqS:XGcWA1DJ1%,%oPIS^h";aN35G"CUPp="^Q["n&X&>LQ*DVBL`eXQ@da>OrK[LFj5@4T_5pQc`@dZW:X#IT*+TMu">LK?bERol:;UTq4@)5f:6t%f)1Qs1OMC.OLH7=R'I"=F"R,,Vjd<0?nD#EfFi5W`aCIV`?:8f/U%<[cKo:YF:bK%G+lCNZO2jJq>TTc3,D@:!)Xq\1V.R^:!>lK%jYqm2Y*ImUOf*QJG:;Y8=Ob/(l,-1f5^i.0.htWn=1Z@e/4!lJ3lObZXL@tjqb*uF34Il3c:h72Vc9:DW>3S$f^=jej$-Y"fX,OK%]n_\"B=sD`/K=R"^_eHhK4HbY?Eds]og$)+&-TR0.gkgKG)l8n;h*F[+$M3j"_ts[P`O_L/Bi)#2q,-r4h#F^c77E47A:Xd<lU'G%<[S@:7(,>T[?.X/?Cb@E17JBq.$[+('cnU&d)1:D`PuB54KK6hHU)%oj'1l`b>._qPY2E4Ji9]A>;8%M@Yg/CKhNH3H)IQu3cMAI%P?'gR8\=rKh3et&Ij0<*7IWQDhkWCMTa@;VLbJnPoA*;V]be9r!(2dc37Sr`f]l)5IQ+9l6=arJ84Y#1Ke2!BXSTP?XO-1(:,tCI%lI+OWGiXPf>t=OFi!ZTK>o"S[kn*OSi`[l0^8&D<"tdEr,4>2.@polqol3EVoo#Y-AeCIMXH'l&>mCQq#EeZ_15=GZcjonH]R!G;%_@cLo")eTg8P8+Mp4/$)()CU2+i6/-^lR6Qnun6%V^e<4oem8LrD4qYTufQWR]SFi"'Mf4hUTUGBTT#cJ5dp%fDpQ=8I0FHRk<VR%+G\p_n_6@*k(37jZT83TaW>\..nN?92VXEUelNp9LukFKDXk2X2L5^%/)l7(\Jc0Fg'NFgS.%9$7*>5aFHd'_T-0ceOZ+^:"OKH0%mu]Q^-^,kK?I`%'(61ou]i(`F&rh^/2"Scn)5_Cb6#hiR*gP:^V8M1L(728.o_N2a:GOIAO1]2!JZg'>oZ4KgWJV9R,!Q92T:V"Q%ZUn_q>*A>Ll>iiN\P,]tWS@u6),pu;5"[G$[b:'iH!+C?W9(c@01W2EA%7\E-6>0O<a*X,lV;?<EF7r>^dd%@+o^hjG?Jq%[4/D7%;-Y[^WJRLfEp2]%=HK=[24Fhm_lF(3Y-o:&=H33I(TdfWA2m7.A"<l$@?/M,E^1QS9bPB9O6IbUmcn*klp!:HjHh;,.;dXIRk+iZ%dd&$:[%Z2sO$&<>dq'#8j<T>MoGS@^M:j!\!ihip1YoAl"q.a=?llKr]Y0>=7+dUTrF0K5Q8\2R7/:Q>71hpiZ6Dg3W%G$i^-b\*%9AQ1LpU-*+D9H[O?sh$@d'=fJAY\G@-[X8"8J=3#*d],!*2SYf:,a)<,.]b"^O)pPl_(tM*;_'n'@HqtdUV/HG$Fhnrl/.C#/p#o%8XZ<^Lj)1hHL,;18JAN0H;BJk#VS`88#ae(\un\,7lr0c2+PBX`Y0P)o#T?6RO*)%oqdVo,05XdkB_<MUhiNHOc'YV/k/"e*kCZO%e,Yb=h;fn_&(e_ig<*H&%Sr><rRIB!\a[bIEo;)#8>-f."5CsMA+;]mMe\!PQ6Y9Wj'g"c#9Ku+VGQ'uUSq6@A`g`MBe#/taKVXb%i,WKk=["M^A_MKORH;6I;26eURJc,t`R'0hmGibUrWpq8ioJ1M!dg.aIrr,eZ#!#hQjK+X8:+bE[c*]+$pP8N'$*b%Dbud13rBgo%Z47g57tEJ;L=[#D5,oVjO>qOHZQD+/>>n-(/dP78mT-6K<OSDd:`]oeO'I@llH2#.NdS&^gqDE^R"A6$as1%G[`W0&Yd8B627i6o%_hTNdl#ns,X1NZ@bKn"FAb@r.:+%//@eJg/@r%;oRsHAH.LWVarMW,*]89*BeO,DEALQt!pIE!bOl\)t^R':8SLGk!))E4ObIY0u%%#<1ZYXolrl4il`^3s)nB%ZL7pVr))QIBCe5*;f&Ahs<`eGPVWpTE(GCrOfiJ[]Ub\$Y*W*Hg)4mp`JOXN3tDk&TS)D3$O9=s?J>%NYdigla,-^/SeYu1(tQLR#rUpSLFBi+M#aZK8"lJ:a6G(ehGFIP$pm1B;;Lr)e@oM<4htD&^9+<h*W87HgXjq<)KNMATgW=d"b:s%FNTGcEp,DPE+Q!nLX,+\V-Je;WT0YSoKnYb7E*f^Kf%F@C$@o>HrcC64r]&Y,NkJTrks,*A/'&FL7EVA/a`F/+0l>QZ@MRF%UD@C%'J8Yk\Rl\prS;B001/Sa$l=tPmu_;a"RnNo[UHVO=d'qNVXTl#`Gk]P"?p+PI&d,WC(ZJ%9%@`8905.=+S0*OgAgDT3Q,aS[-eTu%87K-dBmENIIiORJl&Di0U$MtiB8WYI.Z('>GP#_NM"4D^RXVN+1`V`p)1moQp5uLoQE<^*W&a?i1.lWGG^//AWPpirqM#42r>6O'%bN@(71_T"gbkjXI17F<t6[OP@\!/EFJ:>djQuoK-4$(H7W1d;7.cMWnH6#WV<#/tijAin6.HDr]]I(cQ,MtaVGM.@9^"5<7PptLn%Hr(IQ)]8bZ;5P\X:VebKD;>c8.p7l*pu4+8:o\R0dhh0s68@e`Q4#d"*R5T%h>ijIB7.mRgDIblf_ce9=*%/0\I'KakE]7-\m>Xd%T0Ub71%R\Rgd@]<TgqS0WeN\P<FJ7_Y^LRfEV,%B%!1V>\X-.5Z<P5o87;DdZ#[VWT`3&!`H>(h(Df2mT#Y#1F+dW7rR",o4"*[0%"eN:%QA)e59OU+..kAYHG<#!C_ac#@pUe>GmJ*`c(s\;gWcJUS,`RHY:"UKlqUj)abk3[M@d,7k0pl[bPjIYhd[55;@)PFX4`D>b%\./km"/f>0FBY),@Xig&GJH>k&D!.rcsROU"L0"pe1b*^OJkYaNLC9lnGoH2/^Ob=K*52bBtgVF&io3P&#;)/RL<M2c]%Ku#Y#"*%q!=U/=u(H+RW04tK`mb%b%9+SG.k<NPk((^'D8*&oJ5(!LP?69-U%#T]$WGMhCV7SfUta_=JR;cNcPc,]MHfW8_tn"jl*"n]p3u#%]ADM'OZ^mT(%/k21SgA>RkesUM-X'SXLDeKi][q:rlB(tiCkX?f&Bo\%:'j7SWS0_!)%pa*D</YVse,Y*@b/g"fZ1`:lXJt^s(22%J89%*<)2Ma_pBL$icbl:8cg;"?(OGQacqnP,RS]?DYH\TE_Qq%%6]cU"I#NLITG,N<MX;aJhaGKQAJE=1:0+5aB&uQG);R8,O[R;%ILgaclKi2;FIhJq@HG$k:Y;t:,6nc0@FK%HnjUu=Srlk(>KXOGW.?e5PHL(&Xi7TWWh&At98'\VfJ?kc,ksW&Y!KQ8U7^#%9sRfU%9S.(Nc&qI$Ht=1%QmdWJj:aQM)OM!,,hq\!DVIV`]pG[70;Am"K9^!_/[ma^KDC]ZWg=Knn>5rEJ7C?B-qK(\]r)l,IX`0Sh%AY?%#0RWo%C3*6g\6D."hi6JZ@3m08#<f<A8e*'"9!gOdt'>(NNL$OhFXIrQ;&=KSO(c<Leona`U+#hU@#0@)ibP=NS8OGCa!f#0+Jh@%ZY0Wf%q^3n`I$CI6[7ElpV;dKV3Dq)1SAs84;WY+XX.`1_9c:gUB,M+O%;$\M?.<=-:QTENA2nEF"W>@kX[nr22(OJ?3akWVATBX%<r!89m%5\(a9grm_2JB*)cHVY8Vjad#HbR4'Mj;db(C`Zd\)i*%h7)irM(l+l8[j5TWG:9FfW\r]E@!b4R+L6#tTsjq=8#,!mQS#%+maOj_`e<bqPS(Wh(tS*JQ1k2JobR=N2'sFi%5G58jKm(VL(,*0Vm-T9Y"i9*+<\5.tp![\e@eoK_"N`Jog"?h7A@N.S*XUV,L<7%e8S5#G0>(!UH=@m4DhD51R61!06@a++CPD6Vu]\fRt#c<qT@GLi_l1\7pra7Z;q!"h8g=XPKZS+ThnjmZ=8YZ"+]tn\?j,U6!;+t%HfT6+?O9!.#OWliXH"+;;K8on[!LAaWfj_nEH:,-5eG-e1+,RuQCh):XcbtjG]T,D32n>cX$.Xnf/9UaWihdu-%7ld:?R'OMF?><%<'P-8MA(dkd:f8TBk+K?aFQj<a:$6A%]L>2H%>^[:UPl*Ps-Ij$mNjJA#lP@nuSkLo2\_:$A?Y/iJs_Qfn5,UgtT,8@lGnm*9/5H%MPFi])?K0lYGW]WbeA*8"UrM<erMKl8u(0fEDV2f0S8Xil3M"s,b88o,N^Qs<gG@`J1OD0D"GrC6>0!'XZdn\.';$#h\&^&Z8F\I%Tc)[b!ef+s%c\Os5;C^N3+MS[#YNb%YFWP?7d*O16Z@jB%=Z!;YugHI!Gtlcr*`sp>FO\M,K$:[[/&/q/)8m)Qp55'qZYTsD>neS%a5*p/RsGVcbo6WBd*AWU):0+/pX$NO+d+h&]+Y,A:9q+$ZnU5fZ0DQB,A"F-RA$ge&qMlh<5T%#d_8e0d90*#nNO-M(AU:d5?1F-%.D%0<V&/qE]1n@"O8>Li4h!8-%C#esN,L9@ObSfhQTacB<!btCT#4Tq*XLLK*b$9=.:i)]<3(unA4>TGP,`68+IBAM9OX\kP,XH$%"]IbC#CscU![2G`1XJmFgeRAO*t>'qhU'sG\C+!$JLZQ*h%VHhnq0bqrT2TM?.-!HcVE*E"!N!%S`3:**R!#Dg9uGcF@t].M&,<<%[Zr)@%/58aA=a3c<Lo;*m;hWWWt"S9lLg:BiDP"28Gbq:E8Rtd8BA2XRUn3lVte]Mq4Qf[J#JCTQ+X?5W6^AZn$!AhCad,"*dFa-%51FB':9fYt\]Q\Qe]aXe`>'_f`a)P$RaHYuY)Rik88@Jn@2)5B<2uVWlkh@[cr&B_D.7XGa++robDXq:+Etat>p)bR,Bm@sJDFKn%^L2#WIb8+.g1kn^LVAYBD9Rt-"]#;@3mB_rB^.h9_"!6\/6CFT+IFta1N26r:_-8.?.Uk.Z[9j;m2f7JI,H1LDY]=l,d5)L/[^/$%14`3*G>qep,.-4p?miS_W%1_^GKb!6RFNFT=Y\2nhLP#XY<FB,BYNuK@t)7j7B`XR@X`&$7;:)8T8M#Fo>l^P-6]D\&bG<@!ZC;d%6@Q9:l(agYq,-Bu(;=D!Di.WtNlAORI_pW1L1Jp486?B1>PImK,"(\a4cot`864le6_-ZRQlXBQG!-]<>q)nplaiAX\FL.-N_!<f%o2p$>=\LjEW0atVUa8cRB5Sg@#rRM2\'.d:%`JlO.>&P:!=>2a^_"Ri<'8#k&]E,BHVpp/n`a&:k`i_9)X^a].o4s2S9)h)?2hEH%N5q3TNFE5UaIFPb7^D;Fgi-WgXmbi-ITgW&p&I@'kc3ILS>g9%#4&\A)il7o)JQ;<8/b15[U&X\HJEJG@j\D$QBm3(WIY^d0[5"n%F4Rq+h!N*0m,!(]%E6t7q4S1ee2s\PKe*`VBXOg+<;upSj]*67"A3Lh86J_dV,h8u6i4u#CEu.cGN;C+QQ$"*o`h,/f$kiV12PpT%Ru`BMUALueK!%@i`^["Qo!4\5YKf405M&T&if_Mkk%![=:2MRAjFF>h\b]0hq:A**pHC7$]+Y$kF#lg<AD#Bn6HA.u2/V!9o*-6g%ET>R33:FBSG:Z.R*T/0c!c#]O+FU&GA_@aM8C%ak(c0iBfhN_)eoH$b?-Z@UK]Xd@@GO="#?eTYp$Pic-`m#'=0MR0g"nB+p$m0I%%;5.qk,s@g19chFqX%2>?G2&-[V7O)X1YuXL-,#PV-1`Sh3uNainOYcg_?o64S%$.HC3.)=-#Ba=!hlpSpV"jnVPROh:9]DPT,Ie%e<7#@6Vd&aH.LN*_/snM$mG&,$#>(Re^9qAiqLg3@ck(s?(a;_H-CutJ1\H=RYfr>6q/se3K_a8,I,lUH!4r.(-"]XgfJh!GL<$\%2JuL>@<XlaA+(cj<k/13K2e$03U@u+,h?"\))?G[*kOaqAI7tnTt>qeRJ0Ge[>1D+G</hPBd=C9MI&4Ql`f:]=/P5>%R5<;E-Z/!%q7O;cl2)CS6BjW`=A+WoJo'"FmbR>eF2</ulR>2+agtXBTZWHK>)@OLC?t/k&t;I_B1S$TiGeLQGDt<Z0JA"E?)_oR:$$\rn&.qQ%.ndKo[TcK[V8G:I,F;J5)J=EBnS\UC/r@<+Jd'Es/GDX.p4p#>gt"%OE(tW;Ne?a,A9TFLe/T+CgmnK6<iR\A=6DjWfhg/JEs"<I%Qj&6A40H)UGLQM@cpHrI-n!)>dSgfp8lsMD)Jcnj&s-qb=ApAe#<?bS")CNg9(i>Ce,*CA2&[I6o-S?e.lXnrgiMSuLKbTk\]u8m%\@Yj"p%>?6UfXMT^\"`pH)tgT>LpL;,Hm"_Dn'A[Cekpa)f@[l5(coTC7>)W+KIHVZ89+NVRRoLqf6WROE<J`L^gKL+H8.hakOn&%\cjeqO*ocS7XD*qn3t&E2![[WDE878=]OW0aQ>;q"(>CT3V*F>8RgQYE9gQm:*h.Dj(aOU.h0.N`eH^>`P-PANOr?'hbm[.\C]4]%7bK@XL0VJ:=^d4Rb&Emr[c5t*gQgUK*O.37^9SD142"!.?46FRP(O*/G$7pi\WPDoBdg,qQih9[;OT9r9b9NK72BRNH"S>N[ho8#%/S:=XKBB=LL\e97*KSm%-/Aj_m;?#S`*GCec6brPrWg?Ba5!GX-tBLs47b@ah82'#qkn#nndKTCh3tH6pYD[l8'M;sYb^#8][$A`%dQ>)Rp``k4O<BE\9,n*3`f6bf^/sX2PM97=\:=hn%=Ab'5uI)47ik1X!RrI&h#ViqX(&[S\`F4DS+qnAd<j"O.=oK^%4C%roRL5q%B\gtVAP\%!">Qe?7:#,^qFZ8/U4-G'/aPXk\To@'Q$9bI)PpQ9^q!&HRUft`J;]ntg8DcS.5OK.&*F&FE\2A)86A\QU#8Wf$HU`d%?;7Z'l2bX"h^UD=m2YsH65<RfN."&c^K"0lS4u:fOnL2B+P^IgQ+.3UU9SDkWjq6+pUG#c9$?e)c!hg(p^)'Zmb=.8atiS7$m$c&%9s)#J+S7p,_\u'M=7l^-E)JLmk?S^C'')DLr2N94Ni82&PKlek,Y9I&;Lqhib:HiXClt[QPsXK](^h2K/3^Xh5H57?a?<7m$8SB^%E-G.]3Om2kc<UpW4!<q"?AE]<DF1dXEVbhl@?acIVLTgtG;hF14nj7E%&-%6G+rc'G!(mbD8DrAI<jq_Cet'XRB\mJ<qV/KTK%#Z%hZ#"&e1%q,fhZ[4;-%ChZ;]729Uigd,g4jTmm^[sgDuHc3\tj#0^M&A@;fK@a1hr5:+Eg60#^1G]TGSMX[PjO(H7gljH]>#-ViKu%QM`lV]eKG@SlVo&E9(%"+??!uc8RRD*s2uh-;d%a]\.=AdKX!F]HrYudbYX8IFskH&e:2Y:t1A+"Pt0D.l@[;6RXT2$D;(5;pl?F%hW^;SX/&7<CpFRnTdQV;[SrL2Ft<7J7$'B3%UA]?qOtmL9g.#sYGl#bDC2\BA`;E*SU><+oJc+C0a5@NgP(>g3m8,3Q/a;9bJS.h%\9[?u8P#c:6qE7O_iTmuC\La#/I\iL6EeoUek_mG']jUkJ/EJ;8mY0(pUPK4$c;5CVeKM5^.Z]q8c6o#OMO&ik-@uq(apC1p>IqL%9IG'WO;8_55Vb+uI5r*g&'E89Pf>DW[R?='8O8V7jUQSVHR2n#8'2%)@/\XEY!W??jb6jigLD?fVfn,so;-Shll:g)nJD=02IEa;%4pX2J?R!QcO3%B'mU;=&k[Mru98:#+8m;!-@92nd7Eq0FD<!H[4B5LFlop[WQ'Zqe-.cU"i,WiGJc9o9XmWcnFC*WYF2.jmh1\"b%]cWLi"<i[a4O`a&Om2t/E&C/7=`=?-QV4p/8#!pP<]lP5aP%^:@ln(Y]WR9,(6Pc&$kSG]oluHBn9>@Y9btGU\VTBQluPS9-tmFN%Ke>O32:.p*9srAk$P`DpF[Lg>d="9UF;"9U6R(pgU=+I!K9fD[,Y'6[FqM%=>j>FSJ_r$.]C:5Sns<]:K#U1T..&tc^F\`pb6fL+%4ta5i/EH#;`P>:`oMW)n7/U1YVT4`YQt0a$V%>Bf$8B&O10QTZq4T=*l9#'c$)Sg&lGq^HYOTPWs$hL5m/&`$Qj^5ic=Xt;r2qt?%S]GA7[tZ#A.R[:!WWFa!k%3Tb4h7S./!bA;<>#8p*#=s%l)3S0V.O[3_RMP4Ia^W+(M65"\9^4N;hf+un9]sRkRs$qcir6HE4M\@%P"7PdPj$t`D[-/['+0J=emSRATOrZr2H4o)>&,pl"H&'ghG&Ar7Ka'^dZhQh3'!ifUi7(bn-A8WF,ZQi.16I%DA"Y4PZ9*pTh*do%i`P3JToRD)G.mdQ/!$?XLe1@02)*=@DV:tC<b&lGRW5/].tDeCDe(Uu<1dc^c0C,s+qW-/1WhQ"Ao8Z:'d_-lknGm=]UQm$qE2O<%%J6-=k/!AQjWB!Jh*:h@nULSf^]'QQJ,JW)rquM?s3'k[pV6auTE"P5rqVWTm9fkbk?n5ahuEK3:S7X]YQ'Jeq:#@brTDWos7oIj%rr;uPTE"QJhuE#WrI9o6\)cYcqqXL8Du\!6s$)_$kfN~>%AI9_PrivateDataEnd